Index: src/main/java/kr/jbnu/se/std/Game.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package kr.jbnu.se.std;\n\nimport java.awt.*;\nimport java.awt.event.MouseEvent;\nimport java.awt.image.BufferedImage;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.util.ArrayList;\nimport java.util.Objects;\nimport java.util.Random;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport javax.imageio.ImageIO;\n\n/**\n * Actual game.\n * \n * @author www.gametutorial.net\n */\n\npublic class Game {\n\n    /**\n     * We use this to generate a random number.\n     */\n    private Random random;\n    private boolean isPause = false;\n    private int Round;\n    private boolean isBossAlive;\n    private Duck selectedDuck1 = null;\n    private Duck selectedDuck2 = null;\n    private int ammo;          // 현재 사용 가능한 총알\n    private int maxAmmo;       // 한 번에 장전할 수 있는 최대 탄약 수\n    private boolean isReloading; // 장전 중인지 여부\n    private long reloadStartTime; // 장전이 시작된 시간\n    private long reloadDuration;  // 장전 시간 (예: 2초)\n    private URL hpUrl;\n\n\n    /**\n     * Font that we will use to write statistic to the screen.\n     */\n    private Font font;\n\n    private BufferedImage bossImg;\n    private BufferedImage[] hpImages = new BufferedImage[12]; // HP 이미지를 저장할 배열\n\n    /**\n     * Array list of the ducks.\n     */\n    private ArrayList<Duck> ducks;\n    private ArrayList<boss1> boss;\n\n    /**\n     * How many ducks leave the screen alive?\n     */\n    private int runawayDucks;\n    private Framework framework;\n\n    /**\n     * How many ducks the player killed?\n     */\n    private int killedDucks;\n\n    /**\n     * For each killed duck, the player gets points.\n     */\n    private int score;\n    private int money;\n\n    /**\n     * How many times a player is shot?\n     */\n    private int shoots;\n    private boolean leaderboardSaved;\n    /**\n     * Last time of the shoot.\n     */\n    private long lastTimeShoot;\n    /**\n     * The time which must elapse between shots.\n     */\n    private long timeBetweenShots;\n\n    /**\n     * kr.jbnu.se.std.Game background image.\n     */\n    private BufferedImage backgroundImg;\n\n    /**\n     * Bottom grass.\n     */\n    private BufferedImage grassImg;\n\n    /**\n     * kr.jbnu.se.std.Duck image.\n     */\n    private BufferedImage duckImg;\n\n    /**\n     * Shotgun sight image.\n     */\n    private BufferedImage sightImg;\n\n    /**\n     * Middle width of the sight image.\n     */\n    private int sightImgMiddleWidth;\n    /**\n     * Middle height of the sight image.\n     */\n    private int sightImgMiddleHeight;\n    private String gun;\n\n\n    public Game(Framework framework) {\n        Framework.gameState = Framework.GameState.GAME_CONTENT_LOADING;\n        this.framework = framework;\n        Thread threadForInitGame = new Thread() {\n            @Override\n            public void run() {\n                // Sets variables and objects for the game.\n                Initialize();\n                // Load game files (images, sounds, ...)\n                LoadContent();\n\n                Framework.gameState = Framework.GameState.PLAYING;\n                framework.startReceivingInventory();\n            }\n        };\n        threadForInitGame.start();\n    }\n\n\n    /**\n     * Set variables and objects for the game.\n     */\n    private void Initialize() {\n        random = new Random();\n        font = new Font(\"monospaced\", Font.BOLD, 18);\n\n        ducks = new ArrayList<Duck>();\n        boss = new ArrayList<boss1>();\n\n        runawayDucks = 0;\n        killedDucks = 0;\n        score = 0;\n        shoots = 0;\n        Round = 0;\n        isBossAlive = false;\n\n        lastTimeShoot = 0;\n        timeBetweenShots = 500_000_000L;\n\n        ammo = 6;              // 기본 탄약 수\n        maxAmmo = 6;           // 최대 장전할 수 있는 탄약 수\n        isReloading = false;   // 초기에는 장전 중이 아님\n        reloadDuration = 2000000000L; // 장전 시간 2초 (나노초 단위)\n    }\n\n    /**\n     * Load game files - images, sounds, ...\n     */\n    private void LoadContent() {\n        try {\n            for (int i = 0; i < 12; i++) { // 0부터 11까지 반복\n                try {\n                    // 이미지 경로를 생성\n                    URL hpUrl = this.getClass().getResource(\"/images/hp_\" + i + \".png\");\n\n                    // URL이 null이 아닐 경우에만 이미지 읽기\n                    if (hpUrl != null) {\n                        hpImages[i] = ImageIO.read(hpUrl);\n                    } else {\n                        System.out.println(\"Image not found: /images/hp_\" + i + \".png\");\n                    }\n                } catch (IOException e) {\n                    e.printStackTrace(); // IOException 처리\n                }\n            }\n\n\n            URL backgroundImgUrl = this.getClass().getResource(\"/images/background.png\");\n            backgroundImg = ImageIO.read(backgroundImgUrl);\n\n            URL bossImgUrl = this.getClass().getResource(\"/images/boss.png\");\n            bossImg = ImageIO.read(bossImgUrl);\n\n            URL grassImgUrl = this.getClass().getResource(\"/images/grass.png\");\n            grassImg = ImageIO.read(grassImgUrl);\n\n            URL duckImgUrl = this.getClass().getResource(\"/images/duck.png\");\n            duckImg = ImageIO.read(duckImgUrl);\n\n            URL sightImgUrl = this.getClass().getResource(\"/images/sight.png\");\n            sightImg = ImageIO.read(sightImgUrl);\n            sightImgMiddleWidth = sightImg.getWidth() / 2;\n            sightImgMiddleHeight = sightImg.getHeight() / 2;\n        } catch (IOException ex) {\n            Logger.getLogger(Game.class.getName()).log(Level.SEVERE, null, ex);\n        }\n    }\n\n    // 더블배럴샷건 모드에서 두 마리 오리를 선택하는 메소드\n    private void selectTwoDucks() {\n        // 선택된 오리들이 이미 있으면 리턴\n        if (selectedDuck1 != null) {\n            return;\n        }\n\n        // 오리들이 충분히 있을 때 두 마리 오리를 무작위로 선택\n        if (ducks.size() >= 1) {\n            Random random = new Random();\n            int index1 = random.nextInt(ducks.size());\n\n\n            selectedDuck1 = ducks.get(index1);\n        }\n    }\n\n    // 오리들이 죽으면 선택된 오리를 null로 설정\n    private void updateSelectedDucks() {\n        if (selectedDuck1 != null && !ducks.contains(selectedDuck1)) {\n            selectedDuck1 = null;\n        }\n    }\n\n    // 더블배럴샷건 모드에서 두 마리 오리에게 sightImg를 그리기\n    private void drawSightOnSelectedDucks(Graphics2D g2d) {\n        if (selectedDuck1 != null) {\n            g2d.drawImage(sightImg, selectedDuck1.x, selectedDuck1.y, null);\n        }\n    }\n\n    /**\n     * Restart game - reset some variables.\n     */\n    public void RestartGame() {\n        // Removes all of the ducks from this list.\n        ducks.clear();\n\n        // We set last duckt time to zero.\n        Duck.lastDuckTime = 0;\n\n        runawayDucks = 0;\n        killedDucks = 0;\n        score = 0;\n        shoots = 0;\n\n        lastTimeShoot = 0;\n    }\n\n    public void Pause() {\n        ducks.clear();\n        isPause = true;\n        Framework.gameState = Framework.GameState.Pause;\n    }\n\n\n    public void NextRound() {\n        isPause = false;\n        Framework.gameState = Framework.GameState.PLAYING;\n        Duck.lastDuckTime = 0; // 오리 타이머 초기화\n        killedDucks = 0; // 죽인 오리 수 초기화\n        runawayDucks = 0; // 도망간 오리 수 초기화\n        Round += 1;\n        isBossAlive = false;\n\n    }\n\n\n    /**\n     * Update game logic.\n     *\n     * @param gameTime      gameTime of the game.\n     * @param mousePosition current mouse position.\n     */\n    public void UpdateGame(long gameTime, Point mousePosition) {\n        if(isBossAlive){\n            for (int i = 0; i < boss.size(); i++) {\n                boss.get(i).update(); // 보스 위치 업데이트\n            }\n        }\n        if(!isPause) {\n        // Creates a new duck, if it's the time, and add it to the array list.\n        if (System.nanoTime() - Duck.lastDuckTime >= Duck.timeBetweenDucks) {\n\n            if (isReloading) {\n                if (System.nanoTime() - reloadStartTime >= reloadDuration) {\n                    ammo = maxAmmo;   // 탄약을 최대치로 채움\n                    isReloading = false; // 장전 상태 해제\n                }\n            }\n            if(ammo<=0 && !isReloading){\n                Reload();\n            }\n\n            if (framework.getGun().equals(\"더블배럴샷건\")) {\n                selectTwoDucks();\n            }\n\n            // 선택된 오리들이 죽었는지 확인하고, 죽으면 다시 선택\n            updateSelectedDucks();\n            // Here we create new duck and add it to the array list.\n            ducks.add(new Duck(Duck.duckLines[Duck.nextDuckLines][0] + random.nextInt(200), Duck.duckLines[Duck.nextDuckLines][1], Duck.duckLines[Duck.nextDuckLines][2], Duck.duckLines[Duck.nextDuckLines][3], duckImg));\n\n            // Here we increase nextDuckLines so that next duck will be created in next line.\n            Duck.nextDuckLines++;\n            if (Duck.nextDuckLines >= Duck.duckLines.length)\n                Duck.nextDuckLines = 0;\n\n            if (killedDucks >= 20 && !isBossAlive) {\n                // 보스 생성\n                boss.add(new boss1(1300, 500,0.125,3000, bossImg));\n                isBossAlive = true; // 보스가 등장했음을 표시\n                System.out.println(\"boss activity\");\n                ducks.clear();\n            }\n            Duck.lastDuckTime = System.nanoTime();\n        }\n\n        if(!isBossAlive) {\n            // Update all of the ducks.\n            for (int i = 0; i < ducks.size(); i++) {\n                // Move the duck.\n                ducks.get(i).Update();\n\n                // Checks if the duck leaves the screen and remove it if it does.\n                if (ducks.get(i).x < 0 - duckImg.getWidth()) {\n                    ducks.remove(i);\n                    runawayDucks++;\n                }\n            }\n            // Does player shoots?\n            if (Canvas.mouseButtonState(MouseEvent.BUTTON1) && !isReloading) {\n                if (System.nanoTime() - lastTimeShoot >= timeBetweenShots) {\n                    shoots++;\n                    ammo--;\n                    // 선택된 두 마리 오리를 제거하는 로직 추가\n                    if (selectedDuck1 != null) {\n\n                        // 선택된 오리 제거 및 점수 업데이트\n                        if (selectedDuck1 != null) {\n                            killedDucks++;\n                            money += 10;\n                            score += selectedDuck1.score;\n                            ducks.remove(selectedDuck1);\n                            selectedDuck1 = null; // 선택된 오리 초기화\n                        }\n\n                    }\n                    // We go over all the ducks and we look if any of them was shoot.\n                    for (int i = 0; i < ducks.size(); i++) {\n                        // We check, if the mouse was over ducks head or body, when player has shot.\n                        if (new Rectangle(ducks.get(i).x + 18, ducks.get(i).y, 27, 30).contains(mousePosition) ||\n                                new Rectangle(ducks.get(i).x + 30, ducks.get(i).y + 30, 88, 25).contains(mousePosition)) {\n                            killedDucks++;\n                            money += 10;\n                            score += ducks.get(i).score;\n\n                            // Remove the duck from the array list.\n                            ducks.remove(i);\n\n                            // We found the duck that player shoot so we can leave the for loop.\n                            break;\n                        }\n                    }\n                    // We go over all the bosses and we look if any of them was shoot.\n                    // We go over all the bosses and we look if any of them was shoot.\n\n\n                    lastTimeShoot = System.nanoTime();\n                }\n            }\n        }else {\n            if (Canvas.mouseButtonState(MouseEvent.BUTTON1) && !isReloading) {\n                if (System.nanoTime() - lastTimeShoot >= timeBetweenShots) {\n                    ammo--;\n                    if (isBossAlive) {\n                        for (int i = 0; i < boss.size(); i++) {\n                            // Define the boss hitbox (for exampl, a larger area for the boss).\n                            if (new Rectangle(boss.get(i).x, boss.get(i).y, 100, 100).contains(mousePosition)) {\n                                // Reduce boss health\n                                boss.get(i).health -= 20; // Reduce boss health by 20 on each hit.\n                                System.out.println(\"attack boss\");\n                                System.out.println(boss.get(i).health);\n                                // If the boss is dead, update score, money, etc.\n                                if (boss.get(i).health <= 0) {\n                                    money += 100; // Bosses give more money\n                                    score += boss.get(i).score; // Boss-specific score\n                                    boss.remove(i);\n                                    Pause();\n                                    // Remove the boss from the array list.\n                                }\n\n                                // Since a boss was hit, we can leave the loop.\n                                break;\n                            }\n                        }\n                    }\n                }\n                lastTimeShoot = System.nanoTime();\n            }\n        }\n\n        // When 200 ducks runaway, the game ends.\n        if (runawayDucks >= 10)\n            Framework.gameState = Framework.GameState.GAMEOVER;\n        if (Framework.gameState == Framework.GameState.GAMEOVER && !leaderboardSaved) {\n            framework.saveScore(score);\n            leaderboardSaved = true;  // 리더보드 저장 완료\n        }\n    }else{\n            return;\n        }\n}\n\n    /**\n     * Draw the game to the screen.\n     * \n     * @param g2d Graphics2D\n     * @param mousePosition current mouse position.\n     */\n    public void Draw(Graphics2D g2d, Point mousePosition)\n    {\n        g2d.drawImage(backgroundImg, 0, 0, Framework.frameWidth, Framework.frameHeight, null);\n        \n        // Here we draw all the ducks.\n        for(int i = 0; i < ducks.size(); i++)\n        {\n            ducks.get(i).Draw(g2d);\n        }\n        if(isPause){\n        }\n        // 보스 그리기\n        if (!boss.isEmpty()) {\n            for (int i = 0; i < boss.size(); i++) {\n                // 보스 이미지 그리기\n                g2d.drawImage(bossImg, boss.get(i).x, boss.get(i).y - 20, null);\n\n                // 보스의 체력 상태를 기반으로 HP 이미지를 선택\n                int currentHealth = boss.get(i).health;\n                int maxHealth = boss.get(i).maxHealth; // 보스의 최대 체력\n\n                // 체력에 따른 HP 이미지를 표시\n                int hpIndex = (int) ((currentHealth / (double) maxHealth) * 11); // 0에서 11까지의 인덱스를 계산\n                hpIndex = Math.max(0, Math.min(11, hpIndex)); // 범위를 0 ~ 11로 제한\n                // HP 바 크기 조정 (예: 50% 크기)\n                int hpBarWidth = hpImages[hpIndex].getWidth(null) / 8; // 너비 50%\n                int hpBarHeight = hpImages[hpIndex].getHeight(null) / 8; // 높이 50%\n\n                // HP 바 그리기 (크기 조정 후)\n                g2d.drawImage(hpImages[hpIndex], boss.get(i).x - 20, boss.get(i).y - 60, hpBarWidth, hpBarHeight, null);\n            }\n        }\n\n        if(isReloading){\n            g2d.drawString(\"Reloading\", Framework.frameWidth/2, Framework.frameHeight/2);\n        }\n        \n        g2d.drawImage(grassImg, 0, Framework.frameHeight - grassImg.getHeight(), Framework.frameWidth, grassImg.getHeight(), null);\n        \n        g2d.drawImage(sightImg, mousePosition.x - sightImgMiddleWidth, mousePosition.y - sightImgMiddleHeight, null);\n        // 더블배럴샷건일 때 랜덤 오리 2마리 지정\n        if (framework.getGun().equals(\"더블배럴샷건\")) {\n            drawSightOnSelectedDucks(g2d);\n            reloadDuration = 2500000000L;\n        }\n        if(framework.getGun().equals(\"AK-47\")){\n            maxAmmo = 30;\n            reloadDuration = 3000000000L;\n            timeBetweenShots = 100_000_000L;\n        }\n\n        g2d.setFont(font);\n        g2d.setColor(Color.darkGray);\n\n        g2d.drawString(\"Ammo: \" + ammo + \"/\" + maxAmmo, 10, 50);\n        g2d.drawString(\"RUNAWAY: \" + runawayDucks, 10, 21);\n        g2d.drawString(\"KILLS: \" + killedDucks, 160, 21);\n        g2d.drawString(\"SHOOTS: \" + shoots, 299, 21);\n        g2d.drawString(\"SCORE: \" + score, 440, 21);\n        g2d.drawString(\"Round: \" + Round, 570, 21);\n        g2d.drawString(\"Money: \" + money, 700, 21);\n\n    }\n    \n    \n    /**\n     * Draw the game over screen.\n     * \n     * @param g2d Graphics2D\n     * @param mousePosition Current mouse position.\n     */\n    public void DrawGameOver(Graphics2D g2d, Point mousePosition)\n    {\n        Draw(g2d, mousePosition);\n        \n        // The first text is used for shade.\n        g2d.setColor(Color.black);\n        g2d.drawString(\"kr.jbnu.se.std.Game Over\", Framework.frameWidth / 2 - 39, (int)(Framework.frameHeight * 0.65) + 1);\n        g2d.drawString(\"Press space or enter to restart.\", Framework.frameWidth / 2 - 149, (int)(Framework.frameHeight * 0.70) + 1);\n        g2d.setColor(Color.red);\n        g2d.drawString(\"kr.jbnu.se.std.Game Over\", Framework.frameWidth / 2 - 40, (int)(Framework.frameHeight * 0.65));\n        g2d.drawString(\"Press space or enter to restart.\", Framework.frameWidth / 2 - 150, (int)(Framework.frameHeight * 0.70));\n    }\n\n    public int getScore(){\n        return score;\n    }\n\n    public void setgun(String gun){\n        this.gun = gun;\n    }\n\n    private void Reload() {\n        isReloading = true;\n        reloadStartTime = System.nanoTime();\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/kr/jbnu/se/std/Game.java b/src/main/java/kr/jbnu/se/std/Game.java
--- a/src/main/java/kr/jbnu/se/std/Game.java	(revision cfe685263eb9678ada1eb8f3bb40395c1eb8c5ea)
+++ b/src/main/java/kr/jbnu/se/std/Game.java	(date 1728543509219)
@@ -457,9 +457,7 @@
         if(isReloading){
             g2d.drawString("Reloading", Framework.frameWidth/2, Framework.frameHeight/2);
         }
-        
-        g2d.drawImage(grassImg, 0, Framework.frameHeight - grassImg.getHeight(), Framework.frameWidth, grassImg.getHeight(), null);
-        
+
         g2d.drawImage(sightImg, mousePosition.x - sightImgMiddleWidth, mousePosition.y - sightImgMiddleHeight, null);
         // 더블배럴샷건일 때 랜덤 오리 2마리 지정
         if (framework.getGun().equals("더블배럴샷건")) {
