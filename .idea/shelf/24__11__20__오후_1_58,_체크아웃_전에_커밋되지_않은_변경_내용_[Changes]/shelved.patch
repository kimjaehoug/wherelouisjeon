Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"e255d515-7351-4cf8-8843-af8a77729b48\" name=\"Changes\" comment=\"131313\">\r\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/kr/jbnu/se/std/RankWindow.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/kr/jbnu/se/std/Framework.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/kr/jbnu/se/std/Framework.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/kr/jbnu/se/std/MainClient.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/kr/jbnu/se/std/MainClient.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Framework$1.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Framework$1.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Framework$10.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Framework$10.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Framework$2.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Framework$2.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Framework$3.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Framework$3.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Framework$4.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Framework$4.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Framework$5.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Framework$5.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Framework$6.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Framework$6.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Framework$7$1.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Framework$7$1.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Framework$7.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Framework$7.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Framework$8.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Framework$8.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Framework$9.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Framework$9.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Framework.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Framework.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/target/classes/kr/jbnu/se/std/MainClient.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/kr/jbnu/se/std/MainClient.class\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Merge.Settings\">\r\n    <option name=\"BRANCH\" value=\"origin/yyyyeee\" />\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\r\n      <map>\r\n        <entry key=\"$PROJECT_DIR$\" value=\"Chat+mainFROnt\" />\r\n      </map>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitHubPullRequestSearchHistory\">{\r\n  &quot;lastFilter&quot;: {\r\n    &quot;state&quot;: &quot;OPEN&quot;,\r\n    &quot;assignee&quot;: &quot;kimjaehoug&quot;\r\n  }\r\n}</component>\r\n  <component name=\"GithubPullRequestsUISettings\">{\r\n  &quot;selectedUrlAndAccountId&quot;: {\r\n    &quot;url&quot;: &quot;https://github.com/kimjaehoug/wherelouisjeon.git&quot;,\r\n    &quot;accountId&quot;: &quot;a44d6209-844a-4745-82f7-f6385177c124&quot;\r\n  }\r\n}</component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 5\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2l32qehEPZRF5c71kAtLRu0eskA\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"Application.MainClient.executor\": \"Run\",\r\n    \"Application.MainV2.executor\": \"Run\",\r\n    \"Application.ShopWindow.executor\": \"Run\",\r\n    \"Application.Window (1).executor\": \"Run\",\r\n    \"Application.Window.executor\": \"Run\",\r\n    \"Application.Window2222.executor\": \"Run\",\r\n    \"RunOnceActivity.OpenProjectViewOnStart\": \"true\",\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"SHARE_PROJECT_CONFIGURATION_FILES\": \"true\",\r\n    \"WebServerToolWindowFactoryState\": \"false\",\r\n    \"git-widget-placeholder\": \"frontend\",\r\n    \"kotlin-language-version-configured\": \"true\",\r\n    \"last_opened_file_path\": \"/Users/jae/Downloads/shoottheduck\",\r\n    \"node.js.detected.package.eslint\": \"true\",\r\n    \"node.js.detected.package.tslint\": \"true\",\r\n    \"node.js.selected.package.eslint\": \"(autodetect)\",\r\n    \"node.js.selected.package.tslint\": \"(autodetect)\",\r\n    \"nodejs_package_manager_path\": \"npm\",\r\n    \"project.structure.last.edited\": \"Modules\",\r\n    \"project.structure.proportion\": \"0.15\",\r\n    \"project.structure.side.proportion\": \"0.2\",\r\n    \"settings.editor.selected.configurable\": \"profiler.calltree.filter\",\r\n    \"vue.rearranger.settings.migration\": \"true\",\r\n    \"애플리케이션.Window.executor\": \"Run\"\r\n  }\r\n}]]></component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"D:\\70.Classes\\2024-2\\source_code_analysis\\shoottheduck\\src\\main\\resources\" />\r\n      <recent name=\"D:\\70.Classes\\2024-2\\source_code_analysis\\shoottheduck\\src\\main\\java\" />\r\n    </key>\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"$PROJECT_DIR$/src/main/resources/sounds\" />\r\n      <recent name=\"$PROJECT_DIR$/src/main/resources/images\" />\r\n      <recent name=\"$PROJECT_DIR$/src/main\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\" selected=\"애플리케이션.Window\">\r\n    <configuration name=\"MainClient\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"kr.jbnu.se.std.MainClient\" />\r\n      <module name=\"shoottheduck\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"kr.jbnu.se.std.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"MainV2\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"kr.jbnu.se.std.MainV2\" />\r\n      <module name=\"shoottheduck\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"kr.jbnu.se.std.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"ShopWindow\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"kr.jbnu.se.std.ShopWindow\" />\r\n      <module name=\"shoottheduck\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"kr.jbnu.se.std.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"Window\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"kr.jbnu.se.std.Window\" />\r\n      <module name=\"shoottheduck\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"Window2222\" type=\"Application\" factoryName=\"Application\" temporary=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"kr.jbnu.se.std.Window\" />\r\n      <module name=\"shoottheduck\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"kr.jbnu.se.std.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <list>\r\n      <item itemvalue=\"애플리케이션.MainClient\" />\r\n      <item itemvalue=\"애플리케이션.MainV2\" />\r\n      <item itemvalue=\"애플리케이션.ShopWindow\" />\r\n      <item itemvalue=\"애플리케이션.Window\" />\r\n      <item itemvalue=\"애플리케이션.Window2222\" />\r\n    </list>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"애플리케이션.Window\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"bundled-jdk-9823dce3aa75-b114ca120d71-intellij.indexing.shared.core-IU-242.21829.142\" />\r\n        <option value=\"bundled-js-predefined-d6986cc7102b-7c0b70fcd90d-JavaScript-IU-242.21829.142\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"e255d515-7351-4cf8-8843-af8a77729b48\" name=\"Changes\" comment=\"\" />\r\n      <created>1724394633914</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1724394633914</updated>\r\n      <workItem from=\"1724394635024\" duration=\"2830000\" />\r\n      <workItem from=\"1724829453673\" duration=\"684000\" />\r\n      <workItem from=\"1725429507492\" duration=\"630000\" />\r\n      <workItem from=\"1726030595579\" duration=\"691000\" />\r\n      <workItem from=\"1726879738970\" duration=\"1652000\" />\r\n      <workItem from=\"1727238748652\" duration=\"1262000\" />\r\n      <workItem from=\"1727689816044\" duration=\"15230000\" />\r\n      <workItem from=\"1727776036881\" duration=\"31242000\" />\r\n      <workItem from=\"1727875707906\" duration=\"28902000\" />\r\n      <workItem from=\"1728066880239\" duration=\"8135000\" />\r\n      <workItem from=\"1728357407136\" duration=\"20461000\" />\r\n      <workItem from=\"1728822405134\" duration=\"5605000\" />\r\n      <workItem from=\"1728889652442\" duration=\"37652000\" />\r\n      <workItem from=\"1729054707457\" duration=\"10617000\" />\r\n      <workItem from=\"1729069599398\" duration=\"4970000\" />\r\n      <workItem from=\"1729323809352\" duration=\"3878000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"loginfunction\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1727763605144</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1727763605144</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"loginfunction\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1727771161342</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1727771161342</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"loginfunction\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1727781698478</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1727781698479</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"loginfunction\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1727855380738</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1727855380738</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"loginfunction\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1727860170579</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1727860170580</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"131313\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1727863174521</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1727863174521</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"131313\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1727865267663</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1727865267663</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"131313\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1727871541617</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1727871541617</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00009\" summary=\"131313\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1727872888568</created>\r\n      <option name=\"number\" value=\"00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1727872888568</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00010\" summary=\"131313\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1727872986113</created>\r\n      <option name=\"number\" value=\"00010\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1727872986113</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00011\" summary=\"131313\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1728031206772</created>\r\n      <option name=\"number\" value=\"00011\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1728031206772</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00012\" summary=\"131313\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1728031507710</created>\r\n      <option name=\"number\" value=\"00012\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1728031507710</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00013\" summary=\"131313\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1728277037261</created>\r\n      <option name=\"number\" value=\"00013\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1728277037262</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00014\" summary=\"131313\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1728277216143</created>\r\n      <option name=\"number\" value=\"00014\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00014\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1728277216143</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00015\" summary=\"131313\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1728277380099</created>\r\n      <option name=\"number\" value=\"00015\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00015\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1728277380099</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00016\" summary=\"131313\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1728279465226</created>\r\n      <option name=\"number\" value=\"00016\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00016\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1728279465226</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00017\" summary=\"131313\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1728363801963</created>\r\n      <option name=\"number\" value=\"00017\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00017\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1728363801963</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00018\" summary=\"131313\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1728462444356</created>\r\n      <option name=\"number\" value=\"00018\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00018\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1728462444356</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00019\" summary=\"131313\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1728800544817</created>\r\n      <option name=\"number\" value=\"00019\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00019\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1728800544817</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00020\" summary=\"131313\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1728915363555</created>\r\n      <option name=\"number\" value=\"00020\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00020\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1728915363555</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00021\" summary=\"131313\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1728915375265</created>\r\n      <option name=\"number\" value=\"00021\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00021\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1728915375265</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00022\" summary=\"131313\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1728999106644</created>\r\n      <option name=\"number\" value=\"00022\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00022\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1728999106644</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00023\" summary=\"131313\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1729055917408</created>\r\n      <option name=\"number\" value=\"00023\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00023\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1729055917408</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00024\" summary=\"131313\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1729324804828</created>\r\n      <option name=\"number\" value=\"00024\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00024\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1729324804828</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"25\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State>\r\n              <option name=\"FILTERS\">\r\n                <map>\r\n                  <entry key=\"branch\">\r\n                    <value>\r\n                      <list>\r\n                        <option value=\"origin/frontend\" />\r\n                      </list>\r\n                    </value>\r\n                  </entry>\r\n                </map>\r\n              </option>\r\n            </State>\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"loginfunction\" />\r\n    <MESSAGE value=\"yw\" />\r\n    <MESSAGE value=\"131313\" />\r\n    <MESSAGE value=\"gugu\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"gugu\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 10f37eb5a6c9b86d00fbb3d9d09ed12dfc520d18)
+++ b/.idea/workspace.xml	(date 1731480612645)
@@ -4,24 +4,10 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="e255d515-7351-4cf8-8843-af8a77729b48" name="Changes" comment="131313">
-      <change afterPath="$PROJECT_DIR$/src/main/java/kr/jbnu/se/std/RankWindow.java" afterDir="false" />
+    <list default="true" id="e255d515-7351-4cf8-8843-af8a77729b48" name="Changes" comment="rank">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/kr/jbnu/se/std/Framework.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/kr/jbnu/se/std/Framework.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/kr/jbnu/se/std/MainClient.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/kr/jbnu/se/std/MainClient.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Framework$1.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Framework$1.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Framework$10.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Framework$10.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Framework$2.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Framework$2.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Framework$3.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Framework$3.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Framework$4.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Framework$4.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Framework$5.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Framework$5.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Framework$6.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Framework$6.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Framework$7$1.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Framework$7$1.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Framework$7.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Framework$7.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Framework$8.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Framework$8.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Framework$9.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Framework$9.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Framework.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Framework.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/MainClient.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/MainClient.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/kr/jbnu/se/std/Game.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/kr/jbnu/se/std/Game.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/kr/jbnu/se/std/LoginClient.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/kr/jbnu/se/std/LoginClient.java" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -55,11 +41,15 @@
   <component name="GithubPullRequestsUISettings">{
   &quot;selectedUrlAndAccountId&quot;: {
     &quot;url&quot;: &quot;https://github.com/kimjaehoug/wherelouisjeon.git&quot;,
-    &quot;accountId&quot;: &quot;a44d6209-844a-4745-82f7-f6385177c124&quot;
+    &quot;accountId&quot;: &quot;fbb2cdd8-8f11-4e46-b870-8e948249df1a&quot;
   }
 }</component>
   <component name="MarkdownSettingsMigration">
     <option name="stateVersion" value="1" />
+  </component>
+  <component name="ProblemsViewState">
+    <option name="groupByToolId" value="true" />
+    <option name="selectedTabId" value="DEPENDENCY_CHECKER_PROBLEMS_TAB" />
   </component>
   <component name="ProjectColorInfo">{
   &quot;associatedIndex&quot;: 5
@@ -84,7 +74,7 @@
     "WebServerToolWindowFactoryState": "false",
     "git-widget-placeholder": "frontend",
     "kotlin-language-version-configured": "true",
-    "last_opened_file_path": "/Users/jae/Downloads/shoottheduck",
+    "last_opened_file_path": "C:/Users/t0106/OneDrive/바탕 화면",
     "node.js.detected.package.eslint": "true",
     "node.js.detected.package.tslint": "true",
     "node.js.selected.package.eslint": "(autodetect)",
@@ -93,7 +83,8 @@
     "project.structure.last.edited": "Modules",
     "project.structure.proportion": "0.15",
     "project.structure.side.proportion": "0.2",
-    "settings.editor.selected.configurable": "profiler.calltree.filter",
+    "run.code.analysis.last.selected.profile": "pProject Default",
+    "settings.editor.selected.configurable": "preferences.pluginManager",
     "vue.rearranger.settings.migration": "true",
     "애플리케이션.Window.executor": "Run"
   }
@@ -173,8 +164,8 @@
       <item itemvalue="애플리케이션.MainClient" />
       <item itemvalue="애플리케이션.MainV2" />
       <item itemvalue="애플리케이션.ShopWindow" />
-      <item itemvalue="애플리케이션.Window" />
       <item itemvalue="애플리케이션.Window2222" />
+      <item itemvalue="애플리케이션.Window" />
     </list>
     <recent_temporary>
       <list>
@@ -185,8 +176,8 @@
   <component name="SharedIndexes">
     <attachedChunks>
       <set>
-        <option value="bundled-jdk-9823dce3aa75-b114ca120d71-intellij.indexing.shared.core-IU-242.21829.142" />
-        <option value="bundled-js-predefined-d6986cc7102b-7c0b70fcd90d-JavaScript-IU-242.21829.142" />
+        <option value="bundled-jdk-9823dce3aa75-28b599e66164-intellij.indexing.shared.core-IU-242.23339.11" />
+        <option value="bundled-js-predefined-d6986cc7102b-5c90d61e3bab-JavaScript-IU-242.23339.11" />
       </set>
     </attachedChunks>
   </component>
@@ -214,6 +205,23 @@
       <workItem from="1729054707457" duration="10617000" />
       <workItem from="1729069599398" duration="4970000" />
       <workItem from="1729323809352" duration="3878000" />
+      <workItem from="1729410614872" duration="880000" />
+      <workItem from="1729412121526" duration="74000" />
+      <workItem from="1729412431439" duration="184000" />
+      <workItem from="1729412743972" duration="255000" />
+      <workItem from="1729413268950" duration="237000" />
+      <workItem from="1729414723032" duration="8162000" />
+      <workItem from="1729428026076" duration="1000" />
+      <workItem from="1729428114065" duration="185000" />
+      <workItem from="1729476965586" duration="152000" />
+      <workItem from="1729488788277" duration="905000" />
+      <workItem from="1729555597772" duration="6578000" />
+      <workItem from="1731310555561" duration="191000" />
+      <workItem from="1731474830927" duration="261000" />
+      <workItem from="1731475133402" duration="303000" />
+      <workItem from="1731475479862" duration="215000" />
+      <workItem from="1731475755114" duration="2212000" />
+      <workItem from="1731478460671" duration="2026000" />
     </task>
     <task id="LOCAL-00001" summary="loginfunction">
       <option name="closed" value="true" />
@@ -407,7 +415,15 @@
       <option name="project" value="LOCAL" />
       <updated>1729324804828</updated>
     </task>
-    <option name="localTasksCounter" value="25" />
+    <task id="LOCAL-00025" summary="rank">
+      <option name="closed" value="true" />
+      <created>1729363197501</created>
+      <option name="number" value="00025" />
+      <option name="presentableId" value="LOCAL-00025" />
+      <option name="project" value="LOCAL" />
+      <updated>1729363197501</updated>
+    </task>
+    <option name="localTasksCounter" value="26" />
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
@@ -424,7 +440,7 @@
                   <entry key="branch">
                     <value>
                       <list>
-                        <option value="origin/frontend" />
+                        <option value="origin/yyyyeee" />
                       </list>
                     </value>
                   </entry>
@@ -441,6 +457,11 @@
     <MESSAGE value="yw" />
     <MESSAGE value="131313" />
     <MESSAGE value="gugu" />
-    <option name="LAST_COMMIT_MESSAGE" value="gugu" />
+    <MESSAGE value="rank" />
+    <option name="LAST_COMMIT_MESSAGE" value="rank" />
+  </component>
+  <component name="XSLT-Support.FileAssociations.UIState">
+    <expand />
+    <select />
   </component>
 </project>
\ No newline at end of file
Index: src/main/java/kr/jbnu/se/std/Game.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package kr.jbnu.se.std;\r\n\r\nimport java.awt.*;\r\nimport java.awt.event.MouseEvent;\r\nimport java.awt.image.BufferedImage;\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.net.URL;\r\nimport java.util.*;\r\nimport java.util.List;\r\nimport java.util.concurrent.Executors;\r\nimport java.util.concurrent.ScheduledExecutorService;\r\nimport java.util.concurrent.TimeUnit;\r\nimport java.util.logging.Level;\r\nimport java.util.logging.Logger;\r\nimport javax.imageio.ImageIO;\r\nimport javax.sound.sampled.*;\r\nimport javax.swing.*;\r\nimport javax.swing.Timer;\r\n\r\n/**\r\n * Actual game.\r\n * \r\n * @author www.gametutorial.net\r\n */\r\n\r\npublic class Game {\r\n\r\n    /**\r\n     * We use this to generate a random number.\r\n     */\r\n    private Random random;\r\n    private Clip clip;\r\n    private Clip clipbg;\r\n    private boolean isPause = false;\r\n    private int Round;\r\n    private boolean isBossAlive;\r\n    private Duck[] hunterSelectedDucks;\r\n    private Duck[] playerSelectedDucks;\r\n    private int ammo;          // 현재 사용 가능한 총알\r\n    private int maxAmmo;       // 한 번에 장전할 수 있는 최대 탄약 수\r\n    private boolean isReloading; // 장전 중인지 여부\r\n    private long reloadStartTime; // 장전이 시작된 시간\r\n    private long reloadDuration;  // 장전 시간 (예: 2초)\r\n    private URL hpUrl;\r\n    private int selectduck;\r\n    private ScheduledExecutorService hunterExecutor;\r\n    private int PlayerHp;\r\n\r\n    /**\r\n     * Font that we will use to write statistic to the screen.\r\n     */\r\n    private Font font;\r\n    boolean hunterTrigger = true;\r\n    private int damage;\r\n    private BufferedImage bossImg;\r\n    private BufferedImage boss2Img;\r\n    private BufferedImage boss3Img;\r\n    private BufferedImage boss4Img;\r\n    private BufferedImage boss5Img;\r\n    private BufferedImage bossAttack;\r\n    private BufferedImage hunter111Img;\r\n    private BufferedImage bossAttack2;\r\n    private BufferedImage bossAttack3;\r\n    private BufferedImage bossAttack4;\r\n    private BufferedImage bossAttack5;\r\n    private BufferedImage warningImg;\r\n    private BufferedImage[] hpImages = new BufferedImage[12];\r\n    private BufferedImage[] shopImages = new BufferedImage[4];// HP 이미지를 저장할 배열\r\n\r\n    /**\r\n     * Array list of the ducks.\r\n     */\r\n    private ArrayList<Duck> ducks;\r\n    private ArrayList<boss1> boss;\r\n    private ArrayList<Buttonbuy> buttonbuy;\r\n    private long lastBossAttackTime = 0;  // 마지막 공격 시간\r\n    private final long bossAttackInterval = 3000;\r\n    long lastBottomAttackTime = 0;\r\n    long bottomAttackInterval = 4000; // 공격 간격 (3초)\r\n    private ArrayList<Hunter1> Hunters;\r\n    private boolean Bosswith3delay;\r\n\r\n    /**\r\n     * How many ducks leave the screen alive?\r\n     */\r\n    private int runawayDucks;\r\n    private Framework framework;\r\n\r\n    /**\r\n     * How many ducks the player killed?\r\n     */\r\n    private int killedDucks;\r\n\r\n    /**\r\n     * For each killed duck, the player gets points.\r\n     */\r\n    private int score;\r\n    private int money;\r\n\r\n    /**\r\n     * How many times a player is shot?\r\n     */\r\n    private int shoots;\r\n    private boolean leaderboardSaved;\r\n    /**\r\n     * Last time of the shoot.\r\n     */\r\n    private long lastTimeShoot;\r\n    /**\r\n     * The time which must elapse between shots.\r\n     */\r\n    private long timeBetweenShots;\r\n\r\n    /**\r\n     * kr.jbnu.se.std.Game background image.\r\n     */\r\n    private BufferedImage backgroundImg;\r\n    private BufferedImage backgroundImg2;\r\n    private BufferedImage backgroundImg3;\r\n    private BufferedImage backgroundImg4;\r\n    private BufferedImage backgroundImg5;\r\n    private BufferedImage buttonImg;\r\n    private BufferedImage sightImg_hunter;\r\n\r\n    /**\r\n     * Bottom grass.\r\n     */\r\n    private BufferedImage grassImg;\r\n\r\n    /**\r\n     * kr.jbnu.se.std.Duck image.\r\n     */\r\n    private BufferedImage duckImg;\r\n\r\n    /**\r\n     * Shotgun sight image.\r\n     */\r\n    private BufferedImage sightImg;\r\n    private boolean Hunter1 = false;\r\n\r\n    /**\r\n     * Middle width of the sight image.\r\n     */\r\n    private int sightImgMiddleWidth;\r\n    /**\r\n     * Middle height of the sight image.\r\n     */\r\n    private int sightImgMiddleHeight;\r\n    private String gun;\r\n    private List<BossAttack> bossAttacks = new ArrayList<>();\r\n    private List<BossAttack> bossAttacks2 = new ArrayList<>();\r\n    private List<BossAttack> bossAttacks3 = new ArrayList<>();\r\n    private List<BossAttack> bossAttacks4 = new ArrayList<>();\r\n    private List<BossAttack> bossAttacks5 = new ArrayList<>();\r\n    private int roundPass;\r\n\r\n\r\n\r\n    public Game(Framework framework) {\r\n        Framework.gameState = Framework.GameState.GAME_CONTENT_LOADING;\r\n        this.framework = framework;\r\n        Thread threadForInitGame = new Thread() {\r\n            @Override\r\n            public void run() {\r\n                // Sets variables and objects for the game.\r\n                Initialize();\r\n                // Load game files (images, sounds, ...)\r\n                LoadContent();\r\n\r\n                playBackgroundMusic(\"src/main/resources/sounds/MoonlightShadow.wav\");\r\n\r\n                Framework.gameState = Framework.GameState.PLAYING;\r\n            }\r\n        };\r\n        threadForInitGame.start();\r\n    }\r\n\r\n\r\n    /**\r\n     * Set variables and objects for the game.\r\n     */\r\n    private void Initialize() {\r\n        random = new Random();\r\n        font = new Font(\"monospaced\", Font.BOLD, 18);\r\n\r\n        ducks = new ArrayList<Duck>();\r\n        boss = new ArrayList<boss1>();\r\n        buttonbuy = new ArrayList<Buttonbuy>();\r\n        Hunters = new ArrayList<Hunter1>();\r\n        money = 0;\r\n        runawayDucks = 0;\r\n        killedDucks = 0;\r\n        score = 0;\r\n        roundPass = 20;\r\n        shoots = 0;\r\n        PlayerHp = 100;\r\n        Round = 1;\r\n        damage = 20;\r\n        isBossAlive = false;\r\n        Hunter1 = false;\r\n        lastTimeShoot = 0;\r\n        timeBetweenShots = 500_000_000L;\r\n\r\n        ammo = 6;              // 기본 탄약 수\r\n        maxAmmo = 6;           // 최대 장전할 수 있는 탄약 수\r\n        isReloading = false;   // 초기에는 장전 중이 아님\r\n        reloadDuration = 2000000000L; // 장전 시간 2초 (나노초 단위)\r\n    }\r\n\r\n    /**\r\n     * Load game files - images, sounds, ...\r\n     */\r\n    private void LoadContent() {\r\n        try {\r\n            for (int i = 0; i < 12; i++) { // 0부터 11까지 반복\r\n                try {\r\n                    // 이미지 경로를 생성\r\n                    URL hpUrl = this.getClass().getResource(\"/images/hp_\" + i + \".png\");\r\n\r\n                    // URL이 null이 아닐 경우에만 이미지 읽기\r\n                    if (hpUrl != null) {\r\n                        hpImages[i] = ImageIO.read(hpUrl);\r\n                    } else {\r\n                        System.out.println(\"Image not found: /images/hp_\" + i + \".png\");\r\n                    }\r\n                } catch (IOException e) {\r\n                    e.printStackTrace(); // IOException 처리\r\n                }\r\n            }\r\n\r\n            for (int i = 0; i < 3; i++) { // 0부터 11까지 반복\r\n                try {\r\n                    // 이미지 경로를 생성\r\n                    URL hpUrl = this.getClass().getResource(\"/images/shop\" + i + \".png\");\r\n\r\n                    // URL이 null이 아닐 경우에만 이미지 읽기\r\n                    if (hpUrl != null) {\r\n                        shopImages[i] = ImageIO.read(hpUrl);\r\n                    } else {\r\n                        System.out.println(\"Image not found: /images/shop\" + i + \".png\");\r\n                    }\r\n                } catch (IOException e) {\r\n                    e.printStackTrace(); // IOException 처리\r\n                }\r\n            }\r\n\r\n\r\n\r\n            URL hunterimg = this.getClass().getResource(\"/images/hunterrrrr.png\");\r\n            hunter111Img = ImageIO.read(hunterimg);\r\n\r\n\r\n            URL Buttonimg = this.getClass().getResource(\"/images/btn_buy.png\");\r\n            buttonImg = ImageIO.read(Buttonimg);\r\n\r\n            URL Bossimg2 = this.getClass().getResource(\"/images/boss_crocs.png\");\r\n            boss2Img = ImageIO.read(Bossimg2);\r\n\r\n            URL Bossimg3 = this.getClass().getResource(\"/images/boss_hippo.png\");\r\n            boss3Img = ImageIO.read(Bossimg3);\r\n\r\n            URL Bossimg4 = this.getClass().getResource(\"/images/boss_dugong.png\");\r\n            boss4Img = ImageIO.read(Bossimg4);\r\n\r\n            URL Bossimg5 = this.getClass().getResource(\"/images/duck_boss1.png\");\r\n            boss5Img = ImageIO.read(Bossimg5);\r\n\r\n            URL backgroundImgUrl = this.getClass().getResource(\"/images/background.png\");\r\n            backgroundImg = ImageIO.read(backgroundImgUrl);\r\n\r\n            URL backgroundImgUrl3 = this.getClass().getResource(\"/images/background_SAFARI.png\");\r\n            backgroundImg3 = ImageIO.read(backgroundImgUrl3);\r\n\r\n            URL backgroundImgUrl4 = this.getClass().getResource(\"/images/bossbackground4.png\");\r\n            backgroundImg4 = ImageIO.read(backgroundImgUrl4);\r\n\r\n            URL backgroundImgUrl5 = this.getClass().getResource(\"/images/bossbackground4.png\");\r\n            backgroundImg5 = ImageIO.read(backgroundImgUrl5);\r\n\r\n            URL backgroundImgUrl2 = this.getClass().getResource(\"/images/background_mud.png\");\r\n            backgroundImg2 = ImageIO.read(backgroundImgUrl2);\r\n\r\n            URL WarningURL = this.getClass().getResource(\"/images/warning.png\");\r\n            warningImg = ImageIO.read(WarningURL);\r\n\r\n            URL bossImgUrl = this.getClass().getResource(\"/images/boss.png\");\r\n            bossImg = ImageIO.read(bossImgUrl);\r\n\r\n            URL grassImgUrl = this.getClass().getResource(\"/images/grass.png\");\r\n            grassImg = ImageIO.read(grassImgUrl);\r\n\r\n            URL sight_hunterURL = this.getClass().getResource(\"/images/sight_hunter.png\");\r\n            sightImg_hunter = ImageIO.read(sight_hunterURL);\r\n\r\n            URL duckImgUrl = this.getClass().getResource(\"/images/duck.png\");\r\n            duckImg = ImageIO.read(duckImgUrl);\r\n\r\n            URL sightImgUrl = this.getClass().getResource(\"/images/sight.png\");\r\n            sightImg = ImageIO.read(sightImgUrl);\r\n            sightImgMiddleWidth = sightImg.getWidth() / 2;\r\n            sightImgMiddleHeight = sightImg.getHeight() / 2;\r\n\r\n            URL bossAttackImage2 = this.getClass().getResource(\"/images/crocs_mud.png\");\r\n            bossAttack2 = ImageIO.read(bossAttackImage2);\r\n\r\n            URL bossAttackImage3 = this.getClass().getResource(\"/images/crocs_mud.png\");\r\n            bossAttack3 = ImageIO.read(bossAttackImage3);\r\n\r\n            URL bossAttackImage4 = this.getClass().getResource(\"/images/waterball.png\");\r\n            bossAttack4 = ImageIO.read(bossAttackImage4);\r\n\r\n            URL bossAttackImage5 = this.getClass().getResource(\"/images/skull.png\");\r\n            bossAttack5 = ImageIO.read(bossAttackImage5);\r\n\r\n            URL bossAttackImage = this.getClass().getResource(\"/images/attack1.png\");\r\n            bossAttack = ImageIO.read(bossAttackImage);\r\n\r\n        } catch (IOException ex) {\r\n            Logger.getLogger(Game.class.getName()).log(Level.SEVERE, null, ex);\r\n        }\r\n    }\r\n\r\n    private void selectPlayerDucks(int numberOfDucks) {\r\n        // 선택된 오리들이 이미 있으면 리턴\r\n        if (playerSelectedDucks != null) {\r\n            return;\r\n        }\r\n\r\n        // 오리들이 충분히 있을 때 N마리 오리를 무작위로 선택\r\n        if (ducks.size() >= numberOfDucks) {\r\n            playerSelectedDucks = new Duck[numberOfDucks]; // Player 선택된 오리 배열 초기화\r\n            Random random = new Random();\r\n\r\n            for (int i = 0; i < numberOfDucks; i++) {\r\n                Duck selectedDuck;\r\n                int index;\r\n\r\n                // 중복되지 않는 오리를 선택\r\n                do {\r\n                    index = random.nextInt(ducks.size());\r\n                    selectedDuck = ducks.get(index);\r\n                } while (Arrays.asList(playerSelectedDucks).contains(selectedDuck) ||\r\n                        (hunterSelectedDucks != null && Arrays.asList(hunterSelectedDucks).contains(selectedDuck))); // hunterSelectedDucks가 null일 경우 중복 방지 생략\r\n\r\n                playerSelectedDucks[i] = selectedDuck;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n    // N마리 오리를 선택하는 메소드 (Hunter용)\r\n    private void selectHunterDucks(int numberOfDucks) {\r\n        if (ducks.size() >= numberOfDucks) {\r\n            hunterSelectedDucks = new Duck[numberOfDucks]; // Hunter 선택된 오리 배열 초기화\r\n            Random random = new Random();\r\n\r\n            for (int i = 0; i < numberOfDucks; i++) {\r\n                Duck selectedDuck;\r\n                int index;\r\n\r\n                // 중복되지 않는 오리를 선택\r\n                do {\r\n                    index = random.nextInt(ducks.size());\r\n                    selectedDuck = ducks.get(index);\r\n                } while (Arrays.asList(hunterSelectedDucks).contains(selectedDuck) || Arrays.asList(playerSelectedDucks).contains(selectedDuck)); // 중복 방지\r\n\r\n                hunterSelectedDucks[i] = selectedDuck;\r\n            }\r\n        }\r\n    }\r\n\r\n    // Hunter가 자동으로 오리를 제거하는 메소드\r\n    private void startHunterAutoKill(int interval) {\r\n        if (hunterExecutor == null || hunterExecutor.isShutdown()) {\r\n            hunterExecutor = Executors.newScheduledThreadPool(1); // 새로 생성\r\n        }\r\n        hunterExecutor.scheduleAtFixedRate(() -> {\r\n            if (hunterSelectedDucks == null || Arrays.stream(hunterSelectedDucks).allMatch(Objects::isNull)) {\r\n                // Hunter가 선택한 오리가 없으면 새롭게 선택\r\n                selectHunterDucks(1);\r\n            }\r\n            if (hunterSelectedDucks != null) {\r\n                for (Duck duck : hunterSelectedDucks) {\r\n                    if (duck != null && !Arrays.asList(playerSelectedDucks).contains(duck)) {\r\n                        // Hunter가 선택한 오리가 Player가 선택한 오리와 중복되지 않도록 확인\r\n                        ducks.remove(duck);\r\n                        killedDucks++;\r\n                        money += 10;\r\n                        score += duck.score;\r\n                        System.out.println(\"Hunter가 오리를 죽였습니다: \" + duck);\r\n                        break; // 한 마리씩 죽이고 나가도록\r\n\r\n                    }\r\n                }\r\n                updateHunterSelectedDucks();\r\n            }\r\n        }, 0, interval, TimeUnit.MILLISECONDS); // interval 시간마다 실행\r\n    }\r\n\r\n\r\n    // 게임이 끝나면 Hunter의 자동조준 타이머를 중지하는 코드\r\n    private void stopHunterAutoKill() {\r\n        if (hunterExecutor != null && !hunterExecutor.isShutdown()) {\r\n            hunterExecutor.shutdown(); // Hunter의 자동 조준 종료\r\n        }\r\n    }\r\n\r\n\r\n    private void updateAndReselectPlayerDucks(int numberOfDucks) {\r\n        // playerSelectedDucks가 null일 때만 새로 선택\r\n        playerSelectedDucks = null;\r\n        if (playerSelectedDucks == null) {\r\n            selectPlayerDucks(numberOfDucks);\r\n        }\r\n    }\r\n\r\n    // 오리들이 죽으면 Hunter 선택된 오리를 null로 설정\r\n    private void updateHunterSelectedDucks() {\r\n        Random random = new Random();\r\n\r\n        for (int i = 0; i < hunterSelectedDucks.length; i++) {\r\n            if (hunterSelectedDucks[i] == null || !ducks.contains(hunterSelectedDucks[i])) {\r\n                // 새로운 오리를 선택하여 중복되지 않게 추가\r\n                Duck selectedDuck;\r\n                int index;\r\n\r\n                do {\r\n                    index = random.nextInt(ducks.size());\r\n                    selectedDuck = ducks.get(index);\r\n                } while (Arrays.asList(hunterSelectedDucks).contains(selectedDuck) ||\r\n                        Arrays.asList(playerSelectedDucks).contains(selectedDuck)); // 중복 방지\r\n\r\n                hunterSelectedDucks[i] = selectedDuck;\r\n            }\r\n        }\r\n    }\r\n\r\n    // 더블배럴샷건 모드에서 Player 선택된 오리들에게 sightImg를 그리기\r\n    private void drawSightOnPlayerSelectedDucks(Graphics2D g2d) {\r\n        if (playerSelectedDucks != null) {\r\n            for (Duck duck : playerSelectedDucks) {\r\n                if (duck != null) {\r\n                    g2d.drawImage(sightImg, duck.x, duck.y, null);\r\n                }\r\n            }\r\n        }else{\r\n            return;\r\n        }\r\n    }\r\n\r\n    // 더블배럴샷건 모드에서 Hunter 선택된 오리들에게 sightImg를 그리기\r\n    private void drawSightOnHunterSelectedDucks(Graphics2D g2d) {\r\n        if (hunterSelectedDucks != null) {\r\n            for (Duck duck : hunterSelectedDucks) {\r\n                if (duck != null) {\r\n                    g2d.drawImage(sightImg_hunter, duck.x, duck.y,28,28,null);\r\n                }else{\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Restart game - reset some variables.\r\n     */\r\n    public void RestartGame() {\r\n        // Removes all of the ducks from this list.\r\n        ducks.clear();\r\n\r\n        // We set last duckt time to zero.\r\n        Duck.lastDuckTime = 0;\r\n\r\n        runawayDucks = 0;\r\n        killedDucks = 0;\r\n        score = 0;\r\n        shoots = 0;\r\n\r\n        lastTimeShoot = 0;\r\n    }\r\n\r\n\r\n    public void Pause() {\r\n        ducks.clear();\r\n        isPause = true;\r\n        System.out.println(\"buttonbuyadd\");\r\n        Framework.gameState = Framework.GameState.Pause;\r\n        stopBackgroundMusic();\r\n    }\r\n\r\n\r\n    public void NextRound() {\r\n        stopBackgroundMusic();\r\n        isPause = false;\r\n        Framework.gameState = Framework.GameState.PLAYING;\r\n        Duck.lastDuckTime = 0; // 오리 타이머 초기화\r\n        killedDucks = 0; // 죽인 오리 수 초기화\r\n        runawayDucks = 0; // 도망간 오리 수 초기화\r\n        Round += 1;\r\n        isBossAlive = false;\r\n        roundPass += 20;\r\n        if(Round == 2){\r\n            playBackgroundMusic(\"src/main/resources/sounds/JungleBook.wav\");\r\n        }else if(Round == 3){\r\n            playBackgroundMusic(\"src/main/resources/sounds/FantasticThemePark.wav\");\r\n        }else if(Round == 4){\r\n            playBackgroundMusic(\"src/main/resources/sounds/WhaleBelly.wav\");\r\n        }else if(Round == 5){\r\n            playBackgroundMusic(\"src/main/resources/sounds/TempleOfDarkness.wav\");\r\n        }\r\n\r\n    }\r\n\r\n    public void playActiveSound(String filePath){\r\n        try{\r\n            AudioInputStream audioStream = AudioSystem.getAudioInputStream(new File(filePath));\r\n            clip = AudioSystem.getClip();\r\n            clip.open(audioStream);\r\n            clip.start();\r\n        }catch(UnsupportedAudioFileException | IOException | LineUnavailableException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n    public void stopBackgroundMusic() {\r\n        if (clipbg != null && clipbg.isRunning()) {\r\n            clipbg.stop();\r\n        }\r\n    }\r\n\r\n    public void playBackgroundMusic(String filePath){\r\n        try{\r\n            AudioInputStream audioStream = AudioSystem.getAudioInputStream(new File(filePath));\r\n            clipbg = AudioSystem.getClip();\r\n            clipbg.open(audioStream);\r\n            clipbg.start();\r\n        }catch(UnsupportedAudioFileException | IOException | LineUnavailableException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    /**\r\n     * Update game logic.\r\n     *\r\n     * @param gameTime      gameTime of the game.\r\n     * @param mousePosition current mouse position.\r\n     */\r\n    public void UpdateGame(long gameTime, Point mousePosition) {\r\n        if (isBossAlive) {\r\n            for (int i = 0; i < boss.size(); i++) {\r\n                boss.get(i).update(); // 보스 위치 업데이트\r\n                if (Round == 1) {\r\n                    // 일정 시간마다 공격 발사 (보스 공격 간격 체크)\r\n                    if (System.nanoTime() - lastBossAttackTime >= bossAttackInterval * 1_000_000) {\r\n                        double angle = 150 + Math.random() * 70;\r\n                        double angle2 = 150 + Math.random() * 70;\r\n                        double angle3 = 150 + Math.random() * 70;// 0에서 360도 사이의 랜덤 각도\r\n                        bossAttacks.add(new BossAttack(boss.get(i).x, boss.get(i).y, angle, 15));\r\n                        bossAttacks.add(new BossAttack(boss.get(i).x, boss.get(i).y, angle2, 15));\r\n                        bossAttacks.add(new BossAttack(boss.get(i).x, boss.get(i).y, angle3, 15));// 속도 10으로 설정\r\n                        playActiveSound(\"src/main/resources/sounds/bossattck.wav\");\r\n                        lastBossAttackTime = System.nanoTime(); // 마지막 공격 시간 갱신\r\n                    }\r\n                }\r\n\r\n                if (Round == 2) {\r\n                    if (System.nanoTime() - lastBossAttackTime >= bossAttackInterval * 900_000) {\r\n                        double angle1 = Math.toRadians(150 + Math.random() * 70);\r\n                        double angle2 = Math.toRadians(150 + Math.random() * 70);\r\n                        double angle3 = Math.toRadians(150 + Math.random() * 70);\r\n                        double angle4 = Math.toRadians(150 + Math.random() * 70);\r\n                        double gravity = 6;\r\n                        double speed = 150; // Initial speed of the projectile\r\n                        double deltaTime = 0.1;\r\n                        // 각도에 따른 수평 및 수직 속도 계산 (vy는 음수)\r\n                        double vx1 = speed * Math.cos(angle1);\r\n                        double vy1 = speed * Math.sin(angle1); // vy를 음수로 하지 않음 (초기 방향이 위로 향함)\r\n\r\n                        double vx2 = speed * Math.cos(angle2);\r\n                        double vy2 = speed * Math.sin(angle2);\r\n\r\n                        double vx3 = speed * Math.cos(angle3);\r\n                        double vy3 = speed * Math.sin(angle3);\r\n\r\n                        double vx4 = speed * Math.cos(angle3);\r\n                        double vy4 = speed * Math.sin(angle3);\r\n\r\n                        // Add the BossAttacks with initial velocities and positions\r\n                        bossAttacks2.add(new BossAttack(boss.get(i).x, boss.get(i).y, vx1, vy1, gravity, deltaTime));\r\n                        bossAttacks2.add(new BossAttack(boss.get(i).x, boss.get(i).y, vx2, vy2, gravity, deltaTime));\r\n                        bossAttacks2.add(new BossAttack(boss.get(i).x, boss.get(i).y, vx3, vy3, gravity, deltaTime));\r\n                        bossAttacks2.add(new BossAttack(boss.get(i).x, boss.get(i).y, vx4, vy4, gravity, deltaTime));\r\n                        playActiveSound(\"src/main/resources/sounds/bossattck.wav\");\r\n                        // Update the time of the last attack\r\n                        lastBossAttackTime = System.nanoTime();\r\n                    }\r\n                }\r\n                if (Round == 3) {\r\n                    if (System.nanoTime() - lastBossAttackTime >= bossAttackInterval * 900_000) {\r\n                        double angle1 = Math.toRadians(150 + Math.random() * 70);\r\n                        double angle2 = Math.toRadians(150 + Math.random() * 70);\r\n                        double angle3 = Math.toRadians(150 + Math.random() * 70);\r\n                        double angle4 = Math.toRadians(150 + Math.random() * 70);\r\n                        double gravity = 6;\r\n                        double speed = 150; // 초기 속도\r\n                        double deltaTime = 0.1;\r\n\r\n                        // 기존 공격 유도탄\r\n                        double vx1 = speed * Math.cos(angle1);\r\n                        double vy1 = speed * Math.sin(angle1);\r\n                        double vx2 = speed * Math.cos(angle2);\r\n                        double vy2 = speed * Math.sin(angle2);\r\n                        double vx3 = speed * Math.cos(angle3);\r\n                        double vy3 = speed * Math.sin(angle3);\r\n                        double vx4 = speed * Math.cos(angle4);\r\n                        double vy4 = speed * Math.sin(angle4);\r\n\r\n                        // 기존 공격 유도탄을 추가\r\n                        bossAttacks3.add(new BossAttack(boss.get(i).x, boss.get(i).y, vx1, vy1, gravity, deltaTime));\r\n                        bossAttacks3.add(new BossAttack(boss.get(i).x, boss.get(i).y, vx2, vy2, gravity, deltaTime));\r\n                        bossAttacks3.add(new BossAttack(boss.get(i).x, boss.get(i).y, vx3, vy3, gravity, deltaTime));\r\n                        bossAttacks3.add(new BossAttack(boss.get(i).x, boss.get(i).y, vx4, vy4, gravity, deltaTime));\r\n\r\n                        // 마우스 위치를 향한 유도탄의 각도 계산\r\n                        double mouseX = mousePosition.getX(); // 마우스 X 좌표를 가져오는 메서드 구현 또는 사용\r\n                        double mouseY = mousePosition.getY(); // 마우스 Y 좌표를 가져오는 메서드 구현 또는 사용\r\n\r\n                        double dx = mouseX - boss.get(i).x;\r\n                        double dy = mouseY - boss.get(i).y;\r\n                        double homingAngle = Math.atan2(dy, dx);\r\n\r\n                        double vxHoming = speed * Math.cos(homingAngle);\r\n                        double vyHoming = speed * Math.sin(homingAngle);\r\n\r\n                        // 유도탄을 추가\r\n                        bossAttacks3.add(new BossAttack(boss.get(i).x, boss.get(i).y, vxHoming, vyHoming, gravity, deltaTime));\r\n                        playActiveSound(\"src/main/resources/sounds/bossattck.wav\");\r\n\r\n                        // 마지막 공격 시간 업데이트\r\n                        lastBossAttackTime = System.nanoTime();\r\n                    }\r\n                }if (Round == 4) {\r\n                    // 일반 유도탄 공격 처리\r\n                    if (System.nanoTime() - lastBossAttackTime >= bossAttackInterval * 900_000) {\r\n                        double angle1 = Math.toRadians(150 + Math.random() * 70);\r\n                        double angle2 = Math.toRadians(150 + Math.random() * 70);\r\n                        double angle3 = Math.toRadians(150 + Math.random() * 70);\r\n                        double angle4 = Math.toRadians(150 + Math.random() * 70);\r\n                        double gravity = 6;\r\n                        double speed = 150; // 초기 속도\r\n                        double deltaTime = 0.1;\r\n\r\n                        // 기존 유도탄\r\n                        double vx1 = speed * Math.cos(angle1);\r\n                        double vy1 = speed * Math.sin(angle1);\r\n                        double vx2 = speed * Math.cos(angle2);\r\n                        double vy2 = speed * Math.sin(angle2);\r\n                        double vx3 = speed * Math.cos(angle3);\r\n                        double vy3 = speed * Math.sin(angle3);\r\n                        double vx4 = speed * Math.cos(angle4);\r\n                        double vy4 = speed * Math.sin(angle4);\r\n\r\n                        // 기존 유도탄 추가\r\n                        bossAttacks4.add(new BossAttack(boss.get(i).x, boss.get(i).y, vx1, vy1, gravity, deltaTime));\r\n                        bossAttacks4.add(new BossAttack(boss.get(i).x, boss.get(i).y, vx2, vy2, gravity, deltaTime));\r\n                        bossAttacks4.add(new BossAttack(boss.get(i).x, boss.get(i).y, vx3, vy3, gravity, deltaTime));\r\n                        bossAttacks4.add(new BossAttack(boss.get(i).x, boss.get(i).y, vx4, vy4, gravity, deltaTime));\r\n\r\n                        // 마우스 위치를 향한 유도탄의 각도 계산\r\n                        double mouseX = mousePosition.getX(); // 마우스 X 좌표를 가져오는 메서드 구현 또는 사용\r\n                        double mouseY = mousePosition.getY(); // 마우스 Y 좌표를 가져오는 메서드 구현 또는 사용\r\n\r\n                        double dx = mouseX - boss.get(i).x;\r\n                        double dy = mouseY - boss.get(i).y;\r\n                        double homingAngle = Math.atan2(dy, dx);\r\n\r\n                        double vxHoming = speed * Math.cos(homingAngle);\r\n                        double vyHoming = speed * Math.sin(homingAngle);\r\n\r\n                        // 유도탄을 추가\r\n                        bossAttacks4.add(new BossAttack(boss.get(i).x, boss.get(i).y, vxHoming, vyHoming, gravity, deltaTime));\r\n                        bossAttacks4.add(new BossAttack(boss.get(i).x, boss.get(i).y, vxHoming, vyHoming, gravity, deltaTime));\r\n                        playActiveSound(\"src/main/resources/sounds/bossattck.wav\");\r\n\r\n                        // 마지막 공격 시간 업데이트\r\n                        lastBossAttackTime = System.nanoTime();\r\n                    }\r\n\r\n                    // 밑에서 올라오는 탄환 처리\r\n                    if (System.nanoTime() - lastBottomAttackTime >= bottomAttackInterval * 900_000) {\r\n                        double gravity = 6;\r\n                        double speed = 150; // 초기 속도\r\n                        double deltaTime = 0.1;\r\n\r\n                        // 화면 아래쪽에서 시작하도록 위치 설정 (예: 아래 중앙)\r\n                        double screenBottomX1 = framework.getWidth() / 2.0; // 화면 중앙 X 좌표\r\n                        double screenBottomX2 = framework.getWidth() * (0.11 + Math.random() * (0.33 - 0.11)); // 왼쪽에서 나오는 탄환\r\n                        double screenBottomX3 = framework.getWidth() * (0.11 + Math.random() * (0.33 - 0.11)); // 오른쪽에서 나오는 탄환\r\n                        double screenBottomY = framework.getHeight(); // 화면의 아래 Y 좌표\r\n\r\n                        // 위쪽으로 일정한 각도로 발사되는 일반 탄환\r\n                        double upwardAngle = Math.toRadians(80 + Math.random()*(90 - 80)); // 정확히 위쪽으로\r\n\r\n                        // 각 탄환의 속도 계산\r\n                        double vxUp1 = speed * Math.cos(upwardAngle);\r\n                        double vyUp1 = -speed * Math.sin(upwardAngle);\r\n                        System.out.println(screenBottomY+\"aaaaaa\"+screenBottomX3+\"aaaa\"+vyUp1);\r\n                        // 일반 탄환을 추가\r\n                        bossAttacks4.add(new BossAttack((int)screenBottomX1, (int)screenBottomY, vxUp1, vyUp1, gravity, deltaTime));\r\n                        bossAttacks4.add(new BossAttack((int)screenBottomX2, (int)screenBottomY, vxUp1, vyUp1, gravity, deltaTime));\r\n                        bossAttacks4.add(new BossAttack((int)screenBottomX3, (int)screenBottomY, vxUp1, vyUp1, gravity, deltaTime));\r\n\r\n                        // 마지막 밑에서 올라오는 공격 시간 업데이트\r\n                        lastBottomAttackTime = System.nanoTime();\r\n                    }\r\n                }if (Round == 5) {\r\n                    // 일반 유도탄 공격 처리\r\n                    if (System.nanoTime() - lastBossAttackTime >= bossAttackInterval * 900_000) {\r\n                        double angle1 = Math.toRadians(150 + Math.random() * 70);\r\n                        double angle2 = Math.toRadians(150 + Math.random() * 70);\r\n                        double angle3 = Math.toRadians(150 + Math.random() * 70);\r\n                        double angle4 = Math.toRadians(150 + Math.random() * 70);\r\n                        double gravity = 6;\r\n                        double speed = 150; // 초기 속도\r\n                        double deltaTime = 0.1;\r\n\r\n                        // 기존 유도탄\r\n                        double vx1 = speed * Math.cos(angle1);\r\n                        double vy1 = speed * Math.sin(angle1);\r\n                        double vx2 = speed * Math.cos(angle2);\r\n                        double vy2 = speed * Math.sin(angle2);\r\n                        double vx3 = speed * Math.cos(angle3);\r\n                        double vy3 = speed * Math.sin(angle3);\r\n                        double vx4 = speed * Math.cos(angle4);\r\n                        double vy4 = speed * Math.sin(angle4);\r\n\r\n                        // 기존 유도탄 추가\r\n                        bossAttacks5.add(new BossAttack(boss.get(i).x, boss.get(i).y, vx1, vy1, gravity, deltaTime));\r\n                        bossAttacks5.add(new BossAttack(boss.get(i).x, boss.get(i).y, vx2, vy2, gravity, deltaTime));\r\n                        bossAttacks5.add(new BossAttack(boss.get(i).x, boss.get(i).y, vx3, vy3, gravity, deltaTime));\r\n                        bossAttacks5.add(new BossAttack(boss.get(i).x, boss.get(i).y, vx4, vy4, gravity, deltaTime));\r\n\r\n                        // 마우스 위치를 향한 유도탄의 각도 계산\r\n                        double mouseX = mousePosition.getX(); // 마우스 X 좌표를 가져오는 메서드 구현 또는 사용\r\n                        double mouseY = mousePosition.getY(); // 마우스 Y 좌표를 가져오는 메서드 구현 또는 사용\r\n\r\n                        double dx = mouseX - boss.get(i).x;\r\n                        double dy = mouseY - boss.get(i).y;\r\n                        double homingAngle = Math.atan2(dy, dx);\r\n\r\n                        double vxHoming = speed * Math.cos(homingAngle);\r\n                        double vyHoming = speed * Math.sin(homingAngle);\r\n\r\n                        // 유도탄을 추가\r\n                        bossAttacks5.add(new BossAttack(boss.get(i).x, boss.get(i).y, vxHoming, vyHoming, gravity, deltaTime));\r\n                        bossAttacks5.add(new BossAttack(boss.get(i).x, boss.get(i).y, vxHoming, vyHoming, gravity, deltaTime));\r\n                        playActiveSound(\"src/main/resources/sounds/bossattck.wav\");\r\n\r\n                        // 마지막 공격 시간 업데이트\r\n                        lastBossAttackTime = System.nanoTime();\r\n                    }\r\n\r\n                    // 밑에서 올라오는 탄환 처리\r\n                    if (System.nanoTime() - lastBottomAttackTime >= bottomAttackInterval * 900_000) {\r\n                        double gravity = 6;\r\n                        double speed = 150; // 초기 속도\r\n                        double deltaTime = 0.1;\r\n\r\n                        // 화면 아래쪽에서 시작하도록 위치 설정 (예: 아래 중앙)\r\n                        double screenBottomX1 = framework.getWidth() / 2.0; // 화면 중앙 X 좌표\r\n                        double screenBottomX2 = framework.getWidth() * (0.11 + Math.random() * (0.33 - 0.11)); // 왼쪽에서 나오는 탄환\r\n                        double screenBottomX3 = framework.getWidth() * (0.11 + Math.random() * (0.33 - 0.11)); // 오른쪽에서 나오는 탄환\r\n                        double screenBottomY = framework.getHeight(); // 화면의 아래 Y 좌표\r\n                        double screenTopY = 0;\r\n\r\n                        // 위쪽으로 일정한 각도로 발사되는 일반 탄환\r\n                        double upwardAngle = Math.toRadians(80 + Math.random()*(90 - 80)); // 정확히 위쪽으로\r\n\r\n                        // 각 탄환의 속도 계산\r\n                        double vxUp1 = speed * Math.cos(upwardAngle);\r\n                        double vyUp1 = -speed * Math.sin(upwardAngle);\r\n                        double vyDown1 = speed * Math.sin(upwardAngle);\r\n                        System.out.println(screenBottomY+\"aaaaaa\"+screenBottomX3+\"aaaa\"+vyUp1);\r\n                        // 일반 탄환을 추가\r\n                        bossAttacks5.add(new BossAttack((int)screenBottomX1, (int)screenBottomY, vxUp1, vyUp1, gravity, deltaTime));\r\n                        bossAttacks5.add(new BossAttack((int)screenBottomX2, (int)screenBottomY, vxUp1, vyUp1, gravity, deltaTime));\r\n                        bossAttacks5.add(new BossAttack((int)screenBottomX3, (int)screenBottomY, vxUp1, vyUp1, gravity, deltaTime));\r\n                        bossAttacks5.add(new BossAttack((int)screenBottomX3, (int)screenTopY, vxUp1, vyDown1, gravity, deltaTime));\r\n                        bossAttacks5.add(new BossAttack((int)screenBottomX2, (int)screenTopY, vxUp1, vyDown1, gravity, deltaTime));\r\n\r\n                        // 마지막 밑에서 올라오는 공격 시간 업데이트\r\n                        lastBottomAttackTime = System.nanoTime();\r\n                    }\r\n                }\r\n            }\r\n\r\n            // 보스 공격 업데이트 및 피격 체크\r\n            for (int i = 0; i < bossAttacks.size(); i++) {\r\n                if (Round == 1) {\r\n                    BossAttack attack = bossAttacks.get(i);\r\n                    attack.update(); // 공격 위치 업데이트\r\n\r\n                    // 피격 범위 확인\r\n                    if (attack.isHit(mousePosition)) {\r\n                        System.out.println(\"Player hit! Remaining health: \");\r\n                        bossAttacks.remove(i);// 공격이 맞았으므로 제거\r\n                        PlayerHp -= 10;\r\n                        playActiveSound(\"src/main/resources/sounds/hit.wav\");\r\n                        i--; // 인덱스 조정\r\n                    }\r\n\r\n                    // 화면 밖으로 나간 공격은 제거\r\n                    if (attack.x < 0 || attack.x > framework.getWidth() || attack.y < 0 || attack.y > framework.getHeight()) {\r\n                        bossAttacks.remove(i);\r\n                        i--; // 인덱스 조정\r\n                    }\r\n                }\r\n            }\r\n            for(int i = 0; i < bossAttacks2.size(); i++){\r\n                if(Round==2){\r\n                    BossAttack attack2 = bossAttacks2.get(i);\r\n                    attack2.updatewithgravity();\r\n\r\n                    if (attack2.isHit(mousePosition)) {\r\n                        System.out.println(\"Player hit! Remaining health: \");\r\n                        bossAttacks2.remove(i);// 공격이 맞았으므로 제거\r\n                        PlayerHp -= 10;\r\n                        playActiveSound(\"src/main/resources/sounds/hit.wav\");\r\n                        i--; // 인덱스 조정\r\n                    }\r\n\r\n                    // 화면 밖으로 나간 공격은 제거\r\n                    if (attack2.x < 0 || attack2.x > framework.getWidth() || attack2.y < 0 || attack2.y > framework.getHeight()) {\r\n                        bossAttacks2.remove(i);\r\n                        i--; // 인덱스 조정\r\n                    }\r\n                }\r\n            }  for(int i = 0; i < bossAttacks3.size(); i++){\r\n                if(Round==3){\r\n                    BossAttack attack2 = bossAttacks3.get(i);\r\n                    attack2.updatewithgravity();\r\n\r\n                    if (attack2.isHit(mousePosition)) {\r\n                        System.out.println(\"Player hit! Remaining health: \");\r\n                        bossAttacks3.remove(i);// 공격이 맞았으므로 제거\r\n                        PlayerHp -= 10;\r\n                        playActiveSound(\"src/main/resources/sounds/hit.wav\");\r\n                        i--; // 인덱스 조정\r\n                    }\r\n\r\n                    // 화면 밖으로 나간 공격은 제거\r\n                    if (attack2.x < 0 || attack2.x > framework.getWidth() || attack2.y < 0 || attack2.y > framework.getHeight()) {\r\n                        bossAttacks3.remove(i);\r\n                        i--; // 인덱스 조정\r\n                    }\r\n                }\r\n            }for(int i = 0; i < bossAttacks4.size(); i++){\r\n                if(Round==4){\r\n                    BossAttack attack2 = bossAttacks4.get(i);\r\n                    attack2.updatewithgravity();\r\n                    attack2.update();\r\n                    if (attack2.isHit(mousePosition)) {\r\n                        System.out.println(\"Player hit! Remaining health: \");\r\n                        bossAttacks4.remove(i);// 공격이 맞았으므로 제거\r\n                        PlayerHp -= 10;\r\n                        playActiveSound(\"src/main/resources/sounds/hit.wav\");\r\n                        i--; // 인덱스 조정\r\n                    }\r\n\r\n                    // 화면 밖으로 나간 공격은 제거\r\n                    if (attack2.x < 0 || attack2.x > framework.getWidth() || attack2.y < 0 || attack2.y > framework.getHeight()) {\r\n                        bossAttacks4.remove(i);\r\n                        i--; // 인덱스 조정\r\n                    }\r\n                }\r\n            }for(int i = 0; i < bossAttacks5.size(); i++){\r\n                if(Round==5){\r\n                    BossAttack attack2 = bossAttacks5.get(i);\r\n                    attack2.updatewithgravity();\r\n\r\n                    if (attack2.isHit(mousePosition)) {\r\n                        System.out.println(\"Player hit! Remaining health: \");\r\n                        bossAttacks5.remove(i);// 공격이 맞았으므로 제거\r\n                        PlayerHp -= 10;\r\n                        playActiveSound(\"src/main/resources/sounds/hit.wav\");\r\n                        i--; // 인덱스 조정\r\n                    }\r\n\r\n                    // 화면 밖으로 나간 공격은 제거\r\n                    if (attack2.x < 0 || attack2.x > framework.getWidth() || attack2.y < 0 || attack2.y > framework.getHeight()) {\r\n                        bossAttacks5.remove(i);\r\n                        i--; // 인덱스 조정\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        if(Hunter1&& hunterTrigger && !isPause){\r\n            startHunterAutoKill(2500);\r\n            hunterTrigger = false;\r\n        }else if(!Hunter1){\r\n        }else if(!hunterTrigger){\r\n\r\n        }\r\n        if(!isPause) {\r\n        // Creates a new duck, if it's the time, and add it to the array list.\r\n        if (System.nanoTime() - Duck.lastDuckTime >= Duck.timeBetweenDucks) {\r\n\r\n            if (isReloading) {\r\n                if (System.nanoTime() - reloadStartTime >= reloadDuration) {\r\n                    ammo = maxAmmo;   // 탄약을 최대치로 채움\r\n                    isReloading = false; // 장전 상태 해제\r\n                }\r\n            }\r\n            if(ammo<=0 && !isReloading){\r\n                Reload();\r\n            }\r\n\r\n            if (framework.getGun().equals(\"더블배럴샷건\")) {\r\n                selectPlayerDucks(1);\r\n                // 선택된 오리들이 죽었는지 확인하고, 죽으면 다시 선택\r\n            }else if(framework.getGun().equals(\"기본권총\")){\r\n\r\n            }\r\n            // Here we create new duck and add it to the array list.\r\n            ducks.add(new Duck(Duck.duckLines[Duck.nextDuckLines][0] + random.nextInt(200), Duck.duckLines[Duck.nextDuckLines][1], Duck.duckLines[Duck.nextDuckLines][2], Duck.duckLines[Duck.nextDuckLines][3], duckImg));\r\n\r\n            // Here we increase nextDuckLines so that next duck will be created in next line.\r\n            Duck.nextDuckLines++;\r\n            if (Duck.nextDuckLines >= Duck.duckLines.length)\r\n                Duck.nextDuckLines = 0;\r\n\r\n            if (killedDucks >= roundPass && !isBossAlive) {\r\n                // 보스 생성\r\n                stopBackgroundMusic();\r\n                playBackgroundMusic(\"src/main/resources/sounds/warning.wav\");\r\n                spawnBossWithDelay();\r\n                Bosswith3delay = true;\r\n                isBossAlive = true; // 보스가 등장했음을 표시\r\n                System.out.println(\"boss activity\");\r\n                ducks.clear();\r\n            }\r\n            Duck.lastDuckTime = System.nanoTime();\r\n        }\r\n\r\n        if(!isBossAlive) {\r\n            // Update all of the ducks.\r\n            for (int i = 0; i < ducks.size(); i++) {\r\n                // Move the duck.\r\n                ducks.get(i).Update();\r\n\r\n                // Checks if the duck leaves the screen and remove it if it does.\r\n                if (ducks.get(i).x < 0 - duckImg.getWidth()) {\r\n                    ducks.remove(i);\r\n                    runawayDucks++;\r\n                }\r\n            }\r\n            // Does player shoots?\r\n            if (Canvas.mouseButtonState(MouseEvent.BUTTON1) && !isReloading) {\r\n                if (System.nanoTime() - lastTimeShoot >= timeBetweenShots) {\r\n                    shoots++;\r\n                    playActiveSound(\"src/main/resources/sounds/gun.wav\");\r\n                    ammo--;\r\n                    if (playerSelectedDucks != null) {\r\n                        for (int i = 0; i < playerSelectedDucks.length; i++) {\r\n                            if (playerSelectedDucks[i] != null) {\r\n                                playActiveSound(\"src/main/resources/sounds/quack.wav\");\r\n                                killedDucks++; // 죽인 오리 수 증가\r\n                                money += 10; // 돈 증가\r\n                                score += playerSelectedDucks[i].score; // 점수 증가\r\n                                // 오리 리스트에서 제거\r\n                                ducks.remove(playerSelectedDucks[i]);\r\n\r\n                                // 선택된 오리를 null로 설정하여 초기화\r\n                                playerSelectedDucks[i] = null;\r\n                                updateAndReselectPlayerDucks(1);\r\n                            }\r\n                        }\r\n                    }\r\n                    // We go over all the ducks and we look if any of them was shoot.\r\n                    for (int i = 0; i < ducks.size(); i++) {\r\n                        // We check, if the mouse was over ducks head or body, when player has shot.\r\n                        if (new Rectangle(ducks.get(i).x + 18, ducks.get(i).y, 27, 30).contains(mousePosition) ||\r\n                                new Rectangle(ducks.get(i).x + 30, ducks.get(i).y + 30, 88, 25).contains(mousePosition)) {\r\n                            killedDucks++;\r\n                            money += 10;\r\n                            score += ducks.get(i).score;\r\n                            playActiveSound(\"src/main/resources/sounds/quack.wav\");\r\n\r\n                            // Remove the duck from the array list.\r\n                            ducks.remove(i);\r\n\r\n                            // We found the duck that player shoot so we can leave the for loop.\r\n                            break;\r\n                        }\r\n                    }\r\n                    // We go over all the bosses and we look if any of them was shoot.\r\n                    // We go over all the bosses and we look if any of them was shoot.\r\n\r\n\r\n                    lastTimeShoot = System.nanoTime();\r\n                }\r\n            }\r\n        }else {\r\n\r\n            if (Canvas.mouseButtonState(MouseEvent.BUTTON1) && !isReloading) {\r\n                if (System.nanoTime() - lastTimeShoot >= timeBetweenShots) {\r\n                    shoots++;\r\n                    ammo--;\r\n                    if (isBossAlive) {\r\n                        for (int i = 0; i < boss.size(); i++) {\r\n                            // Define the boss hitbox (for exampl, a larger area for the boss).\r\n                            // 보스가 랜덤 각도로 공격 발사\r\n                            if (new Rectangle(boss.get(i).x, boss.get(i).y, 378, 268).contains(mousePosition)) {\r\n                                // Reduce boss health\r\n                                playActiveSound(\"src/main/resources/sounds/gun.wav\");\r\n                                boss.get(i).health -= damage; // Reduce boss health by 20 on each hit.\r\n                                System.out.println(\"attack boss\");\r\n                                System.out.println(boss.get(i).health);\r\n                                // If the boss is dead, update score, money, etc.\r\n                                if (boss.get(i).health <= 0) {\r\n                                    money += 100; // Bosses give more money\r\n                                    score += boss.get(i).score; // Boss-specific score\r\n                                    boss.remove(i);\r\n                                    Pause();\r\n                                    // Remove the boss from the array list.\r\n                                }\r\n                                break;\r\n                                // Since a boss was hit, we can leave the loop.\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                lastTimeShoot = System.nanoTime();\r\n            }\r\n        }\r\n\r\n        // When 200 ducks runaway, the game ends.\r\n            if (runawayDucks >= 10 || PlayerHp < 0 )\r\n                Framework.gameState = Framework.GameState.GAMEOVER;\r\n            if (Framework.gameState == Framework.GameState.GAMEOVER && !leaderboardSaved) {\r\n                framework.saveScore(score);\r\n                leaderboardSaved = true;  // 리더보드 저장 완료\r\n            }\r\n        }\r\n        if(isPause) {\r\n            hunterTrigger = true;\r\n            stopHunterAutoKill();\r\n            buttonbuy.add(new Buttonbuy(framework.getWidth()/2 - 350, framework.getHeight()/2+50, buttonImg));\r\n            buttonbuy.add(new Buttonbuy(framework.getWidth()/2 -50, framework.getHeight()/2+50, buttonImg));\r\n            buttonbuy.add(new Buttonbuy(framework.getWidth()/2 + 250, framework.getHeight()/2+50, buttonImg));\r\n            // 마우스 포지션 및 버튼 클릭 상태 확인\r\n            boolean mouseClicked = false;\r\n            if (Canvas.mouseButtonState(MouseEvent.BUTTON1) && !mouseClicked) {\r\n                mouseClicked = true;\r\n                if(!Canvas.mouseButtonState(MouseEvent.BUTTON1)) {\r\n                    mouseClicked = false;\r\n                }\r\n                // 버튼 1 (헌터 구매)\r\n                if (money > 200 && Hunters.size() < 1) {\r\n                    Rectangle buttonArea1 = new Rectangle(buttonbuy.get(0).x, buttonbuy.get(0).y, 367, 257);\r\n                    if (buttonArea1.contains(mousePosition) && mouseClicked) {\r\n                        System.out.println(\"buybutton\");\r\n                        Hunters.add(new Hunter1(220, 290, 0, 100, hunter111Img));\r\n                        Hunter1 = true;\r\n                        money -= 200;\r\n                        System.out.println(\"Mouse Position: \" + mousePosition);\r\n                        System.out.println(\"Button Position: \" + buttonbuy.get(0).x + \", \" + buttonbuy.get(0).y);\r\n                    }\r\n                }\r\n\r\n                // 버튼 2 (데미지 증가)\r\n                if (money > 100) {\r\n                    Rectangle buttonArea2 = new Rectangle(buttonbuy.get(1).x, buttonbuy.get(1).y, 367, 257);\r\n                    if (buttonArea2.contains(mousePosition)&& mouseClicked) {\r\n                        System.out.println(\"buybutton\");\r\n                        damage += 10;\r\n                        money -= 100;\r\n                        System.out.println(\"Mouse Position: \" + mousePosition);\r\n                        System.out.println(\"Button Position: \" + buttonbuy.get(1).x + \", \" + buttonbuy.get(1).y);\r\n                    }\r\n                }\r\n\r\n                // 버튼 3 (최대 탄약 증가)\r\n                if (money > 100) {\r\n                    Rectangle buttonArea3 = new Rectangle(buttonbuy.get(2).x, buttonbuy.get(2).y, 367, 257);\r\n                    if (buttonArea3.contains(mousePosition) && mouseClicked) {\r\n                        System.out.println(\"buybutton\");\r\n                        maxAmmo += 2;\r\n                        money -= 100;\r\n                        System.out.println(\"Mouse Position: \" + mousePosition);\r\n                        System.out.println(\"Button Position: \" + buttonbuy.get(2).x + \", \" + buttonbuy.get(2).y);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if(Hunters.size() > 0) {\r\n            Hunter1 = true;\r\n        }\r\n}\r\n\r\n    public void drawBossAttack(Graphics2D g2d){\r\n        for(int i = 0; i < bossAttacks.size(); i++) {\r\n            g2d.drawImage(bossAttack, bossAttacks.get(i).x,bossAttacks.get(i).y, null );\r\n        }\r\n    }\r\n    private void spawnBossWithDelay() {\r\n        // 3초 후 보스 생성\r\n        ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);\r\n        scheduler.schedule(() -> {\r\n            if(Round == 1){\r\n                boss.add(new boss1(1200, 400, 0, 1000,200,bossImg));\r\n            }else if(Round == 2){\r\n                boss.add(new boss1(1200,400,0,1500, 400,boss2Img));\r\n            }else if(Round == 3){\r\n                boss.add(new boss1(1200,400, 0, 2000, 800,boss3Img));\r\n            }else if(Round == 4){\r\n                boss.add(new boss1(1200,400,0,3000, 1600, boss4Img));\r\n            }else if(Round == 5){\r\n                boss.add(new boss1(1200,400,0,4000, 3200, boss5Img));\r\n            }\r\n            stopBackgroundMusic();\r\n            if(Round == 1) {\r\n                playBackgroundMusic(\"src/main/resources/sounds/AquaCave.wav\");\r\n            }else if(Round == 2){\r\n                playBackgroundMusic(\"src/main/resources/sounds/RuinCastle.wav\");\r\n            }else if(Round == 3){\r\n                playBackgroundMusic(\"src/main/resources/sounds/ArabPirate.wav\");\r\n            }else if(Round == 4){\r\n                playBackgroundMusic(\"src/main/resources/sounds/SinkingThings.wav\");\r\n            }else if(Round == 5){\r\n                playBackgroundMusic(\"src/main/resources/sounds/WorldHorizon.wav\");\r\n            }\r\n            isBossAlive = true; // 보스가 등장했음을 표시\r\n            System.out.println(\"Boss activity\");\r\n            ducks.clear();\r\n            Bosswith3delay = false;\r\n        }, 3, TimeUnit.SECONDS); // 3초 후 실행\r\n    }\r\n\r\n    /**\r\n     * Draw the game to the screen.\r\n     * \r\n     * @param g2d Graphics2D\r\n     * @param mousePosition current mouse position.\r\n     */\r\n    public void Draw(Graphics2D g2d, Point mousePosition)\r\n    {\r\n        if (Round == 1){\r\n            g2d.drawImage(backgroundImg, 0, 0, Framework.frameWidth, Framework.frameHeight, null);\r\n        }\r\n\r\n        if(Round == 2){\r\n            g2d.drawImage(backgroundImg2, 0, 0, Framework.frameWidth, Framework.frameHeight, null);\r\n        }\r\n\r\n        if(Round == 3){\r\n            g2d.drawImage(backgroundImg3, 0, 0, Framework.frameWidth, Framework.frameHeight, null);\r\n        }\r\n\r\n        if(Round == 4){\r\n            g2d.drawImage(backgroundImg4, 0, 0, Framework.frameWidth, Framework.frameHeight, null);\r\n        }\r\n\r\n        if(Round == 5){\r\n            g2d.drawImage(backgroundImg5, 0, 0, Framework.frameWidth, Framework.frameHeight, null);\r\n        }\r\n        \r\n        // Here we draw all the ducks.\r\n        for(int i = 0; i < ducks.size(); i++)\r\n        {\r\n            ducks.get(i).Draw(g2d);\r\n        }\r\n        if(Bosswith3delay){\r\n            g2d.drawImage(warningImg,Framework.frameWidth/2-275,Framework.frameHeight/2-250, null);\r\n        }\r\n        if(Hunter1){\r\n            g2d.drawImage(hunter111Img,Hunters.get(0).x,Hunters.get(0).y,null);\r\n            drawSightOnHunterSelectedDucks(g2d);\r\n\r\n        }\r\n\r\n        if(bossAttacks.size() > 0){\r\n            for(int i = 0; i < bossAttacks.size(); i++) {\r\n                g2d.drawImage(bossAttack, bossAttacks.get(i).x,bossAttacks.get(i).y, null );\r\n            }\r\n        }\r\n\r\n        if(bossAttacks2.size() >0){\r\n            for(int i = 0; i < bossAttacks2.size(); i++) {\r\n                g2d.drawImage(bossAttack2, bossAttacks2.get(i).x,bossAttacks2.get(i).y,100,100,null);\r\n            }\r\n        }\r\n\r\n        if(bossAttacks3.size() > 0){\r\n            for(int i = 0; i < bossAttacks3.size(); i++) {\r\n                g2d.drawImage(bossAttack3, bossAttacks3.get(i).x,bossAttacks3.get(i).y,100,100,null);\r\n            }\r\n        }\r\n\r\n        if(bossAttacks4.size() > 0){\r\n            for(int i = 0; i < bossAttacks4.size(); i++) {\r\n                g2d.drawImage(bossAttack4, bossAttacks4.get(i).x,bossAttacks4.get(i).y,100,100,null);\r\n            }\r\n        }\r\n\r\n        if(bossAttacks5.size() > 0){\r\n            for(int i = 0; i < bossAttacks5.size(); i++) {\r\n                g2d.drawImage(bossAttack5, bossAttacks5.get(i).x,bossAttacks5.get(i).y,100,100,null);\r\n            }\r\n        }\r\n\r\n        if(isPause){\r\n            int buyWidth = buttonImg.getWidth(null) / 2; // 너비 50%\r\n            int buyHeight = buttonImg.getHeight(null) / 2; // 높이 50%\r\n            for(int i = 0; i < buttonbuy.size(); i++) {\r\n                g2d.drawImage(buttonImg, buttonbuy.get(i).x, buttonbuy.get(i).y,buyWidth,buyHeight,null);\r\n            }\r\n            for(int i = 0; i < shopImages.length; i++) {\r\n                g2d.drawImage(shopImages[i],buttonbuy.get(i).x-60, buttonbuy.get(i).y - 250, 300,300,null);\r\n            }\r\n        }\r\n        // 보스 그리기\r\n        if (!boss.isEmpty()) {\r\n            for (int i = 0; i < boss.size(); i++) {\r\n                // 보스 이미지 그리기\r\n                if(Round == 1) {\r\n                    g2d.drawImage(bossImg, boss.get(i).x - 90, boss.get(i).y - 20, 378/2, 268/2, null);\r\n                }else if(Round == 2) {\r\n                    g2d.drawImage(boss2Img, boss.get(i).x - 90, boss.get(i).y - 20, 378, 268, null);\r\n                }else if(Round == 3) {\r\n                    g2d.drawImage(boss3Img, boss.get(i).x - 90, boss.get(i).y - 20, 378, 268, null);\r\n                }else if(Round == 4) {\r\n                    g2d.drawImage(boss4Img, boss.get(i).x - 90, boss.get(i).y - 20, 378, 268, null);\r\n                }else if(Round == 5){\r\n                    g2d.drawImage(boss5Img, boss.get(i).x - 90, boss.get(i).y - 20, 378, 268, null);\r\n                }\r\n                // 보스의 체력 상태를 기반으로 HP 이미지를 선택\r\n                int currentHealth = boss.get(i).health;\r\n                int maxHealth = boss.get(i).maxHealth; // 보스의 최대 체력\r\n\r\n                // 체력에 따른 HP 이미지를 표시\r\n                int hpIndex = (int) ((currentHealth / (double) maxHealth) * 11); // 0에서 11까지의 인덱스를 계산\r\n                hpIndex = Math.max(0, Math.min(11, hpIndex)); // 범위를 0 ~ 11로 제한\r\n                // HP 바 크기 조정 (예: 50% 크기)\r\n                int hpBarWidth = hpImages[hpIndex].getWidth(null) / 8; // 너비 50%\r\n                int hpBarHeight = hpImages[hpIndex].getHeight(null) / 8; // 높이 50%\r\n\r\n                // HP 바 그리기 (크기 조정 후)\r\n                g2d.drawImage(hpImages[hpIndex], boss.get(i).x - 20, boss.get(i).y - 60, hpBarWidth, hpBarHeight, null);\r\n            }\r\n        }\r\n\r\n        if(isReloading){\r\n            g2d.drawString(\"Reloading\", Framework.frameWidth/2, Framework.frameHeight/2);\r\n        }\r\n\r\n        g2d.drawImage(sightImg, mousePosition.x - sightImgMiddleWidth, mousePosition.y - sightImgMiddleHeight, null);\r\n        // 더블배럴샷건일 때 랜덤 오리 2마리 지정\r\n        if (framework.getGun().equals(\"더블배럴샷건\")) {\r\n            drawSightOnPlayerSelectedDucks(g2d);\r\n            reloadDuration = 2500000000L;\r\n        }\r\n        if(framework.getGun().equals(\"AK-47\")){\r\n            maxAmmo = 30;\r\n            reloadDuration = 3000000000L;\r\n            timeBetweenShots = 100_000_000L;\r\n        }\r\n\r\n        g2d.setFont(font);\r\n        g2d.setColor(Color.darkGray);\r\n\r\n        g2d.drawString(\"Ammo: \" + ammo + \"/\" + maxAmmo, 10, 50);\r\n        g2d.drawString(\"RUNAWAY: \" + runawayDucks, 10, 21);\r\n        g2d.drawString(\"KILLS: \" + killedDucks, 160, 21);\r\n        g2d.drawString(\"SHOOTS: \" + shoots, 299, 21);\r\n        g2d.drawString(\"SCORE: \" + score, 440, 21);\r\n        g2d.drawString(\"Round: \" + Round, 570, 21);\r\n        g2d.drawString(\"Money: \" + money, 700, 21);\r\n\r\n        g2d.drawString(\"PlayerHP: \" + PlayerHp, 10, 80);\r\n\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Draw the game over screen.\r\n     * \r\n     * @param g2d Graphics2D\r\n     * @param mousePosition Current mouse position.\r\n     */\r\n    public void DrawGameOver(Graphics2D g2d, Point mousePosition)\r\n    {\r\n        Draw(g2d, mousePosition);\r\n        \r\n        // The first text is used for shade.\r\n        g2d.setColor(Color.black);\r\n        g2d.drawString(\"kr.jbnu.se.std.Game Over\", Framework.frameWidth / 2 - 39, (int)(Framework.frameHeight * 0.65) + 1);\r\n        g2d.drawString(\"Press space or enter to restart.\", Framework.frameWidth / 2 - 149, (int)(Framework.frameHeight * 0.70) + 1);\r\n        g2d.setColor(Color.red);\r\n        g2d.drawString(\"kr.jbnu.se.std.Game Over\", Framework.frameWidth / 2 - 40, (int)(Framework.frameHeight * 0.65));\r\n        g2d.drawString(\"Press space or enter to restart.\", Framework.frameWidth / 2 - 150, (int)(Framework.frameHeight * 0.70));\r\n    }\r\n\r\n    public int getScore(){\r\n        return score;\r\n    }\r\n\r\n    public void setgun(String gun){\r\n        this.gun = gun;\r\n    }\r\n\r\n    private void Reload() {\r\n        isReloading = true;\r\n        playActiveSound(\"src/main/resources/sounds/reloading.wav\");\r\n        reloadStartTime = System.nanoTime();\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/kr/jbnu/se/std/Game.java b/src/main/java/kr/jbnu/se/std/Game.java
--- a/src/main/java/kr/jbnu/se/std/Game.java	(revision 10f37eb5a6c9b86d00fbb3d9d09ed12dfc520d18)
+++ b/src/main/java/kr/jbnu/se/std/Game.java	(date 1729568581185)
@@ -20,7 +20,7 @@
 
 /**
  * Actual game.
- * 
+ *
  * @author www.gametutorial.net
  */
 
Index: src/main/java/kr/jbnu/se/std/LoginClient.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package kr.jbnu.se.std;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.awt.event.ActionEvent;\r\nimport java.awt.event.ActionListener;\r\nimport java.io.IOException;\r\nimport java.io.UnsupportedEncodingException;\r\nimport java.net.URLEncoder;\r\n\r\nimport com.google.firebase.auth.FirebaseAuth;\r\nimport okhttp3.*;\r\nimport org.json.JSONObject;\r\nimport java.awt.event.FocusAdapter;\r\nimport java.awt.event.FocusEvent;\r\nimport javax.swing.event.DocumentEvent;\r\nimport javax.swing.event.DocumentListener;\r\n\r\npublic class LoginClient extends JFrame {\r\n\r\n    private JTextField idField;\r\n    private JPasswordField passwordField;\r\n    private JButton loginButton;\r\n    private JButton signupButton;\r\n    private Framework framework;\r\n    private String id, password;\r\n    private FirebaseAuth auth;\r\n    private String realUserId;\r\n    private String email;\r\n    private String encodeemail1;\r\n    private String encodeemail2;\r\n    private static final String FIREBASE_API_KEY = \"YOUR_API_KEY_HERE\";\r\n\r\n\r\n    public LoginClient(Framework framework) {\r\n        this.framework = framework;\r\n        setTitle(\"Login\");\r\n        setSize(840, 630);\r\n        setLocationRelativeTo(null);\r\n        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n        auth = FirebaseAuth.getInstance();\r\n\r\n        JPanel panel = new JPanel(new GridBagLayout());\r\n        JPanel mainPanel = new JPanel(new BorderLayout());\r\n\r\n        // 오른쪽 화면\r\n        ImageIcon imageIcon = new ImageIcon(\"src/main/resources/images/login.png\");\r\n        Image backgroundImage = imageIcon.getImage();\r\n        JPanel rightPanel = new ImagePanel(backgroundImage);\r\n        rightPanel.setLayout(new GridBagLayout());\r\n        rightPanel.setPreferredSize(new Dimension(560, 630));\r\n        mainPanel.add(rightPanel, BorderLayout.CENTER);\r\n\r\n        // 왼쪽 화면\r\n        JPanel leftPanel = new JPanel(new GridBagLayout());\r\n        leftPanel.setBackground(Color.WHITE);\r\n        leftPanel.setPreferredSize(new Dimension(280, 630));\r\n        mainPanel.add(leftPanel, BorderLayout.WEST);\r\n\r\n        GridBagConstraints gbc = new GridBagConstraints();\r\n        gbc.fill = GridBagConstraints.HORIZONTAL;\r\n        gbc.insets = new Insets(2, 5, 2, 5);\r\n\r\n        gbc.weighty = 0.7;\r\n        gbc.gridx = 0;\r\n        gbc.gridy = 0;\r\n        leftPanel.add(new JLabel(), gbc);\r\n\r\n        // \"로그인\" 텍스트 추가\r\n        JLabel loginLabel = new JLabel(\"LOGIN\");\r\n        loginLabel.setFont(new Font(\"Arial\", Font.BOLD, 20));\r\n        loginLabel.setHorizontalAlignment(SwingConstants.CENTER);\r\n        gbc.weighty = 0;\r\n        gbc.gridx = 0;\r\n        gbc.gridy = 1;\r\n        gbc.insets = new Insets(10, 0, 30, 0);\r\n        leftPanel.add(loginLabel, gbc);\r\n\r\n        // ID 라벨 및 입력 필드\r\n        JPanel idPanel = new JPanel();\r\n        idPanel.setBackground(new Color(233, 233, 233));\r\n        idPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));\r\n        idPanel.setPreferredSize(new Dimension(230, 50));\r\n        idPanel.setLayout(new BorderLayout());\r\n\r\n        // 텍스트 필드 생성\r\n        this.idField = new JTextField(\"ID\", 30);\r\n        idField.setForeground(Color.GRAY);\r\n        idField.setOpaque(false);\r\n        idField.setBorder(BorderFactory.createEmptyBorder());\r\n\r\n        idField.addFocusListener(new FocusAdapter() {\r\n            @Override\r\n            public void focusGained(FocusEvent e) {\r\n                if (\"ID\".equals(idField.getText())) {\r\n                    idField.setText(\"\");\r\n                    idField.setForeground(Color.BLACK);\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void focusLost(FocusEvent e) {\r\n                if (idField.getText().isEmpty()) {\r\n                    idField.setText(\"ID\");\r\n                    idField.setForeground(Color.GRAY);\r\n                }\r\n            }\r\n        });\r\n\r\n        idField.getDocument().addDocumentListener(new DocumentListener() {\r\n            @Override\r\n            public void insertUpdate(DocumentEvent e) {\r\n                updateLoginButtonImage();\r\n            }\r\n\r\n            @Override\r\n            public void removeUpdate(DocumentEvent e) {\r\n                updateLoginButtonImage();\r\n            }\r\n\r\n            @Override\r\n            public void changedUpdate(DocumentEvent e) {\r\n                updateLoginButtonImage();\r\n            }\r\n        });\r\n\r\n        idPanel.add(idField, BorderLayout.CENTER);\r\n        gbc.weighty = 0;\r\n        gbc.gridx = 0;\r\n        gbc.gridy = 2;\r\n        gbc.insets = new Insets(5, 0, 5, 0);\r\n        leftPanel.add(idPanel, gbc);\r\n\r\n        // 비밀번호 라벨 및 입력 필드\r\n        JPanel passwordPanel = new JPanel();\r\n        passwordPanel.setBackground(new Color(233, 233, 233));\r\n        passwordPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));\r\n        passwordPanel.setPreferredSize(new Dimension(230, 50));\r\n        passwordPanel.setLayout(new BorderLayout());\r\n\r\n        // 비밀번호 텍스트 필드 생성\r\n        this.passwordField = new JPasswordField(\"Password\", 15);\r\n        passwordField.setForeground(Color.GRAY);\r\n        passwordField.setEchoChar((char) 0);\r\n        passwordField.setOpaque(false);\r\n        passwordField.setBorder(BorderFactory.createEmptyBorder());\r\n\r\n        passwordField.addFocusListener(new FocusAdapter() {\r\n            @Override\r\n            public void focusGained(FocusEvent e) {\r\n                if (\"Password\".equals(passwordField.getText())) {\r\n                    passwordField.setText(\"\");\r\n                    passwordField.setForeground(Color.BLACK);\r\n                    passwordField.setEchoChar('●');\r\n                }\r\n            }\r\n            @Override\r\n            public void focusLost(FocusEvent e) {\r\n                if (passwordField.getText().isEmpty()) {\r\n                    passwordField.setText(\"Password\");\r\n                    passwordField.setForeground(Color.GRAY);\r\n                    passwordField.setEchoChar((char) 0);\r\n                }\r\n            }\r\n        });\r\n\r\n        passwordField.getDocument().addDocumentListener(new DocumentListener() {\r\n            @Override\r\n            public void insertUpdate(DocumentEvent e) {\r\n                updateLoginButtonImage();\r\n            }\r\n\r\n            @Override\r\n            public void removeUpdate(DocumentEvent e) {\r\n                updateLoginButtonImage();\r\n            }\r\n\r\n            @Override\r\n            public void changedUpdate(DocumentEvent e) {\r\n                updateLoginButtonImage();\r\n            }\r\n        });\r\n\r\n        passwordPanel.add(passwordField, BorderLayout.CENTER);\r\n        gbc.weighty = 0;\r\n        gbc.gridx = 0;\r\n        gbc.gridy = 3;\r\n        gbc.insets = new Insets(10, 0, 5, 0);\r\n        leftPanel.add(passwordPanel, gbc);\r\n\r\n        gbc.weighty = 0.8;\r\n        gbc.gridx = 0;\r\n        gbc.gridy = 4;\r\n        leftPanel.add(new JLabel(), gbc);\r\n\r\n        // 로그인 버튼\r\n        ImageIcon originalIcon = new ImageIcon(\"src/main/resources/images/login_btn.png\");\r\n        Image originalImage = originalIcon.getImage();\r\n        Image scaledImage = originalImage.getScaledInstance(70, 70, Image.SCALE_SMOOTH);\r\n        ImageIcon scaledIcon = new ImageIcon(scaledImage);\r\n        loginButton = new JButton(scaledIcon);\r\n        loginButton.setPreferredSize(new Dimension(70, 70));\r\n        loginButton.setContentAreaFilled(false);\r\n        loginButton.setOpaque(false);\r\n        gbc.weightx = 0;\r\n        gbc.weighty = 0;\r\n        gbc.gridx = 0;\r\n        gbc.gridy = 5;\r\n        gbc.insets = new Insets(10, 0, 0, 0);\r\n        gbc.fill = GridBagConstraints.NONE;\r\n        loginButton.setBorderPainted(false);\r\n        leftPanel.add(loginButton, gbc);\r\n\r\n        gbc.weighty = 0.8;\r\n        gbc.gridx = 0;\r\n        gbc.gridy = 6;\r\n        leftPanel.add(new JLabel(), gbc);\r\n\r\n        // 회원가입 버튼\r\n        signupButton = new JButton(\"Sign Up\");\r\n        gbc.weightx = 0;\r\n        gbc.gridx = 0;\r\n        gbc.gridy = 7;\r\n        gbc.fill = GridBagConstraints.NONE;\r\n        signupButton.setBorderPainted(false);\r\n        signupButton.setContentAreaFilled(false);\r\n        leftPanel.add(signupButton, gbc);\r\n\r\n        add(mainPanel);\r\n        pack();\r\n        setVisible(true);\r\n\r\n        leftPanel.requestFocusInWindow();\r\n\r\n        // 로그인 버튼 클릭 시 이벤트 처리\r\n        loginButton.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                id = idField.getText();\r\n                password = new String(passwordField.getPassword());\r\n                //updateLoginButtonImage();\r\n                loginWithFirebase(id, password);\r\n            }\r\n        });\r\n\r\n        // 회원가입 버튼 클릭 시 이벤트 처리\r\n        signupButton.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                showRegisterWindow();\r\n            }\r\n        });\r\n\r\n        add(panel);\r\n    }\r\n\r\n    private void updateLoginButtonImage() {\r\n        String idText = idField.getText();\r\n        String passwordText = new String(passwordField.getPassword());\r\n\r\n        ImageIcon newIcon;\r\n\r\n        if (!\"ID\".equals(idText) && idText.length() > 0 &&\r\n                !\"Password\".equals(passwordText) && passwordText.length() > 0) {\r\n            ImageIcon originalIcon = new ImageIcon(\"src/main/resources/images/login_btn_press.png\");\r\n            Image originalImage = originalIcon.getImage();\r\n            Image scaledImage = originalImage.getScaledInstance(70, 70, Image.SCALE_SMOOTH);\r\n            newIcon = new ImageIcon(scaledImage);\r\n        } else {\r\n            ImageIcon originalIcon = new ImageIcon(\"src/main/resources/images/login_btn.png\");\r\n            Image originalImage = originalIcon.getImage();\r\n            Image scaledImage = originalImage.getScaledInstance(70, 70, Image.SCALE_SMOOTH);\r\n            newIcon = new ImageIcon(scaledImage);\r\n        }\r\n        loginButton.setIcon(newIcon);\r\n    }\r\n\r\n    public class ImagePanel extends JPanel{\r\n        private Image backgroundImage;\r\n        public ImagePanel(Image backgroundImage) {\r\n            this.backgroundImage = backgroundImage;\r\n        }\r\n\r\n        @Override\r\n        protected void paintComponent(Graphics g) {\r\n            super.paintComponent(g);\r\n            if (backgroundImage != null) {\r\n                g.drawImage(backgroundImage, 0, 0, getWidth(), getHeight(), this);\r\n            }\r\n        }\r\n    }\r\n\r\n    //파이어베이스 초기화\r\n    // Firebase를 통한 로그인 처리 메소드\r\n    private void loginWithFirebase(String email, String password) {\r\n        if (email == null || !email.contains(\"@\") || password.length() < 6) {\r\n            SwingUtilities.invokeLater(() -> JOptionPane.showMessageDialog(null, \"이메일 또는 비밀번호가 유효하지 않습니다.\"));\r\n            return;\r\n        }\r\n        OkHttpClient client = new OkHttpClient();\r\n        JSONObject json = new JSONObject();\r\n        json.put (\"email\", email);\r\n        json.put (\"password\", password);\r\n        json.put(\"returnSecureToken\", true);\r\n        RequestBody body = RequestBody.create(MediaType.parse(\"application/json; charset=utf-8\"), json.toString());\r\n        Request request = new Request.Builder()\r\n                .url(\"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyCJDgbBXWSRoRUg3xVqsQrSEz1W5AFiE_Y\")\r\n                .post(body)\r\n                .build();\r\n\r\n        client.newCall(request).enqueue(new Callback() {\r\n            @Override\r\n            public void onFailure(Call call, IOException e) {\r\n                SwingUtilities.invokeLater(() -> JOptionPane.showMessageDialog(null, \"로그인 실패: \" + e.getMessage()));\r\n            }\r\n\r\n            @Override\r\n            public void onResponse(Call call, Response response) throws IOException {\r\n                if (response.isSuccessful()) {\r\n                    SwingUtilities.invokeLater(() -> {\r\n                        String responseBody = null;\r\n                        try {\r\n                            responseBody = response.body().string();\r\n                        } catch (IOException e) {\r\n                            throw new RuntimeException(e);\r\n                        }\r\n                        JSONObject jsonResponse = new JSONObject(responseBody);\r\n                        dispose(); // 로그인 창 닫기\r\n                        // ID 토큰 가져오기\r\n                        String idToken = jsonResponse.getString(\"idToken\");\r\n                        System.out.println(\"ID 토큰: \" + idToken);\r\n                        framework.getEmail(email);\r\n                        framework.getPassword(password);\r\n                        encodeemail1 = email.split(\"@\")[0];\r\n                        framework.getIdtoken(idToken);\r\n                        framework.onLoginSuccess();\r\n                        encodeemail2 = email.replace(\".\", \"%2E\");\r\n                        framework.getUserId(encodeemail1);\r\n                    });\r\n                } else {\r\n                    SwingUtilities.invokeLater(() -> JOptionPane.showMessageDialog(null, \"로그인 실패: 잘못된 자격 증명\"));\r\n                }\r\n            }\r\n        });\r\n        request = new Request.Builder()\r\n                .url(\"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=\" + FIREBASE_API_KEY)\r\n                .post(body)\r\n                .build();\r\n    }\r\n    // 회원가입 창 표시\r\n    private void showRegisterWindow() {\r\n        JFrame registerFrame = new JFrame(\"Sign Up\");\r\n        registerFrame.setSize(350, 250);\r\n        registerFrame.setLocationRelativeTo(null);\r\n        registerFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\r\n\r\n        JPanel registerPanel = new JPanel(new GridBagLayout());\r\n        registerPanel.setBackground(Color.WHITE);\r\n\r\n        GridBagConstraints gbc = new GridBagConstraints();\r\n        gbc.fill = GridBagConstraints.HORIZONTAL;\r\n        gbc.insets = new Insets(5, 5, 5, 5);\r\n\r\n        // 이메일 라벨 및 입력 필드\r\n        /*JLabel emailLabel = new JLabel(\"Email:\");\r\n        gbc.gridx = 0;\r\n        gbc.gridy = 0;\r\n        registerPanel.add(emailLabel, gbc);\r\n\r\n        JTextField emailField = new JTextField(15);\r\n        gbc.gridx = 1;\r\n        gbc.gridy = 0;\r\n        registerPanel.add(emailField, gbc);*/\r\n\r\n        // new ID 라벨 및 입력 필드\r\n        JPanel newidpanel = new JPanel();\r\n        newidpanel.setBackground(new Color(233, 233, 233));\r\n        newidpanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));\r\n        newidpanel.setLayout(new BorderLayout());\r\n\r\n        // new ID 텍스트 필드 생성\r\n        JTextField newidField = new JTextField(\"email\", 30);\r\n        newidField.setForeground(Color.GRAY);\r\n        newidField.setOpaque(false);\r\n        newidField.setBorder(BorderFactory.createEmptyBorder());\r\n\r\n        newidField.addFocusListener(new FocusAdapter() {\r\n            @Override\r\n            public void focusGained(FocusEvent e) {\r\n                if (\"ID\".equals(newidField.getText())) {\r\n                    newidField.setText(\"\");\r\n                    newidField.setForeground(Color.BLACK);\r\n                }\r\n            }\r\n            @Override\r\n            public void focusLost(FocusEvent e) {\r\n                if (newidField.getText().isEmpty()) {\r\n                    newidField.setText(\"email\");\r\n                    newidField.setForeground(Color.GRAY);\r\n                }\r\n            }\r\n        });\r\n\r\n        newidpanel.add(newidField, BorderLayout.CENTER);\r\n        gbc.weightx = 1.0;\r\n        gbc.weighty = 0;\r\n        gbc.gridx = 0;\r\n        gbc.gridy = 0;\r\n        gbc.insets = new Insets(5, 15, 5, 15);\r\n        registerPanel.add(newidpanel, gbc);\r\n\r\n        // 비밀번호 라벨 및 입력 필드\r\n        /*JLabel passwordLabel = new JLabel(\"Password:\");\r\n        gbc.gridx = 0;\r\n        gbc.gridy = 1;\r\n        registerPanel.add(passwordLabel, gbc);\r\n\r\n        JPasswordField registerPasswordField = new JPasswordField(15);\r\n        gbc.gridx = 0;\r\n        gbc.gridy = 2;\r\n        registerPanel.add(registerPasswordField, gbc);*/\r\n\r\n        // new password 라벨 및 입력 필드\r\n        JPanel newpasswordpanel = new JPanel();\r\n        newpasswordpanel.setBackground(new Color(233, 233, 233)); //색을 바꾸든 이미지를 설정하든 바꿀것!!!\r\n        newpasswordpanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));\r\n        newpasswordpanel.setLayout(new BorderLayout());\r\n\r\n        // new password 텍스트 필드\r\n        JPasswordField newpasswordField = new JPasswordField(\"password\", 30);\r\n        newpasswordField.setForeground(Color.GRAY);\r\n        newpasswordField.setOpaque(false);\r\n        newpasswordField.setBorder(BorderFactory.createEmptyBorder());\r\n        newpasswordField.setEchoChar((char) 0);\r\n\r\n        newpasswordField.addFocusListener(new FocusAdapter() {\r\n            @Override\r\n            public void focusGained(FocusEvent e) {\r\n                if (\"password\".equals(new String(newpasswordField.getPassword()))) {\r\n                    newpasswordField.setText(\"\");\r\n                    newpasswordField.setForeground(Color.BLACK);\r\n                    newpasswordField.setEchoChar('●');\r\n                }\r\n            }\r\n            @Override\r\n            public void focusLost(FocusEvent e) {\r\n                if (newpasswordField.getPassword().length == 0) {\r\n                    newpasswordField.setText(\"password\");\r\n                    newpasswordField.setForeground(Color.GRAY);\r\n                    newpasswordField.setEchoChar((char) 0);\r\n                }\r\n            }\r\n        });\r\n\r\n        newpasswordpanel.add(newpasswordField, BorderLayout.CENTER);\r\n        gbc.weightx = 1.0;\r\n        gbc.weighty = 0;\r\n        gbc.gridx = 0;\r\n        gbc.gridy = 1;\r\n        gbc.insets = new Insets(5, 15, 5, 15);\r\n\r\n        registerPanel.add(newpasswordpanel, gbc);\r\n\r\n        /*JLabel nicknameLabel = new JLabel(\"Nickname:\");\r\n        gbc.gridx = 0;\r\n        gbc.gridy = 3; // 비밀번호 아래에 배치\r\n        registerPanel.add(nicknameLabel, gbc);\r\n\r\n        JTextField nicknameField = new JTextField(15);\r\n        gbc.gridx = 0;\r\n        gbc.gridy = 4; // 비밀번호 아래에 배치\r\n        registerPanel.add(nicknameField, gbc);*/\r\n\r\n        // Nickname 라벨 및 입력 필드\r\n        JPanel nicknamepanel = new JPanel();\r\n        nicknamepanel.setBackground(new Color(233, 233, 233)); //색을 바꾸든 이미지를 설정하든 바꿀것!!!\r\n        nicknamepanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));\r\n        nicknamepanel.setLayout(new BorderLayout());\r\n\r\n        // Nickname 텍스트 필드 생성\r\n        JTextField nicknameField = new JTextField(\"nickname\", 30);\r\n        nicknameField.setForeground(Color.GRAY);\r\n        nicknameField.setOpaque(false);\r\n        nicknameField.setBorder(BorderFactory.createEmptyBorder());\r\n\r\n        nicknameField.addFocusListener(new FocusAdapter() {\r\n            @Override\r\n            public void focusGained(FocusEvent e) {\r\n                if (\"nickname\".equals(nicknameField.getText())) {\r\n                    nicknameField.setText(\"\");\r\n                    nicknameField.setForeground(Color.BLACK);\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void focusLost(FocusEvent e) {\r\n                if (nicknameField.getText().isEmpty()) {\r\n                    nicknameField.setText(\"nickname\");\r\n                    nicknameField.setForeground(Color.GRAY);\r\n                }\r\n            }\r\n        });\r\n\r\n        nicknamepanel.add(nicknameField, BorderLayout.CENTER);\r\n        gbc.weightx = 1.0;\r\n        gbc.weighty = 0;\r\n        gbc.gridx = 0;\r\n        gbc.gridy = 2;\r\n        gbc.insets = new Insets(5, 15, 5, 15);\r\n        registerPanel.add(nicknamepanel, gbc);\r\n\r\n        // 회원가입 버튼\r\n        JButton submitButton = new JButton(\"Sign Up\");\r\n        submitButton.setBackground(Color.GRAY);//색을 바꾸든 이미지를 설정하든 바꿀것!!!\r\n        submitButton.setForeground(Color.BLACK);\r\n        submitButton.setBorderPainted(false);\r\n        submitButton.setFocusPainted(false);\r\n\r\n        gbc.weightx = 1.0;\r\n        gbc.weighty = 0;\r\n        gbc.gridx = 0;\r\n        gbc.gridy = 3;\r\n        gbc.insets = new Insets(5, 15, 5, 15);\r\n        registerPanel.add(submitButton, gbc);\r\n\r\n        // 회원가입 버튼 클릭 시 Firebase에 사용자 등록\r\n        submitButton.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                email = newidField.getText();\r\n                String password = new String(newpasswordField.getPassword());\r\n                String nickname = nicknameField.getText();\r\n                signUpWithFirebase(email,password,nickname,registerFrame);\r\n            }\r\n        });\r\n\r\n        registerFrame.add(registerPanel);\r\n\r\n        registerFrame.setVisible(true);\r\n    }\r\n\r\n    // Firebase 회원가입 처리\r\n    private void signUpWithFirebase(String email, String password,String nickname,JFrame Frame) {\r\n        OkHttpClient client = new OkHttpClient();\r\n        JSONObject json = new JSONObject();\r\n        JFrame frame = Frame;\r\n        json.put(\"email\", email);\r\n        json.put(\"password\", password);\r\n        json.put(\"returnSecureToken\", true);\r\n        RequestBody body = RequestBody.create(MediaType.parse(\"application/json; charset=utf-8\"), json.toString());\r\n        Request request = new Request.Builder()\r\n                .url(\"https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyCJDgbBXWSRoRUg3xVqsQrSEz1W5AFiE_Y\")\r\n                .post(body)\r\n                .build();\r\n\r\n        client.newCall(request).enqueue(new Callback() {\r\n            @Override\r\n            public void onFailure(Call call, IOException e) {\r\n                SwingUtilities.invokeLater(() -> JOptionPane.showMessageDialog(null, \"회원가입 실패: \" + e.getMessage()));\r\n            }\r\n\r\n            @Override\r\n            public void onResponse(Call call, Response response) throws IOException {\r\n                if (response.isSuccessful()) {\r\n                    String userId = response.body().string();\r\n                    saveUserNickname(userId, nickname);\r\n                    SwingUtilities.invokeLater(() -> {\r\n                        JOptionPane.showMessageDialog(null, \"회원가입 성공!\");\r\n                        frame.dispose();\r\n                    });\r\n                } else {\r\n                    SwingUtilities.invokeLater(() -> JOptionPane.showMessageDialog(null, \"회원가입 실패: 잘못된 정보\"));\r\n                }\r\n            }\r\n        });\r\n    }\r\n    public static String encodeEmail(String email) {\r\n        try {\r\n            System.err.println(\"이메일 변환성공\");\r\n            return URLEncoder.encode(email, \"UTF-8\");\r\n        } catch (UnsupportedEncodingException e) {\r\n            e.printStackTrace();\r\n            System.err.println(\"이메일변환실패\");\r\n            return email; // 인코딩 실패 시 원본 이메일을 그대로 반환\r\n        }\r\n    }\r\n\r\n    // 닉네임 저장\r\n    private void saveUserNickname(String userId, String nickname) {\r\n        OkHttpClient client = new OkHttpClient();\r\n        JSONObject json = new JSONObject(userId);\r\n        realUserId = json.getString(\"localId\");\r\n        encodeemail1 = email.split(\"@\")[0];\r\n        System.err.println(encodeemail1);\r\n        json.put(\"nickname\", nickname);\r\n        // 사용자 ID를 키로 사용하여 닉네임 저장\r\n        RequestBody body = RequestBody.create(MediaType.parse(\"application/json; charset=utf-8\"), json.toString());\r\n        Request request = new Request.Builder()\r\n                .url(\"https://shootthedock-default-rtdb.firebaseio.com/users/\" + encodeemail1 + \"/\"+ \"userinfo\"+\".json\")\r\n                .put(body) // POST 메소드 사용\r\n                .build();\r\n\r\n        client.newCall(request).enqueue(new Callback() {\r\n            @Override\r\n            public void onFailure(Call call, IOException e) {\r\n                System.err.println(\"닉네임 저장 실패: \" + e.getMessage());\r\n            }\r\n\r\n            @Override\r\n            public void onResponse(Call call, Response response) throws IOException {\r\n                if (!response.isSuccessful()) {\r\n                    System.err.println(\"닉네임 저장 실패: \" + response.code());\r\n                    System.err.println(userId);\r\n                }else{\r\n                    System.err.println(userId);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/kr/jbnu/se/std/LoginClient.java b/src/main/java/kr/jbnu/se/std/LoginClient.java
--- a/src/main/java/kr/jbnu/se/std/LoginClient.java	(revision 10f37eb5a6c9b86d00fbb3d9d09ed12dfc520d18)
+++ b/src/main/java/kr/jbnu/se/std/LoginClient.java	(date 1729568903783)
@@ -361,17 +361,6 @@
         gbc.fill = GridBagConstraints.HORIZONTAL;
         gbc.insets = new Insets(5, 5, 5, 5);
 
-        // 이메일 라벨 및 입력 필드
-        /*JLabel emailLabel = new JLabel("Email:");
-        gbc.gridx = 0;
-        gbc.gridy = 0;
-        registerPanel.add(emailLabel, gbc);
-
-        JTextField emailField = new JTextField(15);
-        gbc.gridx = 1;
-        gbc.gridy = 0;
-        registerPanel.add(emailField, gbc);*/
-
         // new ID 라벨 및 입력 필드
         JPanel newidpanel = new JPanel();
         newidpanel.setBackground(new Color(233, 233, 233));
@@ -461,16 +450,6 @@
 
         registerPanel.add(newpasswordpanel, gbc);
 
-        /*JLabel nicknameLabel = new JLabel("Nickname:");
-        gbc.gridx = 0;
-        gbc.gridy = 3; // 비밀번호 아래에 배치
-        registerPanel.add(nicknameLabel, gbc);
-
-        JTextField nicknameField = new JTextField(15);
-        gbc.gridx = 0;
-        gbc.gridy = 4; // 비밀번호 아래에 배치
-        registerPanel.add(nicknameField, gbc);*/
-
         // Nickname 라벨 및 입력 필드
         JPanel nicknamepanel = new JPanel();
         nicknamepanel.setBackground(new Color(233, 233, 233)); //색을 바꾸든 이미지를 설정하든 바꿀것!!!
@@ -617,7 +596,4 @@
             }
         });
     }
-
-
-
 }
\ No newline at end of file
