Index: src/main/java/kr/jbnu/se/std/Framework.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package kr.jbnu.se.std;\r\n\r\nimport com.google.auth.oauth2.GoogleCredentials;\r\nimport com.google.common.util.concurrent.MoreExecutors;\r\nimport com.google.firebase.FirebaseApp;\r\nimport com.google.firebase.FirebaseOptions;\r\nimport com.google.firebase.auth.FirebaseAuth;\r\nimport com.google.firebase.auth.FirebaseAuthException;\r\nimport com.google.firebase.auth.UserRecord;\r\nimport com.google.firebase.database.*;\r\nimport com.google.firebase.database.core.AuthTokenProvider;\r\nimport com.google.gson.JsonObject;\r\nimport jdk.jfr.internal.tool.Main;\r\nimport okhttp3.*;\r\nimport org.json.JSONArray;\r\nimport org.json.JSONException;\r\nimport org.json.JSONObject;\r\n\r\nimport java.awt.*;\r\nimport java.awt.event.ActionEvent;\r\nimport java.awt.event.ActionListener;\r\nimport java.awt.event.KeyEvent;\r\nimport java.awt.event.MouseEvent;\r\nimport java.awt.image.BufferedImage;\r\nimport java.io.File;\r\nimport java.io.FileInputStream;\r\nimport java.io.IOException;\r\nimport java.net.URL;\r\nimport java.util.HashSet;\r\nimport java.util.Iterator;\r\nimport java.util.Set;\r\nimport java.util.concurrent.Executors;\r\nimport java.util.concurrent.ScheduledExecutorService;\r\nimport java.util.concurrent.TimeUnit;\r\nimport java.util.logging.Level;\r\nimport java.util.logging.Logger;\r\nimport javax.imageio.ImageIO;\r\nimport javax.sound.sampled.*;\r\nimport javax.swing.*;\r\nimport com.google.firebase.database.FirebaseDatabase;\r\n\r\n/**\r\n * kr.jbnu.se.std.Framework that controls the game (kr.jbnu.se.std.Game.java) that created it, update it and draw it on the screen.\r\n *\r\n * @author www.gametutorial.net\r\n */\r\n\r\npublic class Framework extends Canvas {\r\n\r\n    private boolean isLoginSuccessful = false; // 로그인 성공 여부를 관리\r\n    private LoginClient loginClient;\r\n    /**\r\n     * Width of the frame.\r\n     */\r\n    public static int frameWidth;\r\n    /**\r\n     * Height of the frame.\r\n     */\r\n    public static int frameHeight;\r\n\r\n    /**\r\n     * Time of one second in nanoseconds.\r\n     * 1 second = 1 000 000 000 nanoseconds\r\n     */\r\n    public static final long secInNanosec = 1000000000L;\r\n\r\n    /**\r\n     * Time of one millisecond in nanoseconds.\r\n     * 1 millisecond = 1 000 000 nanoseconds\r\n     */\r\n    public static final long milisecInNanosec = 1000000L;\r\n\r\n    /**\r\n     * FPS - Frames per second\r\n     * How many times per second the game should update?\r\n     */\r\n    private final int GAME_FPS = 60;\r\n    /**\r\n     * Pause between updates. It is in nanoseconds.\r\n     */\r\n    private final long GAME_UPDATE_PERIOD = secInNanosec / GAME_FPS;\r\n\r\n    /**\r\n     * Possible states of the game\r\n     */\r\n    public static enum GameState{STARTING, VISUALIZING, GAME_CONTENT_LOADING,LOGIN,MAIN_MENU, OPTIONS, PLAYING, GAMEOVER,MAINPAGE, ROUND, PAUSE, ENDING, DESTROYED}\r\n    /**\r\n     * Current state of the game\r\n     */\r\n    public static GameState gameState;\r\n\r\n    /**\r\n     * Elapsed game time in nanoseconds.\r\n     */\r\n\r\n    private final ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);\r\n    private final ScheduledExecutorService scheduler1 = Executors.newScheduledThreadPool(1);\r\n    private final ScheduledExecutorService scheduler2 = Executors.newScheduledThreadPool(1);\r\n    private final ScheduledExecutorService scheduler3 = Executors.newScheduledThreadPool(1);\r\n    private final Set<String> existingFriends = new HashSet<>(); // 중복 방지를 위한 Set\r\n    private final Set<String> existingFriendsinvite = new HashSet<>(); // 중복 방지를 위한 Set\r\n\r\n    private long gameTime;\r\n    // It is used for calculating elapsed time.\r\n    private long lastTime;\r\n\r\n    // The actual game\r\n    private Game game;\r\n    private Thread gameThread;\r\n    private Window window;\r\n    private String userid;\r\n    private static final String DATABASE_URL = \"https://shootthedock-default-rtdb.firebaseio.com\";\r\n    private OkHttpClient client;\r\n    private String email;\r\n    private String nickname;\r\n    private String idToken;\r\n    private String password;\r\n    private String realemail;\r\n    private FirebaseAuth auth;\r\n    private DatabaseReference databaseReference;\r\n    private MainClient MainV2;\r\n    private AddFriends addFriends;\r\n    private DatabaseReference chatRef;\r\n    private final Set<String> receivedMessageKeys = new HashSet<>();\r\n    private final Set<String> receivedMessageKeysF = new HashSet<>(); // 이미 받은 메시지의 키를 저장할 Set\r\n    private ChatwithFriends chatwithFriends;\r\n    private String selectnickname;\r\n    private int money;\r\n    private InviteFriends inviteFriends;\r\n    private ShopWindow shopWindow;\r\n    private InventoryWindow inventoryWindow;\r\n    private RankWindow rankWindow;\r\n    private String inventoryimage;\r\n    private String whatgun;\r\n    public FirebaseClient firebaseClient;\r\n    public FriendManager friendManager;\r\n    private Clip clip;\r\n\r\n    private static Framework instance;\r\n\r\n    public MessageManager messageManager;\r\n\r\n    public MessageReceiver messageReceiver;\r\n\r\n    public MessageReceiver friendmessageReceiver;\r\n\r\n    public InventoryManager inventoryManager;\r\n    private FirebaseManager firebaseManager;\r\n    private AudioManager audioManager;\r\n    private WindowManager windowManager;\r\n\r\n    /**\r\n     * Image for menu.\r\n     */\r\n    private BufferedImage shootTheDuckMenuImg;\r\n\r\n\r\n    public Framework (Window window)\r\n    {\r\n        super();\r\n        initializeFirebase();\r\n        firebaseManager = new FirebaseManager(\"shootthedock-firebase-adminsdk-304qc-09167d3967\",DATABASE_URL);\r\n        this.window = window;\r\n        windowManager = new WindowManager(this);\r\n        audioManager = new AudioManager();\r\n        gameState = GameState.LOGIN;\r\n        client = new OkHttpClient();\r\n        whatgun = \"기본권총\";\r\n        databaseReference = FirebaseDatabase.getInstance().getReference();\r\n        firebaseClient = new FirebaseClient(email);\r\n    }\r\n    public void Invitewindow(){\r\n            inviteFriends = new InviteFriends(this);\r\n            startRecevingFriendInvite();\r\n            if(inviteFriends == null){\r\n                stopReceivingFriendInvite();\r\n            }\r\n    }\r\n\r\n    public void inventoryWindow(){\r\n        inventoryWindow = new InventoryWindow(this);\r\n        inventoryManager= new InventoryManager(email,idToken,inventoryWindow,money);\r\n        inventoryManager.startReceivingInventory();\r\n        if(inventoryWindow == null){\r\n            inventoryManager.stopReceivingInventory();\r\n        }\r\n    }\r\n    public void stopfriendadd(){\r\n        addFriends = null;\r\n    }\r\n\r\n    public void stopfriends(){\r\n        inviteFriends = null;\r\n    }\r\n    public void stoploginClinet(){\r\n        loginClient = null;\r\n    }\r\n\r\n    public void stopshop(){\r\n        shopWindow = null;\r\n    }\r\n\r\n    public void stoprank() { rankWindow = null; }\r\n\r\n    public void stopmain(){\r\n        MainV2 = null;\r\n    }\r\n\r\n    public void RankWindow(){\r\n        RankWindow rankWindow = new RankWindow();\r\n        rankWindow.setVisible(true);\r\n    }\r\n\r\n    public void Shopwindowopen(){\r\n        shopWindow = new ShopWindow(this);\r\n        inventoryManager= new InventoryManager(email,idToken,shopWindow,money);\r\n\r\n    }\r\n    public void ChatFriendswindow(String nickname){\r\n        chatwithFriends = new ChatwithFriends(this);\r\n        chatwithFriends.setFriends(nickname);\r\n        selectnickname = chatwithFriends.getFriends();\r\n        friendmessageReceiver = new MessageReceiver(idToken,chatwithFriends,this.nickname,selectnickname);\r\n        friendmessageReceiver.startReceivingFriendMessages();\r\n\r\n        if(chatwithFriends == null){\r\n            friendmessageReceiver.stopReceivingFriendMessages();\r\n        }\r\n    }\r\n\r\n\r\n    private void playBackgroundMusic(String filePath) {\r\n        try {\r\n            AudioInputStream audioStream = AudioSystem.getAudioInputStream(new File(filePath));\r\n            clip = AudioSystem.getClip();\r\n            clip.open(audioStream);\r\n            clip.loop(Clip.LOOP_CONTINUOUSLY); // 무한 반복\r\n        } catch (UnsupportedAudioFileException | IOException | LineUnavailableException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public void playActiveSound(String filePath){\r\n        try{\r\n            AudioInputStream audioStream = AudioSystem.getAudioInputStream(new File(filePath));\r\n            clip = AudioSystem.getClip();\r\n            clip.open(audioStream);\r\n            clip.start();\r\n        }catch(UnsupportedAudioFileException | IOException | LineUnavailableException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public void stopBackgroundMusic() {\r\n        if (clip != null && clip.isRunning()) {\r\n            clip.stop();\r\n        }\r\n    }\r\n\r\n\r\n\r\n    public void frendsAddwindows(){\r\n        addFriends = new AddFriends(this);\r\n    }\r\n\r\n\r\n    public void stopReceivingFriendschat() {\r\n        scheduler1.shutdownNow();\r\n    }\r\n\r\n    public void startRecevingFriendInvite(){\r\n        scheduler2.scheduleAtFixedRate(this::receiveFriendsInvite, 0, 1, TimeUnit.SECONDS);\r\n    }\r\n\r\n    public void stopReceivingFriendInvite() {\r\n        scheduler2.shutdownNow();\r\n    }\r\n    public void receiveFriendsInvite() {\r\n        OkHttpClient client = new OkHttpClient();\r\n        String url = \"https://shootthedock-default-rtdb.firebaseio.com/friend/\" + nickname + \"/userinfo/friendswant.json?auth=\" + idToken;\r\n        Request request = new Request.Builder()\r\n                .url(url)\r\n                .get()\r\n                .build();\r\n        client.newCall(request).enqueue(new Callback() {\r\n            @Override\r\n            public void onFailure(Call call, IOException e) {\r\n                SwingUtilities.invokeLater(() -> {\r\n                    System.err.println(\"친구 목록 가져오기 실패: \" + e.getMessage());\r\n                });\r\n            }\r\n            @Override\r\n            public void onResponse(Call call, Response response) throws IOException {\r\n                if (response.isSuccessful()) {\r\n                    String responseBody = response.body().string();\r\n                    try {\r\n                        JSONObject jsonObject = new JSONObject(responseBody);\r\n                        // JSON 객체가 비어있는지 확인\r\n                        if (jsonObject.length() == 0) {\r\n                            SwingUtilities.invokeLater(() -> {\r\n                                System.out.println(\"친구 신청이 없습니다.\");\r\n                            });\r\n                            return;\r\n                        }\r\n                        // 친구 신청 목록 출력\r\n                        for (String key : jsonObject.keySet()) {\r\n                            JSONObject inviteObject = jsonObject.getJSONObject(key); // 친구 신청 객체\r\n                            String friendNickname = inviteObject.getString(\"nickname\"); // 친구의 닉네임\r\n                            // 중복된 친구 신청이 아닌 경우에만 추가\r\n                            if (!existingFriendsinvite.contains(friendNickname)) {\r\n                                existingFriendsinvite.add(friendNickname); // 새로운 친구 신청 추가\r\n                                SwingUtilities.invokeLater(() -> {\r\n                                    inviteFriends.setFriends(friendNickname + \"\\n\"); // 친구 목록에 추가\r\n                                });\r\n                            }\r\n                        }\r\n                    } catch (JSONException e) {\r\n                        e.printStackTrace();\r\n                        SwingUtilities.invokeLater(() -> {\r\n                            System.err.println(\"친구 신청 목록 처리 중 오류 발생: \" + e.getMessage());\r\n                            stopReceivingFriendInvite();\r\n                        });\r\n                    }\r\n                } else {\r\n                    SwingUtilities.invokeLater(() -> {\r\n                        System.err.println(\"친구 목록 가져오기 실패: \" + response.message());\r\n                    });\r\n                }\r\n            }\r\n        });\r\n    }\r\n    public void deleteFriendInvite(String nicknameToDelete) {\r\n        OkHttpClient client = new OkHttpClient();\r\n        // \"nickname\" 키를 사용하여 friendswant 밑의 데이터를 삭제하는 URL\r\n        String url = \"https://shootthedock-default-rtdb.firebaseio.com/friend/\" + nickname + \"/userinfo/friendswant/\" + nicknameToDelete + \"/nickname.json?auth=\" + idToken;\r\n\r\n        Request request = new Request.Builder()\r\n                .url(url)\r\n                .delete()\r\n                .build();\r\n\r\n        client.newCall(request).enqueue(new Callback() {\r\n            @Override\r\n            public void onFailure(Call call, IOException e) {\r\n                SwingUtilities.invokeLater(() -> {\r\n                    System.err.println(\"친구 삭제 실패: \" + e.getMessage());\r\n                });\r\n            }\r\n\r\n            @Override\r\n            public void onResponse(Call call, Response response) throws IOException {\r\n                if (response.isSuccessful()) {\r\n                    SwingUtilities.invokeLater(() -> {\r\n                        System.out.println(\"친구 삭제 성공: \" + nicknameToDelete);\r\n                        // 여기서 UI 업데이트 등 추가 작업 가능\r\n                    });\r\n                } else {\r\n                    SwingUtilities.invokeLater(() -> {\r\n                        System.err.println(\"친구 삭제 실패: \" + response.message());\r\n                    });\r\n                }\r\n            }\r\n        });\r\n    }\r\n    public void setGun(String gun){\r\n        whatgun = gun;\r\n    }\r\n    public String getGun(){\r\n        return whatgun;\r\n    }\r\n    private void initializeFirebase() {\r\n        try {\r\n            FileInputStream serviceAccount = new FileInputStream(\"src/main/shootthedock-firebase-adminsdk-304qc-09167d3967.json\");\r\n\r\n            FirebaseOptions options = new FirebaseOptions.Builder()\r\n                    .setCredentials(GoogleCredentials.fromStream(serviceAccount))\r\n                    .setDatabaseUrl(\"https://shootthedock-default-rtdb.firebaseio.com\")\r\n                    .build();\r\n\r\n            FirebaseApp.initializeApp(options);\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n            JOptionPane.showMessageDialog(this, \"Firebase 초기화 실패: \" + e.getMessage());\r\n        }\r\n    }\r\n    private void loginWithFirebase(String email, String password) {\r\n        OkHttpClient client = new OkHttpClient();\r\n        JSONObject json = new JSONObject();\r\n        json.put(\"email\", email);\r\n        json.put(\"password\", password);\r\n        json.put(\"returnSecureToken\", true);\r\n        RequestBody body = RequestBody.create(MediaType.parse(\"application/json; charset=utf-8\"), json.toString());\r\n        Request request = new Request.Builder()\r\n                .url(\"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyCJDgbBXWSRoRUg3xVqsQrSEz1W5AFiE_Y\")\r\n                .post(body)\r\n                .build();\r\n\r\n        client.newCall(request).enqueue(new Callback() {\r\n            @Override\r\n            public void onFailure(Call call, IOException e) {\r\n                SwingUtilities.invokeLater(() -> JOptionPane.showMessageDialog(null, \"로그인 실패: \" + e.getMessage()));\r\n            }\r\n\r\n            @Override\r\n            public void onResponse(Call call, Response response) throws IOException {\r\n                if (response.isSuccessful()) {\r\n                    SwingUtilities.invokeLater(() -> {\r\n                        String responseBody;\r\n                        try {\r\n                            responseBody = response.body().string();\r\n                            JSONObject jsonResponse = new JSONObject(responseBody);\r\n                            // ID 토큰 가져오기\r\n                            idToken = jsonResponse.getString(\"idToken\");\r\n                            System.out.println(\"ID 토큰: \" + idToken);\r\n                            // 사용자의 닉네임을 가져옵니다.\r\n                            getNickname(idToken);\r\n                            getMoney();\r\n                        } catch (IOException e) {\r\n                            throw new RuntimeException(e);\r\n                        }\r\n                    });\r\n                } else {\r\n                    SwingUtilities.invokeLater(() -> JOptionPane.showMessageDialog(null, \"로그인 실패: 잘못된 자격 증명\"));\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    public void getMoney() {\r\n        OkHttpClient client = new OkHttpClient();\r\n        String url = \"https://shootthedock-default-rtdb.firebaseio.com/users/\" + email + \"/userinfo.json?auth=\" + idToken;\r\n\r\n        Request request = new Request.Builder()\r\n                .url(url)\r\n                .get()\r\n                .build();\r\n\r\n        client.newCall(request).enqueue(new Callback() {\r\n            @Override\r\n            public void onFailure(Call call, IOException e) {\r\n                SwingUtilities.invokeLater(() -> {\r\n                    System.err.println(\"데이터 가져오기 실패: \" + e.getMessage());\r\n                });\r\n            }\r\n\r\n            @Override\r\n            public void onResponse(Call call, Response response) throws IOException {\r\n                if (response.isSuccessful()) {\r\n                    String responseBody = response.body().string();\r\n                    JSONObject jsonResponse = new JSONObject(responseBody);\r\n\r\n                    if (jsonResponse.has(\"money\")) {\r\n                        money = jsonResponse.getInt(\"money\");\r\n                        System.out.println(\"money: \" + money);\r\n                        windowManager.getMainWindow().setMoney(money);\r\n                    } else {\r\n                        System.err.println(\"사용자 정보가 존재하지 않습니다.\");\r\n                    }\r\n                } else {\r\n                    SwingUtilities.invokeLater(() -> {\r\n                        System.err.println(\"데이터 가져오기 실패: \" + response.message());\r\n                    });\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    public void saveScore(int score) {\r\n        OkHttpClient client = new OkHttpClient();\r\n\r\n        // Step 1: 사용자 정보에 점수 저장\r\n        String uniqueKey = String.valueOf(System.currentTimeMillis()); // 시간 기반의 고유 키 생성\r\n        JSONObject userJson = new JSONObject();\r\n        try {\r\n            userJson.put(uniqueKey, score); // 시간 기반의 고유 키 아래에 점수만 저장\r\n        } catch (JSONException e) {\r\n            System.err.println(\"JSON 생성 오류: \" + e.getMessage());\r\n            return;\r\n        }\r\n\r\n        RequestBody userBody = RequestBody.create(MediaType.parse(\"application/json; charset=utf-8\"), userJson.toString());\r\n        Request userRequest = new Request.Builder()\r\n                .url(\"https://shootthedock-default-rtdb.firebaseio.com/users/\" + email + \"/userinfo/scores.json?auth=\" + idToken)\r\n                .patch(userBody) // 데이터를 추가할 때는 PATCH를 사용하여 기존 데이터를 유지\r\n                .build();\r\n\r\n        client.newCall(userRequest).enqueue(new Callback() {\r\n            @Override\r\n            public void onFailure(Call call, IOException e) {\r\n                System.err.println(\"사용자 정보에 점수 저장 실패: \" + e.getMessage());\r\n            }\r\n\r\n            @Override\r\n            public void onResponse(Call call, Response response) throws IOException {\r\n                if (response.isSuccessful()) {\r\n                    System.out.println(\"사용자 정보에 점수 저장 성공\");\r\n\r\n                    // Step 2: 최고 점수 확인 및 리더보드 업데이트\r\n                    checkAndSaveLeaderboard(score);\r\n                } else {\r\n                    System.err.println(\"사용자 정보에 점수 저장 실패: \" + response.code());\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    public void saveMoney(int money) {\r\n        OkHttpClient client = new OkHttpClient();\r\n        money = this.money + money;\r\n        // Step 1: 사용자 정보에 점수 저장\r\n        JSONObject userJson = new JSONObject();\r\n        userJson.put(\"money\", money);\r\n\r\n        RequestBody userBody = RequestBody.create(MediaType.parse(\"application/json; charset=utf-8\"), userJson.toString());\r\n        Request userRequest = new Request.Builder()\r\n                .url(\"https://shootthedock-default-rtdb.firebaseio.com/users/\" + email + \"/userinfo.json?auth=\" + idToken)\r\n                .patch(userBody)\r\n                .build();\r\n\r\n        client.newCall(userRequest).enqueue(new Callback() {\r\n            @Override\r\n            public void onFailure(Call call, IOException e) {\r\n                System.err.println(\"사용자 정보에 점수 저장 실패: \" + e.getMessage());\r\n            }\r\n\r\n            @Override\r\n            public void onResponse(Call call, Response response) throws IOException {\r\n                if (response.isSuccessful()) {\r\n                    System.out.println(\"사용자 정보에 점수 저장 성공\");\r\n                } else {\r\n                    System.err.println(\"사용자 정보에 점수 저장 실패: \" + response.code());\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    private void checkAndSaveLeaderboard(int latestScore) {\r\n        OkHttpClient client = new OkHttpClient();\r\n\r\n        // 사용자 정보에서 모든 점수를 가져옴\r\n        String userScoresUrl = \"https://shootthedock-default-rtdb.firebaseio.com/users/\" + email + \"/userinfo/scores.json?auth=\" + idToken;\r\n        Request request = new Request.Builder()\r\n                .url(userScoresUrl)\r\n                .get()\r\n                .build();\r\n\r\n        client.newCall(request).enqueue(new Callback() {\r\n            @Override\r\n            public void onFailure(Call call, IOException e) {\r\n                System.err.println(\"점수 목록 가져오기 실패: \" + e.getMessage());\r\n            }\r\n\r\n            @Override\r\n            public void onResponse(Call call, Response response) throws IOException {\r\n                if (response.isSuccessful()) {\r\n                    String responseBody = response.body().string();\r\n\r\n                    // 응답이 비어 있거나 유효하지 않은 경우 처리\r\n                    if (responseBody == null || responseBody.trim().isEmpty()) {\r\n                        System.err.println(\"응답이 비어있거나 잘못되었습니다.\");\r\n                        return;\r\n                    }\r\n\r\n                    try {\r\n                        int highestScore = latestScore;\r\n\r\n                        // 응답이 JSON 객체인지 확인\r\n                        JSONObject scoresObject = new JSONObject(responseBody);\r\n\r\n                        // 객체에서 모든 점수 탐색 (타임스탬프를 키로 사용)\r\n                        Iterator<String> keys = scoresObject.keys();\r\n                        while (keys.hasNext()) {\r\n                            String key = keys.next();\r\n                            int score = scoresObject.getInt(key);\r\n                            if (score > highestScore) {\r\n                                highestScore = score;\r\n                            }\r\n                        }\r\n\r\n                        // 리더보드에 최고 점수가 있는지 확인 후 없으면 저장\r\n                        saveToLeaderboardIfHighest(highestScore);\r\n\r\n                    } catch (JSONException e) {\r\n                        System.err.println(\"JSON 파싱 오류: \" + e.getMessage());\r\n                    }\r\n                } else {\r\n                    System.err.println(\"점수 목록 가져오기 실패: \" + response.code());\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n\r\n\r\n    private void saveToLeaderboardIfHighest(int highestUserScore) {\r\n        OkHttpClient client = new OkHttpClient();\r\n\r\n        // 리더보드 URL 정의\r\n        String leaderboardUrl = \"https://shootthedock-default-rtdb.firebaseio.com/leaderboard.json?auth=\" + idToken;\r\n\r\n        // 리더보드 정보를 GET 요청으로 가져옴\r\n        Request getLeaderboardRequest = new Request.Builder()\r\n                .url(leaderboardUrl)\r\n                .get()\r\n                .build();\r\n\r\n        client.newCall(getLeaderboardRequest).enqueue(new Callback() {\r\n            @Override\r\n            public void onFailure(Call call, IOException e) {\r\n                System.err.println(\"리더보드 점수 가져오기 실패: \" + e.getMessage());\r\n            }\r\n\r\n            @Override\r\n            public void onResponse(Call call, Response response) throws IOException {\r\n                if (response.isSuccessful()) {\r\n                    String responseBody = response.body().string();\r\n                    try {\r\n                        boolean isNewHighScore = true;\r\n\r\n                        // 리더보드가 비어 있지 않다면 현재 최고 점수 확인\r\n                        if (!responseBody.trim().isEmpty() && !responseBody.equals(\"{}\")) {\r\n                            JSONObject leaderboardObject = new JSONObject(responseBody);\r\n                            if (leaderboardObject.has(nickname)) {\r\n                                // 자신의 점수를 찾았으면, 기존 점수와 비교\r\n                                int existingScore = leaderboardObject.getJSONObject(nickname).getInt(\"score\");\r\n                                if (existingScore >= highestUserScore) {\r\n                                    isNewHighScore = false;\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        // 새로운 최고 점수라면 리더보드에 추가 또는 갱신\r\n                        if (isNewHighScore) {\r\n                            addToLeaderboard(highestUserScore);\r\n                        }\r\n                    } catch (JSONException e) {\r\n                        System.err.println(\"JSON 파싱 오류: \" + e.getMessage());\r\n                    }\r\n                } else {\r\n                    System.err.println(\"리더보드 점수 가져오기 실패: \" + response.code());\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    private void addToLeaderboard(int highestUserScore) {\r\n        OkHttpClient client = new OkHttpClient();\r\n\r\n        // 리더보드 URL 정의, 닉네임을 키로 사용\r\n        String leaderboardUrl = \"https://shootthedock-default-rtdb.firebaseio.com/leaderboard/\" + nickname + \".json?auth=\" + idToken;\r\n\r\n        // 리더보드에 저장할 JSON 객체 생성\r\n        JSONObject newEntry = new JSONObject();\r\n        try {\r\n            newEntry.put(\"nickname\", nickname);\r\n            newEntry.put(\"score\", highestUserScore);\r\n        } catch (JSONException e) {\r\n            System.err.println(\"JSON 생성 오류: \" + e.getMessage());\r\n            return;\r\n        }\r\n\r\n        // 새로운 점수 추가를 위한 PUT 요청\r\n        RequestBody body = RequestBody.create(MediaType.parse(\"application/json; charset=utf-8\"), newEntry.toString());\r\n        Request updateRequest = new Request.Builder()\r\n                .url(leaderboardUrl) // 닉네임을 키로 사용해 저장\r\n                .put(body)\r\n                .build();\r\n\r\n        client.newCall(updateRequest).enqueue(new Callback() {\r\n            @Override\r\n            public void onFailure(Call call, IOException e) {\r\n                System.err.println(\"리더보드 업데이트 실패: \" + e.getMessage());\r\n            }\r\n\r\n            @Override\r\n            public void onResponse(Call call, Response response) throws IOException {\r\n                if (response.isSuccessful()) {\r\n                    System.out.println(\"리더보드 업데이트 성공: 최고 점수 \" + highestUserScore);\r\n                } else {\r\n                    System.err.println(\"리더보드 업데이트 실패: \" + response.code());\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    public void getNickname(String idToken) {\r\n        OkHttpClient client = new OkHttpClient();\r\n        String url = \"https://shootthedock-default-rtdb.firebaseio.com/users/\" + email + \"/userinfo.json?auth=\" + idToken;\r\n\r\n        Request request = new Request.Builder()\r\n                .url(url)\r\n                .get()\r\n                .build();\r\n\r\n        client.newCall(request).enqueue(new Callback() {\r\n            @Override\r\n            public void onFailure(Call call, IOException e) {\r\n                SwingUtilities.invokeLater(() -> {\r\n                    System.err.println(\"데이터 가져오기 실패: \" + e.getMessage());\r\n                });\r\n            }\r\n\r\n            @Override\r\n            public void onResponse(Call call, Response response) throws IOException {\r\n                if (response.isSuccessful()) {\r\n                    String responseBody = response.body().string();\r\n                    JSONObject jsonResponse = new JSONObject(responseBody);\r\n\r\n                    if (jsonResponse.has(\"nickname\")) {\r\n                        nickname = jsonResponse.getString(\"nickname\");\r\n                        System.out.println(\"Nickname: \" + nickname);\r\n                        windowManager.getMainWindow().setNickname(nickname);\r\n                        friendManager = new FriendManager(email,nickname);\r\n                        messageManager = new MessageManager(nickname);\r\n                        messageReceiver = new MessageReceiver(idToken,windowManager.getMainWindow(),email);\r\n                        messageReceiver.startReceivingMessages();\r\n                    } else {\r\n                        System.err.println(\"사용자 정보가 존재하지 않습니다.\");\r\n                    }\r\n                } else {\r\n                    SwingUtilities.invokeLater(() -> {\r\n                        System.err.println(\"데이터 가져오기 실패: \" + response.message());\r\n                    });\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    public static Framework getInstance() {\r\n        if (instance == null) {\r\n            instance = new Framework(new Window());\r\n        }\r\n        return instance;\r\n    }\r\n\r\n    public void onLoginSuccess() {\r\n        isLoginSuccessful = true;\r\n        loginWithFirebase(realemail, password);\r\n        windowManager.openMainWindow();\r\n        stoploginClinet();\r\n        playBackgroundMusic(\"src/main/resources/sounds/backgroundonMain.wav\");\r\n    }\r\n\r\n    public void onGameStart(){\r\n        windowManager.getMainWindow().dispose();\r\n        stopBackgroundMusic();\r\n        window.onLoginSuccess();\r\n        gameState = GameState.VISUALIZING;\r\n        this.setVisible(true);\r\n        gameThread = new Thread() {\r\n            @Override\r\n            public void run(){\r\n                GameLoop();\r\n            }\r\n        };\r\n        gameThread.start();\r\n    }\r\n    /**\r\n     * Set variables and objects.\r\n     * This method is intended to set the variables and objects for this class, variables and objects for the actual game can be set in kr.jbnu.se.std.Game.java.\r\n     */\r\n    private void Initialize()\r\n    {\r\n        // 화면 크기 정보를 가져옵니다.\r\n        GraphicsDevice gd = GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice();\r\n        Rectangle screenSize = gd.getDefaultConfiguration().getBounds();\r\n        frameWidth = (int) screenSize.getWidth();\r\n        frameHeight = (int) screenSize.getHeight();\r\n        this.setSize(frameWidth, frameHeight);\r\n    }\r\n\r\n\r\n    /**\r\n     * Load files - images, sounds, ...\r\n     * This method is intended to load files for this class, files for the actual game can be loaded in kr.jbnu.se.std.Game.java.\r\n     */\r\n    private void LoadContent()\r\n    {\r\n        try\r\n        {\r\n            URL shootTheDuckMenuImgUrl = this.getClass().getResource(\"/images/menu.jpg\");\r\n            shootTheDuckMenuImg = ImageIO.read(shootTheDuckMenuImgUrl);\r\n\r\n            // 이미지가 화면 크기에 맞게 조정됩니다.\r\n            shootTheDuckMenuImg = resizeImage(shootTheDuckMenuImg, frameWidth, frameHeight);\r\n        }\r\n        catch (IOException ex) {\r\n            Logger.getLogger(Framework.class.getName()).log(Level.SEVERE, null, ex);\r\n        }\r\n    }\r\n    public void getEmail(String email){\r\n        realemail = email;\r\n    }\r\n    public void getPassword(String password){\r\n        this.password = password;\r\n    }\r\n    public void getIdtoken(String idToken){\r\n        this.idToken = idToken;\r\n    }\r\n    public void getUserId(String userId){\r\n        email = userId;\r\n\r\n    }\r\n    private BufferedImage resizeImage(BufferedImage originalImage, int targetWidth, int targetHeight) {\r\n        int originalWidth = originalImage.getWidth();\r\n        int originalHeight = originalImage.getHeight();\r\n        // 이미지의 가로와 세로 비율을 계산합니다.\r\n        float aspectRatio = (float) originalWidth / originalHeight;\r\n        int newWidth;\r\n        int newHeight;\r\n        // 화면의 비율에 맞게 이미지를 조정합니다.\r\n        if (targetWidth / (float) targetHeight > aspectRatio) {\r\n            newWidth = (int) (targetHeight * aspectRatio);\r\n            newHeight = targetHeight;\r\n        } else {\r\n            newWidth = targetWidth;\r\n            newHeight = (int) (targetWidth / aspectRatio);\r\n        }\r\n        BufferedImage resizedImage = new BufferedImage(newWidth, newHeight, originalImage.getType());\r\n        Graphics2D g = resizedImage.createGraphics();\r\n        g.drawImage(originalImage, 0, 0, newWidth, newHeight, null);\r\n        g.dispose();\r\n        return resizedImage;\r\n    }\r\n    /**\r\n     * In specific intervals of time (GAME_UPDATE_PERIOD) the game/logic is updated and then the game is drawn on the screen.\r\n     */\r\n    private void GameLoop()\r\n    {\r\n        // This two variables are used in VISUALIZING state of the game. We used them to wait some time so that we get correct frame/window resolution.\r\n        long visualizingTime = 0, lastVisualizingTime = System.nanoTime();\r\n        // This variables are used for calculating the time that defines for how long we should put threat to sleep to meet the GAME_FPS.\r\n        long beginTime, timeTaken, timeLeft;\r\n        while(true)\r\n        {\r\n            beginTime = System.nanoTime();\r\n            switch (gameState)\r\n            {\r\n                case ENDING:\r\n                    gameTime += System.nanoTime() - lastTime;\r\n                    game.UpdateGame(gameTime, mousePosition());\r\n                    lastTime = System.nanoTime();\r\n                    break;\r\n                case PAUSE:\r\n                    gameTime += System.nanoTime() - lastTime;\r\n                    game.UpdateGame(gameTime, mousePosition());\r\n                    lastTime = System.nanoTime();\r\n                    break;\r\n                case MAINPAGE:\r\n                    gameState = GameState.STARTING;\r\n                    break;\r\n                case PLAYING:\r\n                    gameTime += System.nanoTime() - lastTime;\r\n                    game.UpdateGame(gameTime, mousePosition());\r\n                    lastTime = System.nanoTime();\r\n                    break;\r\n                case GAMEOVER:\r\n                    gameTime += System.nanoTime() - lastTime;\r\n                    lastTime = System.nanoTime();\r\n                    break;\r\n                case LOGIN:\r\n                    if (isLoginSuccessful) {\r\n                        gameState = GameState.MAINPAGE;\r\n                    }\r\n                    break;\r\n                case MAIN_MENU:\r\n                    //...\r\n                    break;\r\n                case OPTIONS:\r\n                    //...\r\n                    break;\r\n                case GAME_CONTENT_LOADING:\r\n                    //...\r\n                    break;\r\n                case STARTING:\r\n                    // Sets variables and objects.\r\n                    Initialize();\r\n                    // Load files - images, sounds, ...\r\n                    LoadContent();\r\n\r\n                    // When all things that are called above finished, we change game status to main menu.\r\n                    gameState = GameState.MAIN_MENU;\r\n                    break;\r\n                case VISUALIZING:\r\n                    // On Ubuntu OS (when I tested on my old computer) this.getWidth() method doesn't return the correct value immediately (eg. for frame that should be 800px width, returns 0 than 790 and at last 798px).\r\n                    // So we wait one second for the window/frame to be set to its correct size. Just in case we\r\n                    // also insert 'this.getWidth() > 1' condition in case when the window/frame size wasn't set in time,\r\n                    // so that we although get approximately size.\r\n                    if(this.getWidth() > 1 && visualizingTime > secInNanosec)\r\n                    {\r\n                        frameWidth = this.getWidth();\r\n                        frameHeight = this.getHeight();\r\n\r\n                        // When we get size of frame we change status.\r\n                        gameState = GameState.STARTING;\r\n                    }\r\n                    else\r\n                    {\r\n                        visualizingTime += System.nanoTime() - lastVisualizingTime;\r\n                        lastVisualizingTime = System.nanoTime();\r\n                    }\r\n                    break;\r\n            }\r\n\r\n            // Repaint the screen.\r\n            repaint();\r\n\r\n            // Here we calculate the time that defines for how long we should put threat to sleep to meet the GAME_FPS.\r\n            timeTaken = System.nanoTime() - beginTime;\r\n            timeLeft = (GAME_UPDATE_PERIOD - timeTaken) / milisecInNanosec; // In milliseconds\r\n            // If the time is less than 10 milliseconds, then we will put thread to sleep for 10 millisecond so that some other thread can do some work.\r\n            if (timeLeft < 10)\r\n                timeLeft = 10; //set a minimum\r\n            try {\r\n                //Provides the necessary delay and also yields control so that other thread can do work.\r\n                Thread.sleep(timeLeft);\r\n            } catch (InterruptedException ex) { }\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void Draw(Graphics2D g2d) {\r\n            switch (gameState) {\r\n                case ENDING:\r\n                    game.DrawEnding(g2d, mousePosition(),gameTime);\r\n                    break;\r\n                case PAUSE:\r\n                    game.Draw(g2d, mousePosition());\r\n                    break;\r\n                case PLAYING:\r\n                    game.Draw(g2d, mousePosition());\r\n                    break;\r\n                case GAMEOVER:\r\n                    game.DrawGameOver(g2d, mousePosition());\r\n                    break;\r\n                case MAIN_MENU:\r\n                    // 중앙에 이미지를 배치합니다.\r\n                    int x1 = (frameWidth - shootTheDuckMenuImg.getWidth()) / 2;\r\n                    int y1 = (frameHeight - shootTheDuckMenuImg.getHeight()) / 2;\r\n                    g2d.drawImage(shootTheDuckMenuImg, x1, y1, null);\r\n                    break;\r\n                case OPTIONS:\r\n                    //...\r\n                    break;\r\n                case GAME_CONTENT_LOADING:\r\n                    g2d.setColor(Color.white);\r\n                    g2d.drawString(\"GAME is LOADING\", frameWidth / 2 - 50, frameHeight / 2);\r\n                    break;\r\n            }\r\n    }\r\n    /**\r\n     * Starts new game.\r\n     */\r\n    private void newGame()\r\n    {\r\n        // We set gameTime to zero and lastTime to current time for later calculations.\r\n        gameTime = 0;\r\n        lastTime = System.nanoTime();\r\n        game = new Game(this);\r\n    }\r\n\r\n    /**\r\n     *  Restart game - reset game time and call RestartGame() method of game object so that reset some variables.\r\n     */\r\n    private void restartGame()\r\n    {\r\n        // We set gameTime to zero and lastTime to current time for later calculations.\r\n        gameTime = 0;\r\n        lastTime = System.nanoTime();\r\n        game.RestartGame();\r\n        // We change game status so that the game can start.\r\n        gameState = GameState.PLAYING;\r\n    }\r\n\r\n    private void nextRoundGame()\r\n    {\r\n        // We set gameTime to zero and lastTime to current time for later calculations.\r\n        gameTime = 0;\r\n        lastTime = System.nanoTime();\r\n\r\n\r\n        game.NextRound();\r\n\r\n        // We change game status so that the game can start.\r\n        gameState = GameState.PLAYING;\r\n    }\r\n\r\n    /**\r\n     * Returns the position of the mouse pointer in game frame/window.\r\n     * If mouse position is null than this method return 0,0 coordinate.\r\n     *\r\n     * @return Point of mouse coordinates.\r\n     */\r\n    private Point mousePosition()\r\n    {\r\n        try\r\n        {\r\n            Point mp = this.getMousePosition();\r\n\r\n            if(mp != null)\r\n                return this.getMousePosition();\r\n            else\r\n                return new Point(0, 0);\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            return new Point(0, 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This method is called when keyboard key is released.\r\n     *\r\n     * @param e KeyEvent\r\n     */\r\n    @Override\r\n    public void keyReleasedFramework(KeyEvent e)\r\n    {\r\n        switch (gameState)\r\n        {\r\n            case ENDING:\r\n                if(e.getKeyCode() == KeyEvent.VK_ESCAPE){\r\n                    System.exit(0);\r\n                }\r\n                if(e.getKeyCode() == KeyEvent.VK_SPACE){\r\n                    game.ed++;\r\n                }\r\n                break;\r\n            case PAUSE:\r\n                if(e.getKeyCode() == KeyEvent.VK_SPACE){\r\n                    nextRoundGame();\r\n                }\r\n                break;\r\n            case GAMEOVER:\r\n                if (e.getKeyCode() == KeyEvent.VK_ESCAPE) {\r\n                    System.exit(0);\r\n                } else if (e.getKeyCode() == KeyEvent.VK_SPACE || e.getKeyCode() == KeyEvent.VK_ENTER) {\r\n                    gameState = GameState.MAIN_MENU;  // 게임 오버 시 스페이스바나 엔터를 누르면 메인 메뉴로 돌아감\r\n                }\r\n                break;\r\n            case PLAYING:\r\n            case MAIN_MENU:\r\n                if(e.getKeyCode() == KeyEvent.VK_ESCAPE)\r\n                    System.exit(0);\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This method is called when mouse button is clicked.\r\n     *\r\n     * @param e MouseEvent\r\n     */\r\n    @Override\r\n    public void mouseClicked(MouseEvent e) {\r\n        switch (gameState) {\r\n            case MAIN_MENU:\r\n                if (e.getButton() == MouseEvent.BUTTON1)\r\n                    newGame();\r\n                break;\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/kr/jbnu/se/std/Framework.java b/src/main/java/kr/jbnu/se/std/Framework.java
--- a/src/main/java/kr/jbnu/se/std/Framework.java	(revision 137fa387678d3515712c7f9341873492602cb66b)
+++ b/src/main/java/kr/jbnu/se/std/Framework.java	(date 1732689203011)
@@ -158,8 +158,8 @@
     public Framework (Window window)
     {
         super();
-        initializeFirebase();
-        firebaseManager = new FirebaseManager("shootthedock-firebase-adminsdk-304qc-09167d3967",DATABASE_URL);
+        //initializeFirebase();
+        firebaseManager = new FirebaseManager("src/main/shootthedock-firebase-adminsdk-304qc-09167d3967.json",DATABASE_URL);
         this.window = window;
         windowManager = new WindowManager(this);
         audioManager = new AudioManager();
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"e255d515-7351-4cf8-8843-af8a77729b48\" name=\"Changes\" comment=\"131313\">\r\n      <change afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024__11__19___7_52__Changes_.xml\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024__11__19___7_53__Changes_.xml\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024__11__19___8_01__Changes_.xml\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024__11__19___8_01__Changes_1.xml\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024__11__19__오후_7_52_[Changes]/shelved.patch\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024__11__19__오후_7_53_[Changes]/shelved.patch\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024__11__19__오후_8_01_[Changes]/shelved.patch\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024__11__19__오후_8_01_[Changes]1/shelved.patch\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/kr/jbnu/se/std/AudioManager.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/kr/jbnu/se/std/FirebaseManager.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/kr/jbnu/se/std/WindowManager.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/target/classes/kr/jbnu/se/std/AudioManager.class\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/target/classes/kr/jbnu/se/std/FirebaseManager.class\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/target/classes/kr/jbnu/se/std/WindowManager.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/kr/jbnu/se/std/Framework.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/kr/jbnu/se/std/Framework.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/kr/jbnu/se/std/Game.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/kr/jbnu/se/std/Game.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Framework$10.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Framework$10.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Framework$4.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Framework$4.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Framework.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Framework.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Game$1.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Game$1.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Game.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Game.class\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\r\n      <map>\r\n        <entry key=\"$PROJECT_DIR$\" value=\"Chat+mainFROnt\" />\r\n      </map>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitHubPullRequestSearchHistory\">{\r\n  &quot;lastFilter&quot;: {\r\n    &quot;state&quot;: &quot;OPEN&quot;,\r\n    &quot;assignee&quot;: &quot;kimjaehoug&quot;\r\n  }\r\n}</component>\r\n  <component name=\"GithubPullRequestsUISettings\">{\r\n  &quot;selectedUrlAndAccountId&quot;: {\r\n    &quot;url&quot;: &quot;https://github.com/kimjaehoug/wherelouisjeon.git&quot;,\r\n    &quot;accountId&quot;: &quot;a44d6209-844a-4745-82f7-f6385177c124&quot;\r\n  }\r\n}</component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 5\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2l32qehEPZRF5c71kAtLRu0eskA\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"Application.MainClient.executor\": \"Run\",\r\n    \"Application.MainV2.executor\": \"Run\",\r\n    \"Application.ShopWindow.executor\": \"Run\",\r\n    \"Application.Window (1).executor\": \"Run\",\r\n    \"Application.Window.executor\": \"Run\",\r\n    \"Application.Window2222.executor\": \"Run\",\r\n    \"RunOnceActivity.OpenProjectViewOnStart\": \"true\",\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"SHARE_PROJECT_CONFIGURATION_FILES\": \"true\",\r\n    \"SONARLINT_PRECOMMIT_ANALYSIS\": \"true\",\r\n    \"WebServerToolWindowFactoryState\": \"false\",\r\n    \"git-widget-placeholder\": \"backup\",\r\n    \"kotlin-language-version-configured\": \"true\",\r\n    \"last_opened_file_path\": \"/Users/jae/Downloads/shoottheduck\",\r\n    \"node.js.detected.package.eslint\": \"true\",\r\n    \"node.js.detected.package.tslint\": \"true\",\r\n    \"node.js.selected.package.eslint\": \"(autodetect)\",\r\n    \"node.js.selected.package.tslint\": \"(autodetect)\",\r\n    \"nodejs_package_manager_path\": \"npm\",\r\n    \"project.structure.last.edited\": \"Modules\",\r\n    \"project.structure.proportion\": \"0.15\",\r\n    \"project.structure.side.proportion\": \"0.2\",\r\n    \"settings.editor.selected.configurable\": \"profiler.calltree.filter\",\r\n    \"vue.rearranger.settings.migration\": \"true\"\r\n  }\r\n}]]></component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"D:\\70.Classes\\2024-2\\source_code_analysis\\shoottheduck\\src\\main\\resources\" />\r\n      <recent name=\"D:\\70.Classes\\2024-2\\source_code_analysis\\shoottheduck\\src\\main\\java\" />\r\n    </key>\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"$PROJECT_DIR$/src/main/resources/images\" />\r\n      <recent name=\"$PROJECT_DIR$/src/main/resources/sounds\" />\r\n      <recent name=\"$PROJECT_DIR$/src/main\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\" selected=\"Application.Window2222\">\r\n    <configuration name=\"MainClient\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"kr.jbnu.se.std.MainClient\" />\r\n      <module name=\"shoottheduck\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"kr.jbnu.se.std.MultiPlayer.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"MainV2\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"kr.jbnu.se.std.MainV2\" />\r\n      <module name=\"shoottheduck\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"kr.jbnu.se.std.MultiPlayer.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"ShopWindow\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"kr.jbnu.se.std.ShopWindow\" />\r\n      <module name=\"shoottheduck\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"kr.jbnu.se.std.MultiPlayer.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"Window\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"kr.jbnu.se.std.Window\" />\r\n      <module name=\"shoottheduck\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"Window2222\" type=\"Application\" factoryName=\"Application\" temporary=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"kr.jbnu.se.std.Window\" />\r\n      <module name=\"shoottheduck\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"kr.jbnu.se.std.MultiPlayer.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <list>\r\n      <item itemvalue=\"Application.Window\" />\r\n      <item itemvalue=\"Application.MainClient\" />\r\n      <item itemvalue=\"Application.MainV2\" />\r\n      <item itemvalue=\"Application.ShopWindow\" />\r\n      <item itemvalue=\"Application.Window2222\" />\r\n    </list>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Application.Window2222\" />\r\n        <item itemvalue=\"Application.MainV2\" />\r\n        <item itemvalue=\"Application.ShopWindow\" />\r\n        <item itemvalue=\"Application.MainClient\" />\r\n        <item itemvalue=\"Application.Window\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"bundled-jdk-9823dce3aa75-b114ca120d71-intellij.indexing.shared.core-IU-242.21829.142\" />\r\n        <option value=\"bundled-js-predefined-d6986cc7102b-7c0b70fcd90d-JavaScript-IU-242.21829.142\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"e255d515-7351-4cf8-8843-af8a77729b48\" name=\"Changes\" comment=\"\" />\r\n      <created>1724394633914</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1724394633914</updated>\r\n      <workItem from=\"1724394635024\" duration=\"2830000\" />\r\n      <workItem from=\"1724829453673\" duration=\"684000\" />\r\n      <workItem from=\"1725429507492\" duration=\"630000\" />\r\n      <workItem from=\"1726030595579\" duration=\"691000\" />\r\n      <workItem from=\"1726879738970\" duration=\"1652000\" />\r\n      <workItem from=\"1727238748652\" duration=\"1262000\" />\r\n      <workItem from=\"1727689816044\" duration=\"15230000\" />\r\n      <workItem from=\"1727776036881\" duration=\"31242000\" />\r\n      <workItem from=\"1727875707906\" duration=\"28902000\" />\r\n      <workItem from=\"1728066880239\" duration=\"8135000\" />\r\n      <workItem from=\"1728357407136\" duration=\"20461000\" />\r\n      <workItem from=\"1728822405134\" duration=\"5605000\" />\r\n      <workItem from=\"1728889652442\" duration=\"37652000\" />\r\n      <workItem from=\"1729054707457\" duration=\"10617000\" />\r\n      <workItem from=\"1729069599398\" duration=\"4970000\" />\r\n      <workItem from=\"1729323809352\" duration=\"3878000\" />\r\n      <workItem from=\"1729486864439\" duration=\"15419000\" />\r\n      <workItem from=\"1729519832621\" duration=\"526000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"loginfunction\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1727763605144</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1727763605144</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"loginfunction\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1727771161342</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1727771161342</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"loginfunction\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1727781698478</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1727781698479</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"loginfunction\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1727855380738</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1727855380738</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"loginfunction\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1727860170579</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1727860170580</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"131313\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1727863174521</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1727863174521</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"131313\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1727865267663</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1727865267663</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"131313\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1727871541617</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1727871541617</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00009\" summary=\"131313\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1727872888568</created>\r\n      <option name=\"number\" value=\"00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1727872888568</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00010\" summary=\"131313\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1727872986113</created>\r\n      <option name=\"number\" value=\"00010\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1727872986113</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00011\" summary=\"131313\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1728031206772</created>\r\n      <option name=\"number\" value=\"00011\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1728031206772</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00012\" summary=\"131313\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1728031507710</created>\r\n      <option name=\"number\" value=\"00012\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1728031507710</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00013\" summary=\"131313\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1728277037261</created>\r\n      <option name=\"number\" value=\"00013\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1728277037262</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00014\" summary=\"131313\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1728277216143</created>\r\n      <option name=\"number\" value=\"00014\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00014\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1728277216143</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00015\" summary=\"131313\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1728277380099</created>\r\n      <option name=\"number\" value=\"00015\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00015\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1728277380099</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00016\" summary=\"131313\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1728279465226</created>\r\n      <option name=\"number\" value=\"00016\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00016\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1728279465226</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00017\" summary=\"131313\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1728363801963</created>\r\n      <option name=\"number\" value=\"00017\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00017\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1728363801963</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00018\" summary=\"131313\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1728462444356</created>\r\n      <option name=\"number\" value=\"00018\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00018\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1728462444356</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00019\" summary=\"131313\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1728800544817</created>\r\n      <option name=\"number\" value=\"00019\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00019\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1728800544817</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00020\" summary=\"131313\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1728915363555</created>\r\n      <option name=\"number\" value=\"00020\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00020\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1728915363555</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00021\" summary=\"131313\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1728915375265</created>\r\n      <option name=\"number\" value=\"00021\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00021\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1728915375265</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00022\" summary=\"131313\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1728999106644</created>\r\n      <option name=\"number\" value=\"00022\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00022\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1728999106644</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00023\" summary=\"131313\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1729055917408</created>\r\n      <option name=\"number\" value=\"00023\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00023\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1729055917408</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00024\" summary=\"131313\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1729324804828</created>\r\n      <option name=\"number\" value=\"00024\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00024\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1729324804828</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00025\" summary=\"131313\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1729349172153</created>\r\n      <option name=\"number\" value=\"00025\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00025\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1729349172153</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00026\" summary=\"131313\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1729356413737</created>\r\n      <option name=\"number\" value=\"00026\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00026\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1729356413737</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00027\" summary=\"131313\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1729489907877</created>\r\n      <option name=\"number\" value=\"00027\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00027\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1729489907877</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00028\" summary=\"131313\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1729494523229</created>\r\n      <option name=\"number\" value=\"00028\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00028\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1729494523229</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00029\" summary=\"131313\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1729510802698</created>\r\n      <option name=\"number\" value=\"00029\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00029\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1729510802698</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00030\" summary=\"131313\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1729510839902</created>\r\n      <option name=\"number\" value=\"00030\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00030\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1729510839902</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00031\" summary=\"131313\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1729511250510</created>\r\n      <option name=\"number\" value=\"00031\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00031\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1729511250510</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"32\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State>\r\n              <option name=\"FILTERS\">\r\n                <map>\r\n                  <entry key=\"branch\">\r\n                    <value>\r\n                      <list>\r\n                        <option value=\"origin/main\" />\r\n                      </list>\r\n                    </value>\r\n                  </entry>\r\n                </map>\r\n              </option>\r\n            </State>\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"loginfunction\" />\r\n    <MESSAGE value=\"yw\" />\r\n    <MESSAGE value=\"131313\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"131313\" />\r\n  </component>\r\n  <component name=\"XSLT-Support.FileAssociations.UIState\">\r\n    <expand />\r\n    <select />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 137fa387678d3515712c7f9341873492602cb66b)
+++ b/.idea/workspace.xml	(date 1732689203112)
@@ -5,28 +5,109 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="e255d515-7351-4cf8-8843-af8a77729b48" name="Changes" comment="131313">
-      <change afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024__11__19___7_52__Changes_.xml" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024__11__19___7_53__Changes_.xml" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024__11__19___8_01__Changes_.xml" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024__11__19___8_01__Changes_1.xml" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024__11__19__오후_7_52_[Changes]/shelved.patch" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024__11__19__오후_7_53_[Changes]/shelved.patch" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024__11__19__오후_8_01_[Changes]/shelved.patch" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024__11__19__오후_8_01_[Changes]1/shelved.patch" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/kr/jbnu/se/std/AudioManager.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/kr/jbnu/se/std/FirebaseManager.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/kr/jbnu/se/std/WindowManager.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/AudioManager.class" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/FirebaseManager.class" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/WindowManager.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-10-19__11_32__Changes_.xml" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-10-19_오후_11_32_[Changes]/shelved.patch" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024__11__19___7_52__Changes_.xml" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024__11__19___7_53__Changes_.xml" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024__11__19___8_01__Changes_1.xml" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024__11__19__오후_7_52_[Changes]/shelved.patch" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024__11__19__오후_7_53_[Changes]/shelved.patch" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024__11__19__오후_8_01_[Changes]1/shelved.patch" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_2024-10-19__11_31__Changes_.xml" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_2024-10-19__11_33__Changes_.xml" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_2024-10-19__11_33__Changes_1.xml" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_2024-10-19__5_03__Changes_1.xml" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_2024-10-19_오후_11_31_[Changes]/shelved.patch" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_2024-10-19_오후_11_33_[Changes]/shelved.patch" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_2024-10-19_오후_11_33_[Changes]1/shelved.patch" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_2024-10-19_오후_5_03_[Changes]1/shelved.patch" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_2024__10__20___10_01__Changes_.xml" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_2024__10__20___10_03__Changes_.xml" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_2024__10__20__오후_10_01_[Changes]/shelved.patch" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_2024__10__20__오후_10_03_[Changes]/shelved.patch" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_2024__10__21___2_52__Changes_.xml" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_2024__10__21___8_46__Changes_.xml" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_2024__10__21___8_47__Changes_.xml" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_2024__10__21__오후_2_52_[Changes]/shelved.patch" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_2024__10__21__오후_8_46_[Changes]/shelved.patch" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_2024__10__21__오후_8_47_[Changes]/shelved.patch" beforeDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/main/java/kr/jbnu/se/std/Framework.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/kr/jbnu/se/std/Framework.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/kr/jbnu/se/std/Game.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/kr/jbnu/se/std/Game.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Framework$10.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Framework$10.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Framework$4.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Framework$4.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Framework.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Framework.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Game$1.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Game$1.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Game.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Game.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/kr/jbnu/se/std/MultiPlayer/MultiGame.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/kr/jbnu/se/std/MultiPlayer/MultiGame.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/AddFriends$1.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/AddFriends.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/BossAttack.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Buttonbuy.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/ChatwithFriends$1.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/ChatwithFriends$2.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/ChatwithFriends.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Duck.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Framework$1.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Framework$10.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Framework$12.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Framework$12.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Framework$2.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Framework$3.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Framework$4.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Framework$5.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Framework$6.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Framework$7.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Framework$8.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Framework$9.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Framework$GameState.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Framework.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Game$1.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Game.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/GameMain.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Hunter1.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/InviteFriends$1.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/InviteFriends$2.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/InviteFriends.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/LoginClient$1.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/LoginClient$10.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/LoginClient$11.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/LoginClient$12.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/LoginClient$13.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/LoginClient$2.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/LoginClient$3.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/LoginClient$4.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/LoginClient$5.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/LoginClient$6.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/LoginClient$7.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/LoginClient$8.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/LoginClient$9.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/LoginClient$ImagePanel.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/LoginClient.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/MainClient$1.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/MainClient$2.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/MainClient$3.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/MainClient$4.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/MainClient$5.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/MainClient$6.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/MainClient$7.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/MainClient.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/MainV2$1.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/MainV2$2.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/MainV2$3.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/MainV2.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/MessageReceiver$1.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/MessageReceiver$2.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/MessageReceiver$3.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/MessageReceiver$4.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/MessageReceiver.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/MultiPlayer/MultiGame$1.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/MultiPlayer/MultiGame.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/MultiPlayer/PlayerClient$1.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/MultiPlayer/PlayerClient.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/ShopWindow$1.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/ShopWindow$2.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/ShopWindow$3.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/ShopWindow$4.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/ShopWindow$BackgroundPanel.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/ShopWindow$OuterPanel.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/ShopWindow.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Window$1.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Window.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/boss1.class" beforeDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -43,7 +124,7 @@
   <component name="Git.Settings">
     <option name="RECENT_BRANCH_BY_REPOSITORY">
       <map>
-        <entry key="$PROJECT_DIR$" value="Chat+mainFROnt" />
+        <entry key="$PROJECT_DIR$" value="backup" />
       </map>
     </option>
     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
@@ -63,6 +144,9 @@
   <component name="MarkdownSettingsMigration">
     <option name="stateVersion" value="1" />
   </component>
+  <component name="ProblemsViewState">
+    <option name="selectedTabId" value="CurrentFile" />
+  </component>
   <component name="ProjectColorInfo">{
   &quot;associatedIndex&quot;: 5
 }</component>
@@ -85,7 +169,7 @@
     "SHARE_PROJECT_CONFIGURATION_FILES": "true",
     "SONARLINT_PRECOMMIT_ANALYSIS": "true",
     "WebServerToolWindowFactoryState": "false",
-    "git-widget-placeholder": "backup",
+    "git-widget-placeholder": "backup__gu",
     "kotlin-language-version-configured": "true",
     "last_opened_file_path": "/Users/jae/Downloads/shoottheduck",
     "node.js.detected.package.eslint": "true",
@@ -97,7 +181,8 @@
     "project.structure.proportion": "0.15",
     "project.structure.side.proportion": "0.2",
     "settings.editor.selected.configurable": "profiler.calltree.filter",
-    "vue.rearranger.settings.migration": "true"
+    "vue.rearranger.settings.migration": "true",
+    "애플리케이션.Window.executor": "Run"
   }
 }]]></component>
   <component name="RecentsManager">
@@ -111,7 +196,7 @@
       <recent name="$PROJECT_DIR$/src/main" />
     </key>
   </component>
-  <component name="RunManager" selected="Application.Window2222">
+  <component name="RunManager" selected="애플리케이션.Window">
     <configuration name="MainClient" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
       <option name="MAIN_CLASS_NAME" value="kr.jbnu.se.std.MainClient" />
       <module name="shoottheduck" />
@@ -172,27 +257,27 @@
       </method>
     </configuration>
     <list>
-      <item itemvalue="Application.Window" />
-      <item itemvalue="Application.MainClient" />
-      <item itemvalue="Application.MainV2" />
-      <item itemvalue="Application.ShopWindow" />
-      <item itemvalue="Application.Window2222" />
+      <item itemvalue="애플리케이션.MainClient" />
+      <item itemvalue="애플리케이션.MainV2" />
+      <item itemvalue="애플리케이션.ShopWindow" />
+      <item itemvalue="애플리케이션.Window" />
+      <item itemvalue="애플리케이션.Window2222" />
     </list>
     <recent_temporary>
       <list>
-        <item itemvalue="Application.Window2222" />
-        <item itemvalue="Application.MainV2" />
-        <item itemvalue="Application.ShopWindow" />
-        <item itemvalue="Application.MainClient" />
-        <item itemvalue="Application.Window" />
+        <item itemvalue="애플리케이션.Window" />
+        <item itemvalue="애플리케이션.Window2222" />
+        <item itemvalue="애플리케이션.ShopWindow" />
+        <item itemvalue="애플리케이션.MainV2" />
+        <item itemvalue="애플리케이션.MainClient" />
       </list>
     </recent_temporary>
   </component>
   <component name="SharedIndexes">
     <attachedChunks>
       <set>
-        <option value="bundled-jdk-9823dce3aa75-b114ca120d71-intellij.indexing.shared.core-IU-242.21829.142" />
-        <option value="bundled-js-predefined-d6986cc7102b-7c0b70fcd90d-JavaScript-IU-242.21829.142" />
+        <option value="bundled-jdk-9823dce3aa75-28b599e66164-intellij.indexing.shared.core-IU-242.23339.11" />
+        <option value="bundled-js-predefined-d6986cc7102b-5c90d61e3bab-JavaScript-IU-242.23339.11" />
       </set>
     </attachedChunks>
   </component>
@@ -222,6 +307,9 @@
       <workItem from="1729323809352" duration="3878000" />
       <workItem from="1729486864439" duration="15419000" />
       <workItem from="1729519832621" duration="526000" />
+      <workItem from="1732683636256" duration="724000" />
+      <workItem from="1732684378263" duration="2357000" />
+      <workItem from="1732686800911" duration="1258000" />
     </task>
     <task id="LOCAL-00001" summary="loginfunction">
       <option name="closed" value="true" />
@@ -488,7 +576,7 @@
                   <entry key="branch">
                     <value>
                       <list>
-                        <option value="origin/main" />
+                        <option value="backup" />
                       </list>
                     </value>
                   </entry>
Index: src/main/java/kr/jbnu/se/std/MultiPlayer/MultiGame.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package kr.jbnu.se.std.MultiPlayer;\r\n\r\nimport kr.jbnu.se.std.*;\r\nimport kr.jbnu.se.std.Canvas;\r\n\r\nimport java.awt.*;\r\nimport java.awt.event.MouseEvent;\r\nimport java.awt.image.BufferedImage;\r\nimport java.io.IOException;\r\nimport java.net.URL;\r\nimport java.util.*;\r\nimport java.util.concurrent.Executors;\r\nimport java.util.concurrent.ScheduledExecutorService;\r\nimport java.util.concurrent.TimeUnit;\r\nimport java.util.logging.Level;\r\nimport java.util.logging.Logger;\r\nimport javax.imageio.ImageIO;\r\n\r\n/**\r\n * Actual game.\r\n *\r\n * @author www.gametutorial.net\r\n */\r\n\r\npublic class MultiGame {\r\n\r\n    /**\r\n     * We use this to generate a random number.\r\n     */\r\n    private Random random;\r\n    private boolean isPause = false;\r\n    private int Round;\r\n    private boolean isBossAlive;\r\n    private Duck[] hunterSelectedDucks;\r\n    private Duck[] playerSelectedDucks;\r\n    private int ammo;          // 현재 사용 가능한 총알\r\n    private int maxAmmo;       // 한 번에 장전할 수 있는 최대 탄약 수\r\n    private boolean isReloading; // 장전 중인지 여부\r\n    private long reloadStartTime; // 장전이 시작된 시간\r\n    private long reloadDuration;  // 장전 시간 (예: 2초)\r\n    private URL hpUrl;\r\n    private int selectduck;\r\n    private ScheduledExecutorService hunterExecutor;\r\n\r\n    /**\r\n     * Font that we will use to write statistic to the screen.\r\n     */\r\n    private Font font;\r\n    boolean hunterTrigger = true;\r\n\r\n    private BufferedImage bossImg;\r\n    private BufferedImage[] hpImages = new BufferedImage[12]; // HP 이미지를 저장할 배열\r\n\r\n    /**\r\n     * Array list of the ducks.\r\n     */\r\n    private ArrayList<Duck> ducks;\r\n    private ArrayList<boss1> boss;\r\n    private ArrayList<Buttonbuy> buttonbuy;\r\n    private ArrayList<kr.jbnu.se.std.Hunter1> Hunters;\r\n\r\n    /**\r\n     * How many ducks leave the screen alive?\r\n     */\r\n    private int runawayDucks;\r\n    private Framework framework;\r\n\r\n    /**\r\n     * How many ducks the player killed?\r\n     */\r\n    private int killedDucks;\r\n\r\n    /**\r\n     * For each killed duck, the player gets points.\r\n     */\r\n    private int score;\r\n    private int money;\r\n\r\n    /**\r\n     * How many times a player is shot?\r\n     */\r\n    private int shoots;\r\n    private boolean leaderboardSaved;\r\n    /**\r\n     * Last time of the shoot.\r\n     */\r\n    private long lastTimeShoot;\r\n    /**\r\n     * The time which must elapse between shots.\r\n     */\r\n    private long timeBetweenShots;\r\n\r\n    /**\r\n     * kr.jbnu.se.std.Game background image.\r\n     */\r\n    private BufferedImage backgroundImg;\r\n    private BufferedImage buttonImg;\r\n    private BufferedImage sightImg_hunter;\r\n\r\n    /**\r\n     * Bottom grass.\r\n     */\r\n    private BufferedImage grassImg;\r\n\r\n    /**\r\n     * kr.jbnu.se.std.Duck image.\r\n     */\r\n    private BufferedImage duckImg;\r\n\r\n    /**\r\n     * Shotgun sight image.\r\n     */\r\n    private BufferedImage sightImg;\r\n    private boolean Hunter1 = false;\r\n\r\n    /**\r\n     * Middle width of the sight image.\r\n     */\r\n    private int sightImgMiddleWidth;\r\n    /**\r\n     * Middle height of the sight image.\r\n     */\r\n    private int sightImgMiddleHeight;\r\n    private String gun;\r\n    private GameClient multiplayerClient;\r\n\r\n    private GameServer server;\r\n    private ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);\r\n\r\n\r\n    public MultiGame(Framework framework, GameServer server) {\r\n        this.server = server;\r\n\r\n        Framework.gameState = Framework.GameState.GAME_CONTENT_LOADING;\r\n        this.framework = framework;\r\n        Thread threadForInitGame = new Thread() {\r\n            @Override\r\n            public void run() {\r\n                // Sets variables and objects for the game.\r\n                Initialize();\r\n                // Load game files (images, sounds, ...)\r\n                LoadContent();\r\n\r\n                Framework.gameState = Framework.GameState.PLAYING;\r\n            }\r\n        };\r\n        threadForInitGame.start();\r\n    }\r\n\r\n\r\n    /**\r\n     * Set variables and objects for the game.\r\n     */\r\n    private void Initialize() {\r\n        random = new Random();\r\n        font = new Font(\"monospaced\", Font.BOLD, 18);\r\n\r\n        ducks = new ArrayList<Duck>();\r\n        boss = new ArrayList<boss1>();\r\n        buttonbuy = new ArrayList<Buttonbuy>();\r\n        Hunters = new ArrayList<Hunter1>();\r\n\r\n        runawayDucks = 0;\r\n        killedDucks = 0;\r\n        score = 0;\r\n        shoots = 0;\r\n        Round = 1;\r\n        isBossAlive = false;\r\n        Hunter1 = false;\r\n        lastTimeShoot = 0;\r\n        timeBetweenShots = 500_000_000L;\r\n\r\n        ammo = 6;              // 기본 탄약 수\r\n        maxAmmo = 6;           // 최대 장전할 수 있는 탄약 수\r\n        isReloading = false;   // 초기에는 장전 중이 아님\r\n        reloadDuration = 2000000000L; // 장전 시간 2초 (나노초 단위)\r\n    }\r\n\r\n    /**\r\n     * Load game files - images, sounds, ...\r\n     */\r\n    private void LoadContent() {\r\n        try {\r\n            for (int i = 0; i < 12; i++) { // 0부터 11까지 반복\r\n                try {\r\n                    // 이미지 경로를 생성\r\n                    URL hpUrl = this.getClass().getResource(\"/images/hp_\" + i + \".png\");\r\n\r\n                    // URL이 null이 아닐 경우에만 이미지 읽기\r\n                    if (hpUrl != null) {\r\n                        hpImages[i] = ImageIO.read(hpUrl);\r\n                    } else {\r\n                        System.out.println(\"Image not found: /images/hp_\" + i + \".png\");\r\n                    }\r\n                } catch (IOException e) {\r\n                    e.printStackTrace(); // IOException 처리\r\n                }\r\n            }\r\n\r\n            URL Buttonimg = this.getClass().getResource(\"/images/btn_buy.png\");\r\n            buttonImg = ImageIO.read(Buttonimg);\r\n\r\n            URL backgroundImgUrl = this.getClass().getResource(\"/images/background.png\");\r\n            backgroundImg = ImageIO.read(backgroundImgUrl);\r\n\r\n            URL bossImgUrl = this.getClass().getResource(\"/images/boss.png\");\r\n            bossImg = ImageIO.read(bossImgUrl);\r\n\r\n            URL grassImgUrl = this.getClass().getResource(\"/images/grass.png\");\r\n            grassImg = ImageIO.read(grassImgUrl);\r\n\r\n            URL sight_hunterURL = this.getClass().getResource(\"/images/sight_hunter.png\");\r\n            sightImg_hunter = ImageIO.read(sight_hunterURL);\r\n\r\n            URL duckImgUrl = this.getClass().getResource(\"/images/duck.png\");\r\n            duckImg = ImageIO.read(duckImgUrl);\r\n\r\n            URL sightImgUrl = this.getClass().getResource(\"/images/sight.png\");\r\n            sightImg = ImageIO.read(sightImgUrl);\r\n            sightImgMiddleWidth = sightImg.getWidth() / 2;\r\n            sightImgMiddleHeight = sightImg.getHeight() / 2;\r\n        } catch (IOException ex) {\r\n            Logger.getLogger(Game.class.getName()).log(Level.SEVERE, null, ex);\r\n        }\r\n    }\r\n\r\n    private void selectPlayerDucks(int numberOfDucks) {\r\n        // 선택된 오리들이 이미 있으면 리턴\r\n        if (playerSelectedDucks != null) {\r\n            return;\r\n        }\r\n\r\n        // 오리들이 충분히 있을 때 N마리 오리를 무작위로 선택\r\n        if (ducks.size() >= numberOfDucks) {\r\n            playerSelectedDucks = new Duck[numberOfDucks]; // Player 선택된 오리 배열 초기화\r\n            Random random = new Random();\r\n\r\n            for (int i = 0; i < numberOfDucks; i++) {\r\n                Duck selectedDuck;\r\n                int index;\r\n\r\n                // 중복되지 않는 오리를 선택\r\n                do {\r\n                    index = random.nextInt(ducks.size());\r\n                    selectedDuck = ducks.get(index);\r\n                } while (Arrays.asList(playerSelectedDucks).contains(selectedDuck) ||\r\n                        (hunterSelectedDucks != null && Arrays.asList(hunterSelectedDucks).contains(selectedDuck))); // hunterSelectedDucks가 null일 경우 중복 방지 생략\r\n\r\n                playerSelectedDucks[i] = selectedDuck;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n    // N마리 오리를 선택하는 메소드 (Hunter용)\r\n    private void selectHunterDucks(int numberOfDucks) {\r\n        if (ducks.size() >= numberOfDucks) {\r\n            hunterSelectedDucks = new Duck[numberOfDucks]; // Hunter 선택된 오리 배열 초기화\r\n            Random random = new Random();\r\n\r\n            for (int i = 0; i < numberOfDucks; i++) {\r\n                Duck selectedDuck;\r\n                int index;\r\n\r\n                // 중복되지 않는 오리를 선택\r\n                do {\r\n                    index = random.nextInt(ducks.size());\r\n                    selectedDuck = ducks.get(index);\r\n                } while (Arrays.asList(hunterSelectedDucks).contains(selectedDuck) || Arrays.asList(playerSelectedDucks).contains(selectedDuck)); // 중복 방지\r\n\r\n                hunterSelectedDucks[i] = selectedDuck;\r\n            }\r\n        }\r\n    }\r\n\r\n    // Hunter가 자동으로 오리를 제거하는 메소드\r\n    private void startHunterAutoKill(int interval) {\r\n        hunterExecutor = Executors.newScheduledThreadPool(1); // 스레드 풀 생성\r\n        hunterExecutor.scheduleAtFixedRate(() -> {\r\n            if (hunterSelectedDucks == null || Arrays.stream(hunterSelectedDucks).allMatch(Objects::isNull)) {\r\n                // Hunter가 선택한 오리가 없으면 새롭게 선택\r\n                selectHunterDucks(1);\r\n            }\r\n            if (hunterSelectedDucks != null) {\r\n                for (Duck duck : hunterSelectedDucks) {\r\n                    if (duck != null && !Arrays.asList(playerSelectedDucks).contains(duck)) {\r\n                        // Hunter가 선택한 오리가 Player가 선택한 오리와 중복되지 않도록 확인\r\n                        ducks.remove(duck);\r\n                        killedDucks++;\r\n                        money += 10;\r\n                        score += duck.score;\r\n                        System.out.println(\"Hunter가 오리를 죽였습니다: \" + duck);\r\n                        break; // 한 마리씩 죽이고 나가도록\r\n\r\n                    }\r\n                }\r\n                updateHunterSelectedDucks();\r\n            }\r\n        }, 0, interval, TimeUnit.MILLISECONDS); // interval 시간마다 실행\r\n    }\r\n\r\n\r\n    // 게임이 끝나면 Hunter의 자동조준 타이머를 중지하는 코드\r\n    private void stopHunterAutoKill() {\r\n        if (hunterExecutor != null && !hunterExecutor.isShutdown()) {\r\n            hunterExecutor.shutdown(); // Hunter의 자동 조준 종료\r\n        }\r\n    }\r\n\r\n\r\n    private void updateAndReselectPlayerDucks(int numberOfDucks) {\r\n        // playerSelectedDucks가 null일 때만 새로 선택\r\n        playerSelectedDucks = null;\r\n        if (playerSelectedDucks == null) {\r\n            selectPlayerDucks(numberOfDucks);\r\n        }\r\n    }\r\n\r\n    // 오리들이 죽으면 Hunter 선택된 오리를 null로 설정\r\n    private void updateHunterSelectedDucks() {\r\n        Random random = new Random();\r\n\r\n        for (int i = 0; i < hunterSelectedDucks.length; i++) {\r\n            if (hunterSelectedDucks[i] == null || !ducks.contains(hunterSelectedDucks[i])) {\r\n                // 새로운 오리를 선택하여 중복되지 않게 추가\r\n                Duck selectedDuck;\r\n                int index;\r\n\r\n                do {\r\n                    index = random.nextInt(ducks.size());\r\n                    selectedDuck = ducks.get(index);\r\n                } while (Arrays.asList(hunterSelectedDucks).contains(selectedDuck) ||\r\n                        Arrays.asList(playerSelectedDucks).contains(selectedDuck)); // 중복 방지\r\n\r\n                hunterSelectedDucks[i] = selectedDuck;\r\n            }\r\n        }\r\n    }\r\n\r\n    // 더블배럴샷건 모드에서 Player 선택된 오리들에게 sightImg를 그리기\r\n    private void drawSightOnPlayerSelectedDucks(Graphics2D g2d) {\r\n        if (playerSelectedDucks != null) {\r\n            for (Duck duck : playerSelectedDucks) {\r\n                if (duck != null) {\r\n                    g2d.drawImage(sightImg, duck.x, duck.y, null);\r\n                }\r\n            }\r\n        }else{\r\n            return;\r\n        }\r\n    }\r\n\r\n    // 더블배럴샷건 모드에서 Hunter 선택된 오리들에게 sightImg를 그리기\r\n    private void drawSightOnHunterSelectedDucks(Graphics2D g2d) {\r\n        if (hunterSelectedDucks != null) {\r\n            for (Duck duck : hunterSelectedDucks) {\r\n                if (duck != null) {\r\n                    g2d.drawImage(sightImg_hunter, duck.x, duck.y,28,28,null);\r\n                }else{\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Restart game - reset some variables.\r\n     */\r\n    public void RestartGame() {\r\n        // Removes all of the ducks from this list.\r\n        ducks.clear();\r\n\r\n        // We set last duckt time to zero.\r\n        Duck.lastDuckTime = 0;\r\n\r\n        runawayDucks = 0;\r\n        killedDucks = 0;\r\n        score = 0;\r\n        shoots = 0;\r\n\r\n        lastTimeShoot = 0;\r\n    }\r\n\r\n    public void Pause() {\r\n        ducks.clear();\r\n        isPause = true;\r\n        System.out.println(\"buttonbuyadd\");\r\n        Framework.gameState = Framework.GameState.Pause;\r\n    }\r\n\r\n\r\n    public void NextRound() {\r\n        isPause = false;\r\n        Framework.gameState = Framework.GameState.PLAYING;\r\n        Duck.lastDuckTime = 0; // 오리 타이머 초기화\r\n        killedDucks = 0; // 죽인 오리 수 초기화\r\n        runawayDucks = 0; // 도망간 오리 수 초기화\r\n        Round += 1;\r\n        isBossAlive = false;\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * Update game logic.\r\n     *\r\n     * @param gameTime      gameTime of the game.\r\n     * @param mousePosition current mouse position.\r\n     */\r\n    public void UpdateGame(long gameTime, Point mousePosition) {\r\n        if(isBossAlive){\r\n            for (int i = 0; i < boss.size(); i++) {\r\n                boss.get(i).update(); // 보스 위치 업데이트\r\n            }\r\n        }\r\n\r\n        if(Hunter1&& hunterTrigger){\r\n            startHunterAutoKill(2500);\r\n            hunterTrigger = false;\r\n        }else if(!Hunter1){\r\n            stopHunterAutoKill();\r\n        }else if(!hunterTrigger){\r\n\r\n        }\r\n        if(!isPause) {\r\n            // Creates a new duck, if it's the time, and add it to the array list.\r\n            if (System.nanoTime() - Duck.lastDuckTime >= Duck.timeBetweenDucks) {\r\n\r\n                if (isReloading) {\r\n                    if (System.nanoTime() - reloadStartTime >= reloadDuration) {\r\n                        ammo = maxAmmo;   // 탄약을 최대치로 채움\r\n                        isReloading = false; // 장전 상태 해제\r\n                    }\r\n                }\r\n                if(ammo<=0 && !isReloading){\r\n                    Reload();\r\n                }\r\n\r\n                if (framework.getGun().equals(\"더블배럴샷건\")) {\r\n                    selectPlayerDucks(1);\r\n                    // 선택된 오리들이 죽었는지 확인하고, 죽으면 다시 선택\r\n                }else if(framework.getGun().equals(\"기본권총\")){\r\n\r\n                }\r\n                // Here we create new duck and add it to the array list.\r\n                ducks.add(new Duck(Duck.duckLines[Duck.nextDuckLines][0] + random.nextInt(200), Duck.duckLines[Duck.nextDuckLines][1], Duck.duckLines[Duck.nextDuckLines][2], Duck.duckLines[Duck.nextDuckLines][3], duckImg));\r\n                // Here we increase nextDuckLines so that next duck will be created in next line.\r\n                Duck.nextDuckLines++;\r\n                if (Duck.nextDuckLines >= Duck.duckLines.length)\r\n                    Duck.nextDuckLines = 0;\r\n\r\n                if (killedDucks >= 20 && !isBossAlive) {\r\n                    // 보스 생성\r\n                    boss.add(new boss1(1300, 500,0.125,3000,3000,bossImg));\r\n                    isBossAlive = true; // 보스가 등장했음을 표시\r\n                    System.out.println(\"boss activity\");\r\n                    ducks.clear();\r\n                }\r\n                Duck.lastDuckTime = System.nanoTime();\r\n            }\r\n\r\n            if(!isBossAlive) {\r\n                // Update all of the ducks.\r\n                for (int i = 0; i < ducks.size(); i++) {\r\n                    // Move the duck.\r\n                    ducks.get(i).Update();\r\n                    server.uploadDuck(ducks.get(i));\r\n                    // Checks if the duck leaves the screen and remove it if it does.\r\n                    if (ducks.get(i).x < 0 - duckImg.getWidth()) {\r\n                        ducks.remove(i);\r\n                        runawayDucks++;\r\n                    }\r\n                }\r\n                // Does player shoots?\r\n                if (kr.jbnu.se.std.Canvas.mouseButtonState(MouseEvent.BUTTON1) && !isReloading) {\r\n                    if (System.nanoTime() - lastTimeShoot >= timeBetweenShots) {\r\n                        shoots++;\r\n                        ammo--;\r\n                        if (playerSelectedDucks != null) {\r\n                            for (int i = 0; i < playerSelectedDucks.length; i++) {\r\n                                if (playerSelectedDucks[i] != null) {\r\n                                    killedDucks++; // 죽인 오리 수 증가\r\n                                    money += 10; // 돈 증가\r\n                                    score += playerSelectedDucks[i].score; // 점수 증가\r\n\r\n                                    // 오리 리스트에서 제거\r\n                                    ducks.remove(playerSelectedDucks[i]);\r\n\r\n                                    // 선택된 오리를 null로 설정하여 초기화\r\n                                    playerSelectedDucks[i] = null;\r\n                                    updateAndReselectPlayerDucks(1);\r\n                                }\r\n                            }\r\n                        }\r\n                        // We go over all the ducks and we look if any of them was shoot.\r\n                        for (int i = 0; i < ducks.size(); i++) {\r\n                            // We check, if the mouse was over ducks head or body, when player has shot.\r\n                            if (new Rectangle(ducks.get(i).x + 18, ducks.get(i).y, 27, 30).contains(mousePosition) ||\r\n                                    new Rectangle(ducks.get(i).x + 30, ducks.get(i).y + 30, 88, 25).contains(mousePosition)) {\r\n                                killedDucks++;\r\n                                money += 10;\r\n                                score += ducks.get(i).score;\r\n\r\n                                // Remove the duck from the array list.\r\n                                ducks.remove(i);\r\n\r\n                                // We found the duck that player shoot so we can leave the for loop.\r\n                                break;\r\n                            }\r\n                        }\r\n                        // We go over all the bosses and we look if any of them was shoot.\r\n                        // We go over all the bosses and we look if any of them was shoot.\r\n\r\n\r\n                        lastTimeShoot = System.nanoTime();\r\n                    }\r\n                }\r\n            }else {\r\n                if (kr.jbnu.se.std.Canvas.mouseButtonState(MouseEvent.BUTTON1) && !isReloading) {\r\n                    if (System.nanoTime() - lastTimeShoot >= timeBetweenShots) {\r\n                        ammo--;\r\n                        if (isBossAlive) {\r\n                            for (int i = 0; i < boss.size(); i++) {\r\n                                // Define the boss hitbox (for exampl, a larger area for the boss).\r\n                                if (new Rectangle(boss.get(i).x, boss.get(i).y, 100, 100).contains(mousePosition)) {\r\n                                    // Reduce boss health\r\n                                    boss.get(i).health -= 20; // Reduce boss health by 20 on each hit.\r\n                                    System.out.println(\"attack boss\");\r\n                                    System.out.println(boss.get(i).health);\r\n                                    // If the boss is dead, update score, money, etc.\r\n                                    if (boss.get(i).health <= 0) {\r\n                                        money += 100; // Bosses give more money\r\n                                        score += boss.get(i).score; // Boss-specific score\r\n                                        boss.remove(i);\r\n                                        Pause();\r\n                                        // Remove the boss from the array list.\r\n                                    }\r\n                                    break;\r\n                                    // Since a boss was hit, we can leave the loop.\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    lastTimeShoot = System.nanoTime();\r\n                }\r\n            }\r\n\r\n            // When 200 ducks runaway, the game ends.\r\n            if (runawayDucks >= 10)\r\n                Framework.gameState = Framework.GameState.GAMEOVER;\r\n            if (Framework.gameState == Framework.GameState.GAMEOVER && !leaderboardSaved) {\r\n                framework.saveScore(score);\r\n                leaderboardSaved = true;  // 리더보드 저장 완료\r\n            }\r\n        }\r\n        if(isPause) {\r\n            System.out.println(\"isPause\");\r\n            buttonbuy.add(new Buttonbuy(framework.getWidth()/2 - 300, framework.getHeight()/2+50, buttonImg));\r\n            for (int i = 0; i < buttonbuy.size(); i++) {\r\n                if (Canvas.mouseButtonState(MouseEvent.BUTTON1) && money > 200) {\r\n                    if (new Rectangle(buttonbuy.get(i).x, buttonbuy.get(i).y, 367, 257).contains(mousePosition)) {\r\n                        System.out.println(\"buybutton\");\r\n                        System.out.println(mousePosition);\r\n                        System.out.println(buttonbuy.get(i).x + \" \" + buttonbuy.get(i).y);\r\n                        Hunters.add(new Hunter1(220, 110, 0, 100, duckImg));\r\n                        Hunter1 = true;\r\n                        money -= 200;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Draw the game to the screen.\r\n     *\r\n     * @param g2d Graphics2D\r\n     * @param mousePosition current mouse position.\r\n     */\r\n    public void Draw(Graphics2D g2d, Point mousePosition)\r\n    {\r\n        g2d.drawImage(backgroundImg, 0, 0, Framework.frameWidth, Framework.frameHeight, null);\r\n\r\n        // Here we draw all the ducks.\r\n        for(int i = 0; i < ducks.size(); i++)\r\n        {\r\n            ducks.get(i).Draw(g2d);\r\n        }\r\n        if(Hunter1){\r\n            g2d.drawImage(bossImg,Hunters.get(0).x,Hunters.get(0).y,null);\r\n            drawSightOnHunterSelectedDucks(g2d);\r\n\r\n        }\r\n\r\n        if(isPause){\r\n            int buyWidth = buttonImg.getWidth(null) / 2; // 너비 50%\r\n            int buyHeight = buttonImg.getHeight(null) / 2; // 높이 50%\r\n            for(int i = 0; i < buttonbuy.size(); i++) {\r\n                g2d.drawImage(buttonImg, buttonbuy.get(i).x, buttonbuy.get(i).y,buyWidth,buyHeight,null);\r\n            }\r\n        }\r\n        // 보스 그리기\r\n        if (!boss.isEmpty()) {\r\n            for (int i = 0; i < boss.size(); i++) {\r\n                // 보스 이미지 그리기\r\n                g2d.drawImage(bossImg, boss.get(i).x, boss.get(i).y - 20, null);\r\n\r\n                // 보스의 체력 상태를 기반으로 HP 이미지를 선택\r\n                int currentHealth = boss.get(i).health;\r\n                int maxHealth = boss.get(i).maxHealth; // 보스의 최대 체력\r\n\r\n                // 체력에 따른 HP 이미지를 표시\r\n                int hpIndex = (int) ((currentHealth / (double) maxHealth) * 11); // 0에서 11까지의 인덱스를 계산\r\n                hpIndex = Math.max(0, Math.min(11, hpIndex)); // 범위를 0 ~ 11로 제한\r\n                // HP 바 크기 조정 (예: 50% 크기)\r\n                int hpBarWidth = hpImages[hpIndex].getWidth(null) / 8; // 너비 50%\r\n                int hpBarHeight = hpImages[hpIndex].getHeight(null) / 8; // 높이 50%\r\n\r\n                // HP 바 그리기 (크기 조정 후)\r\n                g2d.drawImage(hpImages[hpIndex], boss.get(i).x - 20, boss.get(i).y - 60, hpBarWidth, hpBarHeight, null);\r\n            }\r\n        }\r\n\r\n        if(isReloading){\r\n            g2d.drawString(\"Reloading\", Framework.frameWidth/2, Framework.frameHeight/2);\r\n        }\r\n\r\n        g2d.drawImage(sightImg, mousePosition.x - sightImgMiddleWidth, mousePosition.y - sightImgMiddleHeight, null);\r\n        // 더블배럴샷건일 때 랜덤 오리 2마리 지정\r\n        if (framework.getGun().equals(\"더블배럴샷건\")) {\r\n            drawSightOnPlayerSelectedDucks(g2d);\r\n            reloadDuration = 2500000000L;\r\n        }\r\n        if(framework.getGun().equals(\"AK-47\")){\r\n            maxAmmo = 30;\r\n            reloadDuration = 3000000000L;\r\n            timeBetweenShots = 100_000_000L;\r\n        }\r\n\r\n        g2d.setFont(font);\r\n        g2d.setColor(Color.darkGray);\r\n\r\n        g2d.drawString(\"Ammo: \" + ammo + \"/\" + maxAmmo, 10, 50);\r\n        g2d.drawString(\"RUNAWAY: \" + runawayDucks, 10, 21);\r\n        g2d.drawString(\"KILLS: \" + killedDucks, 160, 21);\r\n        g2d.drawString(\"SHOOTS: \" + shoots, 299, 21);\r\n        g2d.drawString(\"SCORE: \" + score, 440, 21);\r\n        g2d.drawString(\"Round: \" + Round, 570, 21);\r\n        g2d.drawString(\"Money: \" + money, 700, 21);\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * Draw the game over screen.\r\n     *\r\n     * @param g2d Graphics2D\r\n     * @param mousePosition Current mouse position.\r\n     */\r\n    public void DrawGameOver(Graphics2D g2d, Point mousePosition)\r\n    {\r\n        Draw(g2d, mousePosition);\r\n\r\n        // The first text is used for shade.\r\n        g2d.setColor(Color.black);\r\n        g2d.drawString(\"kr.jbnu.se.std.Game Over\", Framework.frameWidth / 2 - 39, (int)(Framework.frameHeight * 0.65) + 1);\r\n        g2d.drawString(\"Press space or enter to restart.\", Framework.frameWidth / 2 - 149, (int)(Framework.frameHeight * 0.70) + 1);\r\n        g2d.setColor(Color.red);\r\n        g2d.drawString(\"kr.jbnu.se.std.Game Over\", Framework.frameWidth / 2 - 40, (int)(Framework.frameHeight * 0.65));\r\n        g2d.drawString(\"Press space or enter to restart.\", Framework.frameWidth / 2 - 150, (int)(Framework.frameHeight * 0.70));\r\n    }\r\n\r\n    public int getScore(){\r\n        return score;\r\n    }\r\n\r\n    public void setgun(String gun){\r\n        this.gun = gun;\r\n    }\r\n\r\n    private void Reload() {\r\n        isReloading = true;\r\n        reloadStartTime = System.nanoTime();\r\n    }\r\n}\r\n
===================================================================
diff --git a/src/main/java/kr/jbnu/se/std/MultiPlayer/MultiGame.java b/src/main/java/kr/jbnu/se/std/MultiPlayer/MultiGame.java
--- a/src/main/java/kr/jbnu/se/std/MultiPlayer/MultiGame.java	(revision 137fa387678d3515712c7f9341873492602cb66b)
+++ b/src/main/java/kr/jbnu/se/std/MultiPlayer/MultiGame.java	(date 1732689260418)
@@ -386,7 +386,7 @@
         ducks.clear();
         isPause = true;
         System.out.println("buttonbuyadd");
-        Framework.gameState = Framework.GameState.Pause;
+        Framework.gameState = Framework.GameState.PAUSE;
     }
 
 
