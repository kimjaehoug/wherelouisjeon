Index: src/main/java/kr/jbnu/se/std/Game.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package kr.jbnu.se.std;\n\nimport java.awt.*;\nimport java.awt.event.MouseEvent;\nimport java.awt.image.BufferedImage;\nimport java.io.File;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.util.*;\nimport java.util.List;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.ScheduledExecutorService;\nimport java.util.concurrent.TimeUnit;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport javax.imageio.ImageIO;\nimport javax.sound.sampled.*;\n//import java.util.Random;\n//import java.util.Arrays;\n\n/**\n * Actual game.\n *\n * @author www.gametutorial.net\n */\n\npublic class Game {\n\n    /**\n     * We use this to generate a random number.\n     */\n    private Random random = new Random();\n    List<GiftBox> giftBoxes = new ArrayList<>();\n    long lastGiftBoxTime = 0;\n    int minInterval = 9000; // 최소 간격 3초\n    int maxInterval = 30000; // 최대 간격 10초\n    int giftBoxInterval = getRandomInterval(minInterval, maxInterval); // 랜덤 간격\n    private Clip clip;\n    private Clip clipbg;\n    public int ed = 0;\n    private boolean isPause = false;\n    private int Round;\n    private boolean isBossAlive;\n    private Duck[] hunterSelectedDucks;\n    private Duck[] FireSelectedDucks;\n    private Duck[] playerSelectedDucks;\n    private int ammo;// 현재 사용 가능한 총알\n    boolean ending = true;\n    private int maxAmmo;       // 한 번에 장전할 수 있는 최대 탄약 수\n    private BufferedImage gameoverfImg;\n    private boolean isReloading; // 장전 중인지 여부\n    private long reloadStartTime; // 장전이 시작된 시간\n    private long reloadDuration;  // 장전 시간 (예: 2초)\n    private URL hpUrl;\n    private long endingStartTime = -1; // 엔딩이 시작된 시간을 저장하는 변수\n    private int selectduck;\n    private ScheduledExecutorService hunterExecutor;\n    private ScheduledExecutorService FireExecutor;\n    private int PlayerHp;\n    private BufferedImage sightImg_Fire;\n    private BufferedImage[] giftBoxImages = new BufferedImage[3];\n\n    /**\n     * Font that we will use to write statistic to the screen.\n     */\n    private Font font;\n    private BufferedImage gameoverImg;\n    boolean hunterTrigger = true;\n    private int damage;\n    private long lastClickTime = 0; // 마지막으로 클릭한 시간\n    private final long clickDelay = 1000; // 클릭 사이의 최소 간격 (밀리초)\n    private BufferedImage bossImg;\n    private BufferedImage boss2Img;\n    private BufferedImage boss3Img;\n    private BufferedImage boss4Img;\n    private BufferedImage boss5Img;\n    private BufferedImage bossAttack;\n    private BufferedImage hunter111Img;\n    private BufferedImage bossAttack2;\n    private BufferedImage bossAttack3;\n    private BufferedImage bossAttack4;\n    private BufferedImage bossAttack5;\n    private BufferedImage warningImg;\n    private BufferedImage[] hpImages = new BufferedImage[12];\n    private BufferedImage[] shopImages = new BufferedImage[4];// HP 이미지를 저장할 배열\n    private BufferedImage[] endingImages = new BufferedImage[4];\n    private int duckspeed;\n\n    /**\n     * Array list of the ducks.\n     */\n    private ArrayList<Duck> ducks;\n    private ArrayList<boss1> boss;\n    private ArrayList<Buttonbuy> buttonbuy;\n    private long lastBossAttackTime = 0;  // 마지막 공격 시간\n    private final long bossAttackInterval = 3000;\n    long lastBottomAttackTime = 0;\n    long bottomAttackInterval = 4000; // 공격 간격 (3초)\n    private ArrayList<Hunter1> Hunters;\n    private boolean Bosswith3delay;\n\n    /**\n     * How many ducks leave the screen alive?\n     */\n    private int runawayDucks;\n    private Framework framework;\n\n    /**\n     * How many ducks the player killed?\n     */\n    private int killedDucks;\n\n    /**\n     * For each killed duck, the player gets points.\n     */\n    private int score;\n    private int money;\n\n    /**\n     * How many times a player is shot?\n     */\n    private int shoots;\n    private boolean leaderboardSaved;\n    /**\n     * Last time of the shoot.\n     */\n    private long lastTimeShoot;\n    private boolean fire = false;\n    /**\n     * The time which must elapse between shots.\n     */\n    private long timeBetweenShots;\n    private BufferedImage giftBoxImg1;\n    private BufferedImage giftBoxImg2;\n    private BufferedImage giftBoxImg3;\n    /**\n     * kr.jbnu.se.std.Game background image.\n     */\n    private BufferedImage backgroundImg;\n    private BufferedImage backgroundImg2;\n    private BufferedImage backgroundImg3;\n    private BufferedImage backgroundImg4;\n    private BufferedImage backgroundImg5;\n    private BufferedImage buttonImg;\n    private BufferedImage sightImg_hunter;\n\n    /**\n     * Bottom grass.\n     */\n    private BufferedImage grassImg;\n\n    /**\n     * kr.jbnu.se.std.Duck image.\n     */\n    private BufferedImage duckImg;\n\n    /**\n     * Shotgun sight image.\n     */\n    private BufferedImage sightImg;\n    private boolean Hunter1 = false;\n\n    /**\n     * Middle width of the sight image.\n     */\n    private int sightImgMiddleWidth;\n    /**\n     * Middle height of the sight image.\n     */\n    private int sightImgMiddleHeight;\n    private String gun;\n    private List<BossAttack> bossAttacks = new ArrayList<>();\n    private List<BossAttack> bossAttacks2 = new ArrayList<>();\n    private List<BossAttack> bossAttacks3 = new ArrayList<>();\n    private List<BossAttack> bossAttacks4 = new ArrayList<>();\n    private List<BossAttack> bossAttacks5 = new ArrayList<>();\n    private int roundPass;\n\n    private static final String HIT_SOUND_PATH = \"src/main/resources/sounds/hit.wav\";\n    private static final String HIT_MESSAGE = \"Player hit! Remaining health: \";\n    private static final String BOSSATTCK_SOUND_PATH = \"src/main/resources/sounds/bossattck.wav\";\n\n    private static final String BUY_BUTTON_MESSAGE = \"buybutton\";\n    private static final String MOUSE_POSITION_MESSAGE = \"Mouse Position: \";\n    private static final String BUTTON_POSITION_MESSAGE = \"Button Position: \";\n\n\n\n    public Game(Framework framework) {\n        Framework.gameState = Framework.GameState.GAME_CONTENT_LOADING;\n        this.framework = framework;\n        Thread threadForInitGame = new Thread() {\n            @Override\n            public void run() {\n                // Sets variables and objects for the game.\n                Initialize();\n                // Load game files (images, sounds, ...)\n                LoadContent();\n\n                playBackgroundMusic(\"src/main/resources/sounds/MoonlightShadow.wav\");\n\n                updateGameState(Framework.GameState.PLAYING);\n            }\n        };\n        threadForInitGame.start();\n    }\n\n    // 게임 상태를 안전하게 업데이트하는 동기화된 메서드\n    private synchronized void updateGameState(Framework.GameState newState) {\n        Framework.gameState = newState;\n        if (newState == Framework.GameState.PLAYING) {\n            isPause = false;  // 일시 정지 상태 해제\n            System.out.println(\"Game is now playing.\");\n        }\n    }\n\n    // 랜덤한 시간 간격 생성 메서드\n    public int getRandomInterval(int min, int max) {\n        return min + (int) (Math.random() * (max - min));\n    }\n\n    /**\n     * Set variables and objects for the game.\n     */\n    private void Initialize() {\n        random = new Random();\n        font = new Font(\"monospaced\", Font.BOLD, 18);\n\n        ducks = new ArrayList<Duck>();\n        boss = new ArrayList<boss1>();\n        buttonbuy = new ArrayList<Buttonbuy>();\n        Hunters = new ArrayList<Hunter1>();\n        money = 0;\n        runawayDucks = 0;\n        killedDucks = 0;\n        score = 0;\n        roundPass = 60;\n        shoots = 0;\n        PlayerHp = 100;\n        Round = 1;\n        damage = 20;\n        isBossAlive = false;\n        Hunter1 = false;\n        lastTimeShoot = 0;\n        timeBetweenShots = 500_000_000L;\n\n        ammo = 6;              // 기본 탄약 수\n        maxAmmo = 6;           // 최대 장전할 수 있는 탄약 수\n        isReloading = false;   // 초기에는 장전 중이 아님\n        reloadDuration = 2000000000L; // 장전 시간 2초 (나노초 단위)\n    }\n\n    /**\n     * Load game files - images, sounds, ...\n     */\n    private void LoadContent() {\n        try {\n            loadImages(\"/images/hp_\", 12, hpImages);\n            loadImages(\"/images/shop\", 3, shopImages);\n            loadImages(\"/images/ending_\", 3, endingImages);\n\n            hunter111Img = loadImage(\"/images/hunterrrrr.png\");\n            gameoverImg = loadImage(\"/images/diegame.png\");\n            buttonImg = loadImage(\"/images/btn_buy.png\");\n\n            boss2Img = loadImage(\"/images/boss_crocs.png\");\n            boss3Img = loadImage(\"/images/boss_hippo.png\");\n            boss4Img = loadImage(\"/images/boss_dugong.png\");\n            boss5Img = loadImage(\"/images/duck_boss1.png\");\n\n            backgroundImg = loadImage(\"/images/background.png\");\n            backgroundImg3 = loadImage(\"/images/background_SAFARI.png\");\n            backgroundImg4 = loadImage(\"/images/bossbackground4.png\");\n            backgroundImg5 = loadImage(\"/images/boss_lv5.png\");\n            backgroundImg2 = loadImage(\"/images/background_mud.png\");\n\n            warningImg = loadImage(\"/images/warning.png\");\n            bossImg = loadImage(\"/images/boss.png\");\n            grassImg = loadImage(\"/images/grass.png\");\n            sightImg_hunter = loadImage(\"/images/sight_hunter.png\");\n            duckImg = loadImage(\"/images/duck.png\");\n            gameoverfImg = loadImage(\"/images/duck.png\");\n            sightImg = loadImage(\"/images/sight.png\");\n\n            sightImgMiddleWidth = sightImg.getWidth() / 2;\n            sightImgMiddleHeight = sightImg.getHeight() / 2;\n\n            bossAttack2 = loadImage(\"/images/crocs_mud.png\");\n            bossAttack3 = loadImage(\"/images/crocs_mud.png\");\n            bossAttack4 = loadImage(\"/images/waterball.png\");\n            bossAttack5 = loadImage(\"/images/skull.png\");\n            bossAttack = loadImage(\"/images/attack1.png\");\n\n            // giftBoxImages 배열에 이미지 로드\n            for (int i = 0; i < giftBoxImages.length; i++) {\n                giftBoxImages[i] = loadImage(\"/images/giftbox.png\");\n            }\n\n            sightImg_Fire = loadImage(\"/images/fire.png\");\n        } catch (IOException ex) {\n            Logger.getLogger(Game.class.getName()).log(Level.SEVERE, null, ex);\n        }\n    }\n\n    // 이미지 로드를 위한 공통 메서드\n    private BufferedImage loadImage(String path) throws IOException {\n        URL imgUrl = this.getClass().getResource(path);\n        if (imgUrl != null) {\n            return ImageIO.read(imgUrl);\n        } else {\n            System.out.println(\"Image not found: \" + path);\n            return null;\n        }\n    }\n\n    // 여러 이미지를 로드할 수 있는 메서드\n    private void loadImages(String basePath, int count, BufferedImage[] imageArray) {\n        for (int i = 0; i < count; i++) {\n            String path = basePath + i + \".png\";\n            try {\n                imageArray[i] = loadImage(path);\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    private void selectPlayerDucks(int numberOfDucks) {\n        // 선택된 오리들이 이미 있으면 리턴\n        if (playerSelectedDucks != null) {\n            return;\n        }\n\n        // 오리들이 충분히 있을 때 N마리 오리를 무작위로 선택\n        if (ducks.size() >= numberOfDucks) {\n            playerSelectedDucks = new Duck[numberOfDucks]; // Player 선택된 오리 배열 초기화\n\n            Set<Duck> selectedDucksSet = new HashSet<>();\n            selectedDucksSet.addAll(Arrays.asList(hunterSelectedDucks));\n            if (hunterSelectedDucks != null) {\n                selectedDucksSet.addAll(Arrays.asList(hunterSelectedDucks));\n            }\n            for (int i = 0; i < numberOfDucks; i++) {\n                Duck selectedDuck;\n                int index;\n\n                // 중복되지 않는 오리를 선택\n                do {\n                    index = random.nextInt(ducks.size());\n                    selectedDuck = ducks.get(index);\n                } while (selectedDucksSet.contains(selectedDuck));\n\n                playerSelectedDucks[i] = selectedDuck;\n                selectedDucksSet.add(selectedDuck);\n            }\n        }\n    }\n\n\n    // N마리 오리를 선택하는 메소드 (Hunter용)\n    private void selectHunterDucks(int numberOfDucks) {\n        if (ducks.size() >= numberOfDucks) {\n            hunterSelectedDucks = new Duck[numberOfDucks]; // Hunter 선택된 오리 배열 초기화\n            Set<Duck> selectedDucksSet = new HashSet<>();\n\n            for (int i = 0; i < numberOfDucks; i++) {\n                Duck selectedDuck;\n                int index;\n\n                // 중복되지 않는 오리를 선택\n                do {\n                    index = random.nextInt(ducks.size());\n                    selectedDuck = ducks.get(index);\n                } while (Arrays.asList(hunterSelectedDucks).contains(selectedDuck) || (playerSelectedDucks != null && Arrays.asList(playerSelectedDucks).contains(selectedDuck))); // 중복 방지\n\n                hunterSelectedDucks[i] = selectedDuck;\n                selectedDucksSet.add(selectedDuck);\n            }\n        }\n    }\n\n\n    // N마리 오리를 선택하는 메소드 (Hunter용)\n    private void selectFireDucks(int numberOfDucks) {\n        if (ducks.size() >= numberOfDucks) {\n            FireSelectedDucks = new Duck[numberOfDucks]; // Hunter 선택된 오리 배열 초기화\n            Set<Duck> selectedDucksSet = new HashSet<>();\n\n            for (int i = 0; i < numberOfDucks; i++) {\n                Duck selectedDuck;\n                int index;\n\n                // 중복되지 않는 오리를 선택\n                do {\n                    index = random.nextInt(ducks.size());\n                    selectedDuck = ducks.get(index);\n                } while (Arrays.asList(hunterSelectedDucks).contains(selectedDuck) ||\n                        (hunterSelectedDucks != null && Arrays.asList(hunterSelectedDucks).contains(selectedDuck)) ||\n                        (playerSelectedDucks != null && Arrays.asList(playerSelectedDucks).contains(selectedDuck))); // 중복 방지\n\n                FireSelectedDucks[i] = selectedDuck;\n                selectedDucksSet.add(selectedDuck);\n\n                System.out.println(\"Selected Fire Ducks: \" + Arrays.toString(FireSelectedDucks));\n\n            }\n        }\n    }\n\n    // Hunter가 자동으로 오리를 제거하는 메소드\n    private void startFireAutoKill(int interval) {\n        if (FireExecutor == null || FireExecutor.isShutdown()) {\n            FireExecutor = Executors.newScheduledThreadPool(1); // 새로 생성\n        }\n        FireExecutor.scheduleAtFixedRate(() -> {\n            if (FireSelectedDucks == null || Arrays.stream(FireSelectedDucks).allMatch(Objects::isNull)) {\n                // Hunter가 선택한 오리가 없으면 새롭게 선택\n                selectFireDucks(1);\n            }\n            if (FireSelectedDucks != null) {\n                for (Duck duck : FireSelectedDucks) {\n                    if (duck != null\n                            && !Arrays.asList(playerSelectedDucks).contains(duck)\n                            && !Arrays.asList(hunterSelectedDucks).contains(duck)) {\n                        // Hunter가 선택한 오리가 Player가 선택한 오리와 중복되지 않도록 확인\n                        ducks.remove(duck);\n                        killedDucks++;\n                        money += 10;\n                        score += duck.score;\n                        System.out.println(\"Hunter가 오리를 죽였습니다: \" + duck);\n                        break; // 한 마리씩 죽이고 나가도록\n\n                    }\n                }\n                updateFireSelectedDucks();\n            }\n        }, 0, interval, TimeUnit.MILLISECONDS); // interval 시간마다 실행\n    }\n\n\n\n    // 게임이 끝나면 Hunter의 자동조준 타이머를 중지하는 코드\n    private void stopFireAutoKill() {\n        if (FireExecutor != null && !FireExecutor.isShutdown()) {\n            FireExecutor.shutdown(); // Hunter의 자동 조준 종료\n        }\n    }\n\n\n    private void updateFireSelectedDucks() {\n        for (int i = 0; i < FireSelectedDucks.length; i++) {\n            if (hunterSelectedDucks[i] == null || !ducks.contains(hunterSelectedDucks[i]) || !ducks.contains(playerSelectedDucks[i])) {\n                // 새로운 오리를 선택하여 중복되지 않게 추가\n                Duck selectedDuck;\n                int index;\n\n                Set<Duck> selectedDucksSet = new HashSet<>();\n                selectedDucksSet.addAll(Arrays.asList(hunterSelectedDucks));\n                selectedDucksSet.addAll(Arrays.asList(playerSelectedDucks));\n                selectedDucksSet.addAll(Arrays.asList(FireSelectedDucks));\n\n                do {\n                    index = random.nextInt(ducks.size());\n                    selectedDuck = ducks.get(index);\n                } while (Arrays.asList(hunterSelectedDucks).contains(selectedDuck) ||\n                        Arrays.asList(playerSelectedDucks).contains(selectedDuck) ||\n                        Arrays.asList(FireSelectedDucks).contains(selectedDuck)); // 중복 방지\n\n                FireSelectedDucks[i] = selectedDuck;\n            }\n        }\n    }\n\n\n    // Hunter가 자동으로 오리를 제거하는 메소드\n    private void startHunterAutoKill(int interval) {\n        if (hunterExecutor == null || hunterExecutor.isShutdown()) {\n            hunterExecutor = Executors.newScheduledThreadPool(1); // 새로 생성\n        }\n        hunterExecutor.scheduleAtFixedRate(() -> {\n            if (hunterSelectedDucks == null || Arrays.stream(hunterSelectedDucks).allMatch(Objects::isNull)) {\n                // Hunter가 선택한 오리가 없으면 새롭게 선택\n                selectHunterDucks(1);\n            }\n            if (hunterSelectedDucks != null) {\n                for (Duck duck : hunterSelectedDucks) {\n                    if (duck != null && !Arrays.asList(playerSelectedDucks).contains(duck)) {\n                        // Hunter가 선택한 오리가 Player가 선택한 오리와 중복되지 않도록 확인\n                        ducks.remove(duck);\n                        killedDucks++;\n                        money += 10;\n                        score += duck.score;\n                        System.out.println(\"Hunter가 오리를 죽였습니다: \" + duck);\n                        break; // 한 마리씩 죽이고 나가도록\n\n                    }\n                }\n                updateHunterSelectedDucks();\n            }\n        }, 0, interval, TimeUnit.MILLISECONDS); // interval 시간마다 실행\n    }\n\n\n    // 게임이 끝나면 Hunter의 자동조준 타이머를 중지하는 코드\n    private void stopHunterAutoKill() {\n        if (hunterExecutor != null && !hunterExecutor.isShutdown()) {\n            hunterExecutor.shutdown(); // Hunter의 자동 조준 종료\n        }\n    }\n\n\n    private void updateAndReselectPlayerDucks(int numberOfDucks) {\n        // playerSelectedDucks가 null일 때만 새로 선택\n        playerSelectedDucks = null;\n        if (playerSelectedDucks == null) {\n            selectPlayerDucks(numberOfDucks);\n        }\n    }\n\n    // 오리들이 죽으면 Hunter 선택된 오리를 null로 설정\n    private void updateHunterSelectedDucks() {\n        Set<Duck> selectedDucksSet = new HashSet<>();\n        selectedDucksSet.addAll(Arrays.asList(hunterSelectedDucks));\n        selectedDucksSet.addAll(Arrays.asList(playerSelectedDucks));\n\n        for (int i = 0; i < hunterSelectedDucks.length; i++) {\n            if (hunterSelectedDucks[i] == null || !ducks.contains(hunterSelectedDucks[i])) {\n                // 새로운 오리를 선택하여 중복되지 않게 추가\n                Duck selectedDuck;\n                int index;\n\n                do {\n                    index = random.nextInt(ducks.size());\n                    selectedDuck = ducks.get(index);\n                } while (selectedDucksSet.contains(selectedDuck)); // 중복 방지\n\n                hunterSelectedDucks[i] = selectedDuck;\n                selectedDucksSet.add(selectedDuck);  // 선택된 오리 추가\n            }\n        }\n    }\n\n    // 더블배럴샷건 모드에서 Player 선택된 오리들에게 sightImg를 그리기\n    private void drawSightOnPlayerSelectedDucks(Graphics2D g2d) {\n        if (playerSelectedDucks != null) {\n            for (Duck duck : playerSelectedDucks) {\n                if (duck != null) {\n                    g2d.drawImage(sightImg, duck.x, duck.y, null);\n                }\n            }\n        }else{\n            return;\n        }\n    }\n\n\n\n    // 더블배럴샷건 모드에서 Hunter 선택된 오리들에게 sightImg를 그리기\n    private void drawSightOnHunterSelectedDucks(Graphics2D g2d) {\n        if (hunterSelectedDucks != null) {\n            for (Duck duck : hunterSelectedDucks) {\n                if (duck != null) {\n                    g2d.drawImage(sightImg_hunter, duck.x, duck.y,28,28,null);\n                }else{\n                    return;\n                }\n            }\n        }\n    }\n\n    // 더블배럴샷건 모드에서 Hunter 선택된 오리들에게 sightImg를 그리기\n    private void drawSightOnFireSelectedDucks(Graphics2D g2d) {\n        if (FireSelectedDucks != null) {\n            for (Duck duck : FireSelectedDucks) {\n                if (duck != null) {\n                    g2d.drawImage(sightImg_Fire, duck.x, duck.y,100,100,null);\n                }else{\n                    return;\n                }\n            }\n        }\n    }\n\n    /**\n     * Restart game - reset some variables.\n     */\n    public void RestartGame() {\n        // Removes all of the ducks from this list.\n        ducks.clear();\n\n        // We set last duckt time to zero.\n        Duck.setLastDuckTime(0);\n\n        runawayDucks = 0;\n        killedDucks = 0;\n        score = 0;\n        shoots = 0;\n\n        lastTimeShoot = 0;\n    }\n\n    public void Pause() {\n        ducks.clear();\n        isPause = true;\n        System.out.println(\"buttonbuyadd\");\n        updateGameState(Framework.GameState.PAUSE);\n        stopBackgroundMusic();\n    }\n\n    public enum GameState {\n        PAUSE, PLAYING, GAME_OVER, MAIN_MENU;\n    }\n\n    public void NextRound() {\n        updateGameState(Framework.GameState.PLAYING);\n        stopBackgroundMusic();\n        isPause = false;\n        //Duck.lastDuckTime = 0; // 오리 타이머 초기화\n        killedDucks = 0; // 죽인 오리 수 초기화\n        runawayDucks = 0; // 도망간 오리 수 초기화\n        Round += 1;\n        isBossAlive = false;\n        roundPass += 30;\n        if(Round == 2){\n            playBackgroundMusic(\"src/main/resources/sounds/JungleBook.wav\");\n        }else if(Round == 3){\n            playBackgroundMusic(\"src/main/resources/sounds/FantasticThemePark.wav\");\n        }else if(Round == 4){\n            playBackgroundMusic(\"src/main/resources/sounds/WhaleBelly.wav\");\n        }else if(Round == 5){\n            playBackgroundMusic(\"src/main/resources/sounds/TempleOfDarkness.wav\");\n        }\n\n    }\n\n    public void playActiveSound(String filePath){\n        try{\n            AudioInputStream audioStream = AudioSystem.getAudioInputStream(new File(filePath));\n            clip = AudioSystem.getClip();\n            clip.open(audioStream);\n            clip.start();\n        }catch(UnsupportedAudioFileException | IOException | LineUnavailableException e) {\n            e.printStackTrace();\n        }\n    }\n    public void stopBackgroundMusic() {\n        if (clipbg != null && clipbg.isRunning()) {\n            clipbg.stop();\n        }\n    }\n\n    public void playBackgroundMusic(String filePath){\n        try{\n            AudioInputStream audioStream = AudioSystem.getAudioInputStream(new File(filePath));\n            clipbg = AudioSystem.getClip();\n            clipbg.open(audioStream);\n            clipbg.start();\n        }catch(UnsupportedAudioFileException | IOException | LineUnavailableException e) {\n            e.printStackTrace();\n        }\n    }\n\n\n\n\n    /**\n     * Update game logic.\n     *\n     * @param gameTime      gameTime of the game.\n     * @param mousePosition current mouse position.\n     */\n    public void UpdateGame(long gameTime, Point mousePosition) {\n        if (framework.getGun().equals(\"더블배럴샷건\")) {\n            if (hunterSelectedDucks == null) {\n                hunterSelectedDucks = new Duck[0]; // 빈 배열로 초기화\n            }\n            selectPlayerDucks(1);\n        }else if(framework.getGun().equals(\"기본권총\")){\n\n        }\n        if (isBossAlive) {\n            for (int i = 0; i < boss.size(); i++) {\n                boss1 currentBoss = boss.get(i);\n                currentBoss.update(); // 보스 위치 업데이트\n\n                // 라운드에 따라 공격 생성\n                switch (Round) {\n                    case 1:\n                        handleRound1BossAttack(currentBoss);\n                        break;\n                    case 2:\n                        handleRound2BossAttack(currentBoss);\n                        break;\n                    case 3:\n                        handleRound3BossAttack(currentBoss, mousePosition);\n                        break;\n                    case 4:\n                        handleRound4BossAttack(currentBoss, mousePosition);\n                        break;\n                    case 5:\n                        handleRound5BossAttack(currentBoss, mousePosition);\n                        break;\n                }\n\n                // 공격 업데이트 및 충돌 처리\n                updateBossAttacks(mousePosition);\n            }\n        }\n\n        if(Hunter1&& hunterTrigger && !isPause){\n            startHunterAutoKill(2500);\n            hunterTrigger = false;\n        }else if(!Hunter1){\n        }else if(!hunterTrigger){\n\n        }\n        if (!isPause) {\n            handleGiftBoxUpdates(mousePosition); // 선물 상자 업데이트 및 충돌 처리\n            handleDuckUpdates(mousePosition);   // 오리 업데이트 및 생성 처리\n            handlePlayerShooting(mousePosition); // 플레이어 공격 처리\n            handleBossStateUpdates(mousePosition); // 보스 상태 업데이트 및 처리\n\n            // 게임 오버 조건 확인\n            if (runawayDucks >= 10 || PlayerHp <= 0) {\n                handleGameOver();\n            }\n        }\n\n        if(isPause) {\n            hunterTrigger = true;\n            stopHunterAutoKill();\n            buttonbuy.add(new Buttonbuy(framework.getWidth()/2 - 350, framework.getHeight()/2+50, buttonImg));\n            buttonbuy.add(new Buttonbuy(framework.getWidth()/2 -50, framework.getHeight()/2+50, buttonImg));\n            buttonbuy.add(new Buttonbuy(framework.getWidth()/2 + 250, framework.getHeight()/2+50, buttonImg));\n            // 마우스 포지션 및 버튼 클릭 상태 확인\n            boolean mouseClicked = false;\n            if (Canvas.mouseButtonState(MouseEvent.BUTTON1) && !mouseClicked) {\n                mouseClicked = true;\n                if(!Canvas.mouseButtonState(MouseEvent.BUTTON1)) {\n                    mouseClicked = false;\n                }\n                // 버튼 1 (헌터 구매)\n                if (money > 200 && Hunters.size() < 1) {\n                    Rectangle buttonArea1 = new Rectangle(buttonbuy.get(0).x, buttonbuy.get(0).y, 367, 257);\n                    if (buttonArea1.contains(mousePosition) && mouseClicked) {\n                        System.out.println(BUY_BUTTON_MESSAGE);\n                        Hunters.add(new Hunter1(220, 290, 0, 100, hunter111Img));\n                        Hunter1 = true;\n                        money -= 200;\n                        System.out.println(MOUSE_POSITION_MESSAGE + mousePosition);\n                        System.out.println(BUTTON_POSITION_MESSAGE + buttonbuy.get(0).x + \", \" + buttonbuy.get(0).y);\n                    }\n                }\n\n                // 버튼 2 (데미지 증가)\n                if (money > 100) {\n                    Rectangle buttonArea2 = new Rectangle(buttonbuy.get(1).x, buttonbuy.get(1).y, 367, 257);\n                    if (buttonArea2.contains(mousePosition)&& mouseClicked) {\n                        System.out.println(BUY_BUTTON_MESSAGE);\n                        damage += 10;\n                        money -= 100;\n                        System.out.println(MOUSE_POSITION_MESSAGE + mousePosition);\n                        System.out.println(BUTTON_POSITION_MESSAGE + buttonbuy.get(1).x + \", \" + buttonbuy.get(1).y);\n                    }\n                }\n\n                // 버튼 3 (최대 탄약 증가)\n                if (money > 100) {\n                    Rectangle buttonArea3 = new Rectangle(buttonbuy.get(2).x, buttonbuy.get(2).y, 367, 257);\n                    if (buttonArea3.contains(mousePosition) && mouseClicked) {\n                        System.out.println(BUY_BUTTON_MESSAGE);\n                        maxAmmo += 2;\n                        money -= 100;\n                        System.out.println(MOUSE_POSITION_MESSAGE + mousePosition);\n                        System.out.println(BUTTON_POSITION_MESSAGE + buttonbuy.get(2).x + \", \" + buttonbuy.get(2).y);\n                    }\n                }\n            }\n        }\n        if(Hunters.size() > 0) {\n            Hunter1 = true;\n        }\n    }\n\n    public void drawBossAttack(Graphics2D g2d){\n        for(int i = 0; i < bossAttacks.size(); i++) {\n            g2d.drawImage(bossAttack, bossAttacks.get(i).x,bossAttacks.get(i).y, null );\n        }\n    }\n\n    private void spawnBossWithDelay() {\n        // 3초 후 보스 생성\n        ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);\n        scheduler.schedule(() -> {\n            if(Round == 1){\n                boss.add(new boss1(1200, 400, 0, 1000,200,bossImg));\n            }else if(Round == 2){\n                boss.add(new boss1(1200,400,0,1500, 400,boss2Img));\n            }else if(Round == 3){\n                boss.add(new boss1(1200,400, 0, 2000, 2500,boss3Img));\n            }else if(Round == 4){\n                boss.add(new boss1(1200,400,0,3000, 6400, boss4Img));\n            }else if(Round == 5){\n                boss.add(new boss1(1200,400,0,4000, 12000, boss5Img));\n            }\n            stopBackgroundMusic();\n            if(Round == 1) {\n                playBackgroundMusic(\"src/main/resources/sounds/AquaCave.wav\");\n            }else if(Round == 2){\n                playBackgroundMusic(\"src/main/resources/sounds/RuinCastle.wav\");\n            }else if(Round == 3){\n                playBackgroundMusic(\"src/main/resources/sounds/ArabPirate.wav\");\n            }else if(Round == 4){\n                playBackgroundMusic(\"src/main/resources/sounds/SinkingThings.wav\");\n            }else if(Round == 5){\n                playBackgroundMusic(\"src/main/resources/sounds/WorldHorizon.wav\");\n            }\n            isBossAlive = true; // 보스가 등장했음을 표시\n            System.out.println(\"Boss activity\");\n            ducks.clear();\n            Bosswith3delay = false;\n        }, 3, TimeUnit.SECONDS); // 3초 후 실행\n    }\n\n    private void handleRound1BossAttack(boss1 currentBoss) {\n        if (System.nanoTime() - lastBossAttackTime >= bossAttackInterval * 1_000_000) {\n            for (int j = 0; j < 3; j++) {\n                double angle = 150 + Math.random() * 70;\n                bossAttacks.add(new BossAttack(currentBoss.x, currentBoss.y, angle, 15));\n            }\n            playActiveSound(BOSSATTCK_SOUND_PATH);\n            lastBossAttackTime = System.nanoTime();\n        }\n    }\n\n    private void handleRound2BossAttack(boss1 currentBoss) {\n        if (System.nanoTime() - lastBossAttackTime >= bossAttackInterval * 900_000) {\n            double gravity = 6, speed = 150, deltaTime = 0.1;\n\n            for (int j = 0; j < 4; j++) {\n                double angle = Math.toRadians(150 + Math.random() * 70);\n                double vx = speed * Math.cos(angle);\n                double vy = speed * Math.sin(angle);\n                bossAttacks2.add(new BossAttack(currentBoss.x, currentBoss.y, vx, vy, gravity, deltaTime));\n            }\n\n            playActiveSound(BOSSATTCK_SOUND_PATH);\n            lastBossAttackTime = System.nanoTime();\n        }\n    }\n\n    private void handleRound3BossAttack(boss1 currentBoss, Point mousePosition) {\n        if (System.nanoTime() - lastBossAttackTime >= bossAttackInterval * 900_000) {\n            double gravity = 6, speed = 150, deltaTime = 0.1;\n\n            // 랜덤 각도 공격\n            for (int j = 0; j < 4; j++) {\n                double angle = Math.toRadians(150 + Math.random() * 70);\n                double vx = speed * Math.cos(angle);\n                double vy = speed * Math.sin(angle);\n                bossAttacks3.add(new BossAttack(currentBoss.x, currentBoss.y, vx, vy, gravity, deltaTime));\n            }\n\n            // 유도탄 공격\n            addHomingAttack(currentBoss, mousePosition, bossAttacks3, gravity, deltaTime);\n\n            playActiveSound(BOSSATTCK_SOUND_PATH);\n            lastBossAttackTime = System.nanoTime();\n        }\n    }\n\n    private void handleRound4BossAttack(boss1 currentBoss, Point mousePosition) {\n        if (System.nanoTime() - lastBossAttackTime >= bossAttackInterval * 900_000) {\n            double gravity = 6, speed = 150, deltaTime = 0.1;\n\n            // 랜덤 각도 공격\n            for (int j = 0; j < 4; j++) {\n                double angle = Math.toRadians(150 + Math.random() * 70);\n                double vx = speed * Math.cos(angle);\n                double vy = speed * Math.sin(angle);\n                bossAttacks4.add(new BossAttack(currentBoss.x, currentBoss.y, vx, vy, gravity, deltaTime));\n            }\n\n            // 유도탄 공격\n            addHomingAttack(currentBoss, mousePosition, bossAttacks4, gravity, deltaTime);\n\n            // 밑에서 올라오는 공격\n            if (System.nanoTime() - lastBottomAttackTime >= bottomAttackInterval * 900_000) {\n                addBottomAttack(currentBoss, bossAttacks4, gravity, deltaTime);\n                lastBottomAttackTime = System.nanoTime();\n            }\n\n            playActiveSound(BOSSATTCK_SOUND_PATH);\n            lastBossAttackTime = System.nanoTime();\n        }\n    }\n\n    private void handleRound5BossAttack(boss1 currentBoss, Point mousePosition) {\n        if (System.nanoTime() - lastBossAttackTime >= bossAttackInterval * 900_000) {\n            double gravity = 6, speed = 150, deltaTime = 0.1;\n\n            // 랜덤 각도 공격\n            for (int j = 0; j < 4; j++) {\n                double angle = Math.toRadians(150 + Math.random() * 70);\n                double vx = speed * Math.cos(angle);\n                double vy = speed * Math.sin(angle);\n                bossAttacks5.add(new BossAttack(currentBoss.x, currentBoss.y, vx, vy, gravity, deltaTime));\n            }\n\n            // 유도탄 공격\n            addHomingAttack(currentBoss, mousePosition, bossAttacks5, gravity, deltaTime);\n\n            // 밑에서 올라오는 공격\n            addBottomAttack(currentBoss, bossAttacks5, gravity, deltaTime);\n\n            playActiveSound(BOSSATTCK_SOUND_PATH);\n            lastBossAttackTime = System.nanoTime();\n        }\n    }\n\n    private void addHomingAttack(boss1 boss, Point mousePosition, List<BossAttack> attacks, double gravity, double deltaTime) {\n        double speed = 150;\n        double dx = mousePosition.getX() - boss.x;\n        double dy = mousePosition.getY() - boss.y;\n        double homingAngle = Math.atan2(dy, dx);\n\n        double vx = speed * Math.cos(homingAngle);\n        double vy = speed * Math.sin(homingAngle);\n        attacks.add(new BossAttack(boss.x, boss.y, vx, vy, gravity, deltaTime));\n    }\n    private void addBottomAttack(boss1 boss, List<BossAttack> attacks, double gravity, double deltaTime) {\n        double speed = 150;\n        double screenBottomX1 = framework.getWidth() / 2.0;\n        double screenBottomX2 = framework.getWidth() * (0.11 + Math.random() * (0.33 - 0.11));\n        double screenBottomX3 = framework.getWidth() * (0.11 + Math.random() * (0.33 - 0.11));\n        double screenBottomY = framework.getHeight();\n        double upwardAngle = Math.toRadians(80 + Math.random() * 10);\n\n        double vx = speed * Math.cos(upwardAngle);\n        double vy = -speed * Math.sin(upwardAngle);\n\n        attacks.add(new BossAttack((int) screenBottomX1, (int) screenBottomY, vx, vy, gravity, deltaTime));\n        attacks.add(new BossAttack((int) screenBottomX2, (int) screenBottomY, vx, vy, gravity, deltaTime));\n        attacks.add(new BossAttack((int) screenBottomX3, (int) screenBottomY, vx, vy, gravity, deltaTime));\n    }\n\n    private void updateBossAttacks(Point mousePosition) {\n        List<List<BossAttack>> allAttacks = Arrays.asList(bossAttacks, bossAttacks2, bossAttacks3, bossAttacks4, bossAttacks5);\n\n        for (List<BossAttack> attacks : allAttacks) {\n            Iterator<BossAttack> iterator = attacks.iterator();\n            while (iterator.hasNext()) {\n                BossAttack attack = iterator.next();\n                attack.updatewithgravity();\n\n                if (attack.isHit(mousePosition)) {\n                    System.out.println(HIT_MESSAGE);\n                    PlayerHp -= 10;\n                    playActiveSound(HIT_SOUND_PATH);\n                    iterator.remove();\n                } else if (attack.x < 0 || attack.x > framework.getWidth() || attack.y < 0 || attack.y > framework.getHeight()) {\n                    iterator.remove();\n                }\n            }\n        }\n    }\n    private void handleGiftBoxUpdates(Point mousePosition) {\n        int maxGiftBoxes = 1;\n        int random = 1 + (int) (Math.random() * 1000);\n\n        // 선물 상자 생성\n        if (System.nanoTime() - lastGiftBoxTime >= giftBoxInterval * 1_000_000) {\n            if (giftBoxes.size() < maxGiftBoxes && random == 50) {\n                int randomX = (int) (Math.random() * (framework.getWidth() - 50));\n                int fallSpeed = 5 + (int) (Math.random() * 5);\n                int giftBoxType = 1 + (int) (Math.random() * 3);\n                BufferedImage selectedImg = getGiftBoxImage(giftBoxType);\n\n                giftBoxes.add(new GiftBox(randomX, 0, 150, 150, fallSpeed, giftBoxType, selectedImg));\n                lastGiftBoxTime = System.nanoTime();\n                giftBoxInterval = getRandomInterval(minInterval, maxInterval);\n            }\n        }\n\n        // 선물 상자 업데이트 및 충돌 처리\n        Iterator<GiftBox> iterator = giftBoxes.iterator();\n        while (iterator.hasNext()) {\n            GiftBox giftBox = iterator.next();\n            giftBox.update();\n\n            // 충돌 확인\n            if (new Rectangle(giftBox.x + 18, giftBox.y, 150, 150).contains(mousePosition)\n                    && Canvas.mouseButtonState(MouseEvent.BUTTON1)) {\n                processGiftBoxEffect(giftBox);\n                iterator.remove();\n            }\n\n            // 화면 밖으로 나간 상자 제거\n            if (giftBox.y > framework.getHeight()) {\n                iterator.remove();\n            }\n        }\n    }\n    private void processGiftBoxEffect(GiftBox giftBox) {\n        System.out.println(\"Player collected a gift!\");\n\n        if (giftBox.type == 1) {\n            fire = true;\n            startFireAutoKill(1500);\n\n            // 9초 후 Fire 효과 중지\n            ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);\n            scheduler.schedule(() -> {\n                stopFireAutoKill();\n                fire = false;\n            }, 9, TimeUnit.SECONDS);\n        } else if (giftBox.type == 2) {\n            // 오리 속도 증가\n            for (Duck duck : ducks) {\n                if (duck.getSpeed() > -3) {\n                    duck.setSpeed(duck.getSpeed() + 1);\n                }\n            }\n\n            // 3초 후 속도 복원\n            ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);\n            scheduler.schedule(() -> {\n                for (Duck duck : ducks) {\n                    if (duck.getSpeed() > -4) {\n                        duck.setSpeed(duck.getSpeed() - 1);\n                    }\n                }\n            }, 3, TimeUnit.SECONDS);\n        } else if (giftBox.type == 3) {\n            PlayerHp += 10; // 체력 증가\n        }\n    }\n    private void handleDuckUpdates(Point mousePosition) {\n        if (isBossAlive) {\n            return;\n        }\n        if (System.nanoTime() - Duck.lastDuckTime >= Duck.timeBetweenDucks) {\n            ducks.add(new Duck(Duck.duckLines[Duck.nextDuckLines][0] + random.nextInt(200),\n                    Duck.duckLines[Duck.nextDuckLines][1],\n                    Duck.duckLines[Duck.nextDuckLines][2],\n                    Duck.duckLines[Duck.nextDuckLines][3], duckImg));\n\n            Duck.incrementNextDuckLines();\n            if (Duck.nextDuckLines >= Duck.duckLines.length) {\n                Duck.resetNextDuckLines();\n            }\n            Duck.setLastDuckTime(System.nanoTime());\n        }\n\n        // 오리 업데이트\n        Iterator<Duck> iterator = ducks.iterator();\n        while (iterator.hasNext()) {\n            Duck duck = iterator.next();\n            duck.Update();\n\n            if (duck.x < 0 - duckImg.getWidth()) {\n                iterator.remove();\n                runawayDucks++;\n            }\n        }\n\n        // 보스 생성 조건 확인\n        if (killedDucks >= roundPass && !isBossAlive) {\n            spawnBossWithDelay();\n            stopBackgroundMusic();\n            playBackgroundMusic(\"src/main/resources/sounds/warning.wav\");\n            isBossAlive = true;\n            ducks.clear();\n        }\n    }\n    private void handlePlayerShooting(Point mousePosition) {\n        if (System.nanoTime() - lastTimeShoot < timeBetweenShots) {\n            return; // 발사 간격이 충족되지 않으면 아무 작업도 하지 않음\n        }\n        if (Canvas.mouseButtonState(MouseEvent.BUTTON1)) {\n            // 선택된 오리 처리\n            if (System.nanoTime() - lastTimeShoot > timeBetweenShots && !isReloading) {\n\n                if (playerSelectedDucks != null) {\n                    for (int i = 0; i < playerSelectedDucks.length; i++) {\n                        if (playerSelectedDucks[i] != null && ducks.contains(playerSelectedDucks[i])) {\n                            playActiveSound(\"src/main/resources/sounds/quack.wav\");\n                            killedDucks++;\n                            money += 10;\n                            score += playerSelectedDucks[i].score;\n\n                            // 오리 리스트에서 제거\n                            ducks.remove(playerSelectedDucks[i]);\n                            playerSelectedDucks[i] = null; // 초기화\n                        }\n                    }\n                    updateAndReselectPlayerDucks(1); // 선택된 오리 갱신\n                }\n\n                // 재장전 확인\n                if (isReloading) {\n                    System.out.println(\"Reloading... Please wait!\");\n                    return; // 재장전 중에는 공격 불가\n                }\n\n                // 탄약 확인\n                if (ammo <= 0) {\n                    System.out.println(\"Out of ammo! Reloading...\");\n                    Reload(); // 재장전 시작\n                    return;\n                }\n\n                // 발사 간격 확인\n                if (System.nanoTime() - lastTimeShoot >= timeBetweenShots) {\n                    shoots++;\n                    playActiveSound(\"src/main/resources/sounds/gun.wav\");\n                    ammo--; // 탄약 소모\n\n                    // 일반 오리와 충돌 확인\n                    Iterator<Duck> iterator = ducks.iterator();\n                    while (iterator.hasNext()) {\n                        Duck duck = iterator.next();\n                        if (isDuckHit(duck, mousePosition)) {\n                            playActiveSound(\"src/main/resources/sounds/quack.wav\");\n                            killedDucks++;\n                            money += 10;\n                            score += duck.score;\n                            iterator.remove(); // 안전하게 제거\n                            break; // 한 마리 처리 후 종료\n                        }\n                    }\n\n                    lastTimeShoot = System.nanoTime(); // 마지막 발사 시간 갱신\n                }\n            }\n        }\n    }\n\n\n\n    private boolean isDuckHit(Duck duck, Point mousePosition) {\n        return new Rectangle(duck.x + 18, duck.y, 27, 30).contains(mousePosition) ||\n                new Rectangle(duck.x + 30, duck.y + 30, 88, 25).contains(mousePosition);\n    }\n    private void handleBossStateUpdates(Point mousePosition) {\n        if (!isBossAlive || boss.isEmpty()) return; // 보스가 없으면 처리 중단\n\n        Iterator<boss1> bossIterator = boss.iterator();\n        while (bossIterator.hasNext()) {\n            boss1 currentBoss = bossIterator.next();\n            currentBoss.update(); // 보스 위치 및 상태 업데이트\n\n            // 플레이어 공격 처리\n            if (Canvas.mouseButtonState(MouseEvent.BUTTON1) &&\n                    new Rectangle(currentBoss.x, currentBoss.y, 378, 268).contains(mousePosition)) {\n                currentBoss.health -= damage; // 보스 체력 감소\n                playActiveSound(\"src/main/resources/sounds/gun.wav\");\n\n                // 보스 체력이 0 이하일 경우\n                if (currentBoss.health <= 0) {\n                    money += 100;\n                    score += currentBoss.score;\n                    bossIterator.remove();// 보스를 제거\n                    isBossAlive = false;\n\n                    if (Round == 5) {\n                        Framework.setGameState(Framework.GameState.ENDING); // 엔딩 상태로 전환\n                        stopBackgroundMusic();\n                        playBackgroundMusic(\"src/main/resources/sounds/NewBeginningNotTheEnd.wav\");\n                        System.out.println(\"Game Ending Triggered\");\n                    } else {\n                        Pause(); // 다음 라운드를 위해 일시 정지\n                    }\n                }\n            }\n        }\n    }\n\n    private void handleGameOver() {\n        Framework.setGameState(Framework.GameState.GAMEOVER);\n        if (!leaderboardSaved) {\n            framework.saveScore(score);\n            framework.saveMoney(score);\n            leaderboardSaved = true;\n        }\n    }\n\n\n\n\n\n\n    /**\n     * Draw the game to the screen.\n     *\n     * @param g2d Graphics2D\n     * @param mousePosition current mouse position.\n     */\n\n    public void Draw(Graphics2D g2d, Point mousePosition) {\n        drawBackground(g2d);\n        drawDucks(g2d);\n        drawBossWarning(g2d);\n        drawHunter1(g2d);\n        drawBossAttacks(g2d);\n        drawBoss(g2d);\n        drawButtonsAndShop(g2d);\n        drawGiftBoxes(g2d);\n        configureGunSettings(g2d);\n        drawGunSightAndReloadStatus(g2d, mousePosition);\n        drawHUD(g2d);\n    }\n\n    // 배경 그리기\n    private void drawBackground(Graphics2D g2d) {\n        Image[] backgrounds = { backgroundImg, backgroundImg2, backgroundImg3, backgroundImg4, backgroundImg5 };\n        if (Round >= 1 && Round <= 5) {\n            g2d.drawImage(backgrounds[Round - 1], 0, 0, Framework.frameWidth, Framework.frameHeight, null);\n        }\n    }\n\n    // 모든 오리 그리기\n    private void drawDucks(Graphics2D g2d) {\n        for (int i = 0; i < ducks.size(); i++) {\n            ducks.get(i).Draw(g2d);\n        }\n    }\n\n    // 보스 공격 경고 그리기\n    private void drawBossWarning(Graphics2D g2d) {\n        if (Bosswith3delay) {\n            g2d.drawImage(warningImg, Framework.frameWidth / 2 - 275, Framework.frameHeight / 2 - 250, null);\n        }\n    }\n\n    // 헌터1 그리기 및 관련 처리\n    private void drawHunter1(Graphics2D g2d) {\n        if (Hunter1) {\n            g2d.drawImage(hunter111Img, Hunters.get(0).x, Hunters.get(0).y, null);\n            drawSightOnHunterSelectedDucks(g2d);\n        }\n    }\n\n    // 보스 공격 처리 (보스 공격 목록 및 이미지 그리기)\n    private void drawBossAttacks(Graphics2D g2d) {\n        List<List<BossAttack>> bossAttackLists = Arrays.asList(bossAttacks, bossAttacks2, bossAttacks3, bossAttacks4, bossAttacks5);\n        List<Image> bossAttackImages = Arrays.asList(bossAttack, bossAttack2, bossAttack3, bossAttack4, bossAttack5);\n\n        for (int i = 0; i < bossAttackLists.size(); i++) {\n            List<BossAttack> currentList = bossAttackLists.get(i);\n            Image currentImage = bossAttackImages.get(i);\n\n            if (currentList.size() > 0) {\n                for (BossAttack attack : currentList) {\n                    g2d.drawImage(currentImage, attack.x, attack.y, 100, 100, null);\n                }\n            }\n        }\n    }\n\n    // 보스 그리기 및 HP 바 그리기\n    private void drawBoss(Graphics2D g2d) {\n        if (!boss.isEmpty()) {\n            for (int i = 0; i < boss.size(); i++) {\n                BufferedImage bossImage = getBossImageForRound();\n                if (bossImage != null) {\n                    g2d.drawImage(bossImage, boss.get(i).x - 90, boss.get(i).y - 20, 378, 268, null);\n                }\n\n                drawBossHealthBar(g2d, i);\n            }\n        }\n    }\n\n    private BufferedImage getBossImageForRound() {\n        switch (Round) {\n            case 1: return bossImg;\n            case 2: return boss2Img;\n            case 3: return boss3Img;\n            case 4: return boss4Img;\n            case 5: return boss5Img;\n            default: System.err.println(\"Warning: Unexpected gift box type: \" + Round); return null;\n        }\n    }\n\n    private void drawBossHealthBar(Graphics2D g2d, int i) {\n        int currentHealth = boss.get(i).health;\n        int maxHealth = boss.get(i).maxHealth;\n        int hpIndex = (int) ((currentHealth / (double) maxHealth) * 11);\n        hpIndex = Math.max(0, Math.min(11, hpIndex));\n\n        int hpBarWidth = hpImages[hpIndex].getWidth(null) / 8;\n        int hpBarHeight = hpImages[hpIndex].getHeight(null) / 8;\n        g2d.drawImage(hpImages[hpIndex], boss.get(i).x - 20, boss.get(i).y - 60, hpBarWidth, hpBarHeight, null);\n    }\n\n    // 버튼과 상점 그리기\n    private void drawButtonsAndShop(Graphics2D g2d) {\n        if (isPause) {\n            int buyWidth = buttonImg.getWidth(null) / 2;\n            int buyHeight = buttonImg.getHeight(null) / 2;\n            for (int i = 0; i < buttonbuy.size(); i++) {\n                g2d.drawImage(buttonImg, buttonbuy.get(i).x, buttonbuy.get(i).y, buyWidth, buyHeight, null);\n                if (i < shopImages.length) {\n                    g2d.drawImage(shopImages[i], buttonbuy.get(i).x - 60, buttonbuy.get(i).y - 250, 300, 300, null);\n                }\n            }\n        }\n    }\n\n    // 선물 상자 그리기\n    private void drawGiftBoxes(Graphics2D g2d) {\n        if (giftBoxes != null) {\n            for (GiftBox giftBox : giftBoxes) {\n                BufferedImage selectedImg = getGiftBoxImage(giftBox.type);\n                if (selectedImg != null) {\n                    g2d.drawImage(selectedImg, giftBox.x, giftBox.y, giftBox.width, giftBox.height, null);\n                }\n            }\n        }\n    }\n\n    private BufferedImage getGiftBoxImage(int type) {\n        switch (type) {\n            case 1: return giftBoxImg1;\n            case 2: return giftBoxImg2;\n            case 3: return giftBoxImg3;\n            default:\n                System.err.println(\"Warning: Unexpected gift box type: \" + type);\n                return null;\n        }\n    }\n\n    // 총기 설정\n    private void configureGunSettings(Graphics2D g2d) {\n        if (framework.getGun().equals(\"더블배럴샷건\")) {\n            drawSightOnPlayerSelectedDucks(g2d);\n            reloadDuration = 2500000000L;\n        } else if (framework.getGun().equals(\"AK-47\")) {\n            maxAmmo = 30;\n            reloadDuration = 3000000000L;\n            timeBetweenShots = 100_000_000L;\n        }\n    }\n\n    // 총기 조준선과 리로드 상태 그리기\n    private void drawGunSightAndReloadStatus(Graphics2D g2d, Point mousePosition) {\n        if (fire) {\n            drawSightOnFireSelectedDucks(g2d);\n        }\n        if (isReloading) {\n            g2d.drawString(\"Reloading\", Framework.frameWidth / 2, Framework.frameHeight / 2);\n        }\n\n        g2d.drawImage(sightImg, mousePosition.x - sightImgMiddleWidth, mousePosition.y - sightImgMiddleHeight, null);\n    }\n\n    // HUD (Heads-Up Display) 그리기\n    private void drawHUD(Graphics2D g2d) {\n        g2d.setFont(font);\n        g2d.setColor(Color.darkGray);\n\n        g2d.drawString(\"Ammo: \" + ammo + \"/\" + maxAmmo, 10, 50);\n        g2d.drawString(\"RUNAWAY: \" + runawayDucks, 10, 21);\n        g2d.drawString(\"KILLS: \" + killedDucks, 160, 21);\n        g2d.drawString(\"SHOOTS: \" + shoots, 299, 21);\n        g2d.drawString(\"SCORE: \" + score, 440, 21);\n        g2d.drawString(\"Round: \" + Round, 570, 21);\n        g2d.drawString(\"Money: \" + money, 700, 21);\n        g2d.drawString(\"PlayerHP: \" + PlayerHp, 10, 80);\n    }\n\n    /**\n     * Draw the game over screen.\n     *\n     * @param g2d Graphics2D\n     * @param mousePosition Current mouse position.\n     */\n    public void DrawGameOver(Graphics2D g2d, Point mousePosition)\n    {\n        Draw(g2d, mousePosition);\n        g2d.drawImage(gameoverImg, 0,0,Framework.frameWidth,Framework.frameHeight, null);\n        g2d.drawImage(gameoverfImg, Framework.frameWidth/2,Framework.frameHeight/2,400,400, null);\n    }\n    public void DrawEnding(Graphics2D g2d, Point mousePosition, long gameTime) {\n        // 배경화면 설정 (엔딩 전용 배경 이미지)\n        g2d.drawImage(endingImages[ed], 0, 0, Framework.frameWidth-50, Framework.frameHeight-50, null);\n    }\n    public void NextEnding(){\n        ed++;\n    }\n\n    public int getScore(){\n        return score;\n    }\n\n    public void setgun(String gun){\n        this.gun = gun;\n    }\n\n    private void Reload() {\n        if (isReloading) return; // 이미 재장전 중이면 아무것도 하지 않음\n\n        isReloading = true; // 재장전 상태로 설정\n        playActiveSound(\"src/main/resources/sounds/reloading.wav\");\n        reloadStartTime = System.nanoTime(); // 재장전 시작 시간 기록\n\n        // 재장전 완료 후 탄약 갱신\n        ScheduledExecutorService scheduler = Executors.newSingleThreadScheduledExecutor();\n        scheduler.schedule(() -> {\n            ammo = maxAmmo; // 탄약을 최대치로 채움\n            isReloading = false; // 재장전 완료 상태로 변경\n            System.out.println(\"Reload Complete! Ammo refilled.\");\n            scheduler.shutdown();\n        }, reloadDuration / 1_000_000, TimeUnit.MILLISECONDS); // 나노초를 밀리초로 변환\n    }\n}\n\n\n\n\n\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/kr/jbnu/se/std/Game.java b/src/main/java/kr/jbnu/se/std/Game.java
--- a/src/main/java/kr/jbnu/se/std/Game.java	(revision e345472118693a8590edc2ef168582159a17586a)
+++ b/src/main/java/kr/jbnu/se/std/Game.java	(date 1733117194742)
@@ -675,7 +675,7 @@
                 hunterSelectedDucks = new Duck[0]; // 빈 배열로 초기화
             }
             selectPlayerDucks(1);
-        }else if(framework.getGun().equals("기본권총")){
+        } else if (framework.getGun().equals("기본권총")) {
 
         }
         if (isBossAlive) {
@@ -707,11 +707,11 @@
             }
         }
 
-        if(Hunter1&& hunterTrigger && !isPause){
+        if (Hunter1 && hunterTrigger && !isPause) {
             startHunterAutoKill(2500);
             hunterTrigger = false;
-        }else if(!Hunter1){
-        }else if(!hunterTrigger){
+        } else if (!Hunter1) {
+        } else if (!hunterTrigger) {
 
         }
         if (!isPause) {
@@ -726,67 +726,70 @@
             }
         }
 
-        if(isPause) {
-            hunterTrigger = true;
-            stopHunterAutoKill();
-            buttonbuy.add(new Buttonbuy(framework.getWidth()/2 - 350, framework.getHeight()/2+50, buttonImg));
-            buttonbuy.add(new Buttonbuy(framework.getWidth()/2 -50, framework.getHeight()/2+50, buttonImg));
-            buttonbuy.add(new Buttonbuy(framework.getWidth()/2 + 250, framework.getHeight()/2+50, buttonImg));
-            // 마우스 포지션 및 버튼 클릭 상태 확인
-            boolean mouseClicked = false;
-            if (Canvas.mouseButtonState(MouseEvent.BUTTON1) && !mouseClicked) {
-                mouseClicked = true;
-                if(!Canvas.mouseButtonState(MouseEvent.BUTTON1)) {
-                    mouseClicked = false;
-                }
-                // 버튼 1 (헌터 구매)
-                if (money > 200 && Hunters.size() < 1) {
-                    Rectangle buttonArea1 = new Rectangle(buttonbuy.get(0).x, buttonbuy.get(0).y, 367, 257);
-                    if (buttonArea1.contains(mousePosition) && mouseClicked) {
-                        System.out.println(BUY_BUTTON_MESSAGE);
-                        Hunters.add(new Hunter1(220, 290, 0, 100, hunter111Img));
-                        Hunter1 = true;
-                        money -= 200;
-                        System.out.println(MOUSE_POSITION_MESSAGE + mousePosition);
-                        System.out.println(BUTTON_POSITION_MESSAGE + buttonbuy.get(0).x + ", " + buttonbuy.get(0).y);
-                    }
-                }
+        if (isPause) {
+            handlePauseState(mousePosition);
+        }
+
+        if (Hunters.size() > 0) {
+            Hunter1 = true;
+        }
+    }
+
+    public void drawBossAttack(Graphics2D g2d){
+        for(int i = 0; i < bossAttacks.size(); i++) {
+            g2d.drawImage(bossAttack, bossAttacks.get(i).x,bossAttacks.get(i).y, null );
+        }
+    }
+
+    private void handlePauseState(Point mousePosition) {
+        hunterTrigger = true;
+        stopHunterAutoKill();
+        initializeButtonBuy();
+
+        // 마우스 클릭 상태 확인
+        if (Canvas.mouseButtonState(MouseEvent.BUTTON1)) {
+            processButtonClick(mousePosition);
+        }
+    }
+
+    private void initializeButtonBuy() {
+        if (buttonbuy.isEmpty()) {
+            buttonbuy.add(new Buttonbuy(framework.getWidth() / 2 - 350, framework.getHeight() / 2 + 50, buttonImg));
+            buttonbuy.add(new Buttonbuy(framework.getWidth() / 2 - 50, framework.getHeight() / 2 + 50, buttonImg));
+            buttonbuy.add(new Buttonbuy(framework.getWidth() / 2 + 250, framework.getHeight() / 2 + 50, buttonImg));
+        }
+    }
+    private void processButtonClick(Point mousePosition) {
+        if (checkAndHandleButtonClick(buttonbuy.get(0), mousePosition, money > 200 && Hunters.size() < 1)) {
+            System.out.println(BUY_BUTTON_MESSAGE);
+            Hunters.add(new Hunter1(220, 290, 0, 100, hunter111Img));
+            Hunter1 = true;
+            money -= 200;
+        }
 
-                // 버튼 2 (데미지 증가)
-                if (money > 100) {
-                    Rectangle buttonArea2 = new Rectangle(buttonbuy.get(1).x, buttonbuy.get(1).y, 367, 257);
-                    if (buttonArea2.contains(mousePosition)&& mouseClicked) {
-                        System.out.println(BUY_BUTTON_MESSAGE);
-                        damage += 10;
-                        money -= 100;
-                        System.out.println(MOUSE_POSITION_MESSAGE + mousePosition);
-                        System.out.println(BUTTON_POSITION_MESSAGE + buttonbuy.get(1).x + ", " + buttonbuy.get(1).y);
-                    }
-                }
+        if (checkAndHandleButtonClick(buttonbuy.get(1), mousePosition, money > 100)) {
+            System.out.println(BUY_BUTTON_MESSAGE);
+            damage += 10;
+            money -= 100;
+        }
 
-                // 버튼 3 (최대 탄약 증가)
-                if (money > 100) {
-                    Rectangle buttonArea3 = new Rectangle(buttonbuy.get(2).x, buttonbuy.get(2).y, 367, 257);
-                    if (buttonArea3.contains(mousePosition) && mouseClicked) {
-                        System.out.println(BUY_BUTTON_MESSAGE);
-                        maxAmmo += 2;
-                        money -= 100;
-                        System.out.println(MOUSE_POSITION_MESSAGE + mousePosition);
-                        System.out.println(BUTTON_POSITION_MESSAGE + buttonbuy.get(2).x + ", " + buttonbuy.get(2).y);
-                    }
-                }
-            }
-        }
-        if(Hunters.size() > 0) {
-            Hunter1 = true;
+        if (checkAndHandleButtonClick(buttonbuy.get(2), mousePosition, money > 100)) {
+            System.out.println(BUY_BUTTON_MESSAGE);
+            maxAmmo += 2;
+            money -= 100;
+        }
+    }
+
+    private boolean checkAndHandleButtonClick(Buttonbuy button, Point mousePosition, boolean condition) {
+        Rectangle buttonArea = new Rectangle(button.x, button.y, 367, 257);
+        if (condition && buttonArea.contains(mousePosition)) {
+            System.out.println(MOUSE_POSITION_MESSAGE + mousePosition);
+            System.out.println(BUTTON_POSITION_MESSAGE + button.x + ", " + button.y);
+            return true;
         }
+        return false;
     }
 
-    public void drawBossAttack(Graphics2D g2d){
-        for(int i = 0; i < bossAttacks.size(); i++) {
-            g2d.drawImage(bossAttack, bossAttacks.get(i).x,bossAttacks.get(i).y, null );
-        }
-    }
 
     private void spawnBossWithDelay() {
         // 3초 후 보스 생성
@@ -1074,67 +1077,70 @@
         }
     }
     private void handlePlayerShooting(Point mousePosition) {
-        if (System.nanoTime() - lastTimeShoot < timeBetweenShots) {
-            return; // 발사 간격이 충족되지 않으면 아무 작업도 하지 않음
+        if (!Canvas.mouseButtonState(MouseEvent.BUTTON1)) {
+            return;
+        }
+
+        if (isReloading) {
+            System.out.println("Reloading... Please wait!");
+            return;
+        }
+
+        if (System.nanoTime() - lastTimeShoot <= timeBetweenShots) {
+            return;
         }
-        if (Canvas.mouseButtonState(MouseEvent.BUTTON1)) {
-            // 선택된 오리 처리
-            if (System.nanoTime() - lastTimeShoot > timeBetweenShots && !isReloading) {
 
-                if (playerSelectedDucks != null) {
-                    for (int i = 0; i < playerSelectedDucks.length; i++) {
-                        if (playerSelectedDucks[i] != null && ducks.contains(playerSelectedDucks[i])) {
-                            playActiveSound("src/main/resources/sounds/quack.wav");
-                            killedDucks++;
-                            money += 10;
-                            score += playerSelectedDucks[i].score;
-
-                            // 오리 리스트에서 제거
-                            ducks.remove(playerSelectedDucks[i]);
-                            playerSelectedDucks[i] = null; // 초기화
-                        }
-                    }
-                    updateAndReselectPlayerDucks(1); // 선택된 오리 갱신
-                }
+        if (ammo <= 0) {
+            System.out.println("Out of ammo! Reloading...");
+            Reload(); // 재장전 시작
+            return;
+        }
+
+        handleSelectedDuckShooting();
+        handleGeneralDuckShooting(mousePosition);
+
+        lastTimeShoot = System.nanoTime(); // 마지막 발사 시간 갱신
+    }
+
+    private void handleSelectedDuckShooting() {
+        if (playerSelectedDucks == null) {
+            return;
+        }
+
+        for (int i = 0; i < playerSelectedDucks.length; i++) {
+            Duck duck = playerSelectedDucks[i];
+            if (duck != null && ducks.contains(duck)) {
+                playActiveSound("src/main/resources/sounds/quack.wav");
+                killedDucks++;
+                money += 10;
+                score += duck.score;
+                ducks.remove(duck);
+                playerSelectedDucks[i] = null; // 초기화
+            }
+        }
+
+        updateAndReselectPlayerDucks(1); // 선택된 오리 갱신
+    }
 
-                // 재장전 확인
-                if (isReloading) {
-                    System.out.println("Reloading... Please wait!");
-                    return; // 재장전 중에는 공격 불가
-                }
-
-                // 탄약 확인
-                if (ammo <= 0) {
-                    System.out.println("Out of ammo! Reloading...");
-                    Reload(); // 재장전 시작
-                    return;
-                }
-
-                // 발사 간격 확인
-                if (System.nanoTime() - lastTimeShoot >= timeBetweenShots) {
-                    shoots++;
-                    playActiveSound("src/main/resources/sounds/gun.wav");
-                    ammo--; // 탄약 소모
+    private void handleGeneralDuckShooting(Point mousePosition) {
+        shoots++;
+        playActiveSound("src/main/resources/sounds/gun.wav");
+        ammo--; // 탄약 소모
 
-                    // 일반 오리와 충돌 확인
-                    Iterator<Duck> iterator = ducks.iterator();
-                    while (iterator.hasNext()) {
-                        Duck duck = iterator.next();
-                        if (isDuckHit(duck, mousePosition)) {
-                            playActiveSound("src/main/resources/sounds/quack.wav");
-                            killedDucks++;
-                            money += 10;
-                            score += duck.score;
-                            iterator.remove(); // 안전하게 제거
-                            break; // 한 마리 처리 후 종료
-                        }
-                    }
-
-                    lastTimeShoot = System.nanoTime(); // 마지막 발사 시간 갱신
-                }
+        Iterator<Duck> iterator = ducks.iterator();
+        while (iterator.hasNext()) {
+            Duck duck = iterator.next();
+            if (isDuckHit(duck, mousePosition)) {
+                playActiveSound("src/main/resources/sounds/quack.wav");
+                killedDucks++;
+                money += 10;
+                score += duck.score;
+                iterator.remove(); // 안전하게 제거
+                break; // 한 마리 처리 후 종료
             }
         }
     }
+
 
 
 
Index: src/main/java/kr/jbnu/se/std/InventoryManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package kr.jbnu.se.std;\n\nimport okhttp3.*;\nimport org.json.JSONObject;\nimport javax.swing.*;\nimport java.io.IOException;\nimport java.util.HashSet;\nimport java.util.Set;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.ScheduledExecutorService;\nimport java.util.concurrent.TimeUnit;\n\npublic class InventoryManager {\n\n    private final OkHttpClient client = new OkHttpClient();\n    private final String email;\n    private String inventoryImage;\n    private final String idToken;\n    private final Set<String> receivedMessageKeysF = new HashSet<>();\n    private InventoryWindow inventoryWindow;\n    private final int currentMoney;\n    private final ScheduledExecutorService schedulerI = Executors.newScheduledThreadPool(1);\n\n    private ShopWindow shopWindow;\n\n\n    public InventoryManager(String email, String idToken, InventoryWindow inventoryWindow,int currentMoney) {\n        this.email = email;\n        this.idToken = idToken;\n        this.inventoryWindow = inventoryWindow;\n        this.currentMoney = currentMoney;\n    }\n\n    public InventoryManager(String email, String idToken, ShopWindow shopWindow,int currentMoney) {\n        this.email = email;\n        this.idToken = idToken;\n        this.shopWindow = shopWindow;\n        this.currentMoney = currentMoney;\n    }\n\n    public void buySomething(int sell) {\n        if (sell < currentMoney) {\n            int money = currentMoney - sell;\n            JSONObject json = new JSONObject();\n            json.put(\"money\", money);\n\n            RequestBody body = RequestBody.create(MediaType.parse(\"application/json; charset=utf-8\"), json.toString());\n            Request request = new Request.Builder()\n                    .url(\"https://shootthedock-default-rtdb.firebaseio.com/users/\" + email + \"/userinfo.json\")\n                    .patch(body)\n                    .build();\n\n            client.newCall(request).enqueue(new Callback() {\n                @Override\n                public void onFailure(Call call, IOException e) {\n                    System.err.println(\"구매 실패: \" + e.getMessage());\n                }\n\n                @Override\n                public void onResponse(Call call, Response response) throws IOException {\n                    if (!response.isSuccessful()) {\n                        System.err.println(\"구매 성공: \" + response.code());\n                    }\n                }\n            });\n        }\n    }\n\n    public void addGunToInventory(String item) {\n        JSONObject json = new JSONObject();\n        json.put(\"item\", item);\n\n        RequestBody body = RequestBody.create(MediaType.parse(\"application/json; charset=utf-8\"), json.toString());\n        Request request = new Request.Builder()\n                .url(\"https://shootthedock-default-rtdb.firebaseio.com/users/\" + email + \"/userinfo/inventory/Gun/\" + item + \".json\")\n                .patch(body)\n                .build();\n\n        client.newCall(request).enqueue(new Callback() {\n            @Override\n            public void onFailure(Call call, IOException e) {\n                System.err.println(\"인벤토리 저장 실패: \" + e.getMessage());\n            }\n\n            @Override\n            public void onResponse(Call call, Response response) throws IOException {\n                if (!response.isSuccessful()) {\n                    System.err.println(\"인벤토리 저장 성공: \" + response.code());\n                }\n            }\n        });\n    }\n\n    public void retrieveInventory() {\n        String url = \"https://shootthedock-default-rtdb.firebaseio.com/users/\" + email + \"/userinfo/inventory/Gun.json?auth=\" + idToken;\n\n        Request request = new Request.Builder()\n                .url(url)\n                .get()\n                .build();\n\n        client.newCall(request).enqueue(new Callback() {\n            @Override\n            public void onFailure(Call call, IOException e) {\n                SwingUtilities.invokeLater(() -> System.err.println(\"인벤토리 가져오기 실패: \" + e.getMessage()));\n            }\n\n            @Override\n            public void onResponse(Call call, Response response) throws IOException {\n                if (response.isSuccessful()) {\n                    String responseBody = response.body().string();\n                    JSONObject jsonResponse = new JSONObject(responseBody);\n\n                    if (jsonResponse.isEmpty()) {\n                        SwingUtilities.invokeLater(() -> System.out.println(\"인벤토리 데이터가 없습니다.\"));\n                        return;\n                    }\n\n                    for (String key : jsonResponse.keySet()) {\n                        JSONObject inventoryData = jsonResponse.getJSONObject(key);\n                        String inventory = inventoryData.getString(\"item\");\n\n                        if (\"더블배럴샷건\".equals(inventory)) {\n                            inventoryImage = \"src/main/resources/images/gun_01.png\";\n                        }else if(\"AK-47\".equals(inventory)) {\n                            inventoryImage = \"src/main/resources/images/gun_02.png\";\n                        }else if(\"핸드건\".equals(inventory)) {\n                            inventoryImage = \"src/main/resources/images/gun_03.png\";\n                        }\n\n                        if (!receivedMessageKeysF.contains(key)) {\n                            receivedMessageKeysF.add(key);\n                            SwingUtilities.invokeLater(() -> inventoryWindow.addPanel(inventory, inventoryImage));\n                        }\n                    }\n                } else {\n                    SwingUtilities.invokeLater(() -> System.err.println(\"인벤토리 가져오기 실패: \" + response.message()));\n                }\n            }\n        });\n    }\n\n    public void startReceivingInventory(){\n        schedulerI.scheduleAtFixedRate(this::retrieveInventory, 0, 1, TimeUnit.MINUTES);\n\n    }\n    public void stopReceivingInventory(){\n        schedulerI.shutdown();\n    }\n    public void closeshopwindow(){\n        this.shopWindow.dispose();\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/kr/jbnu/se/std/InventoryManager.java b/src/main/java/kr/jbnu/se/std/InventoryManager.java
--- a/src/main/java/kr/jbnu/se/std/InventoryManager.java	(revision e345472118693a8590edc2ef168582159a17586a)
+++ b/src/main/java/kr/jbnu/se/std/InventoryManager.java	(date 1733116503166)
@@ -5,6 +5,7 @@
 import javax.swing.*;
 import java.io.IOException;
 import java.util.HashSet;
+import java.util.Map;
 import java.util.Set;
 import java.util.concurrent.Executors;
 import java.util.concurrent.ScheduledExecutorService;
@@ -92,7 +93,10 @@
     }
 
     public void retrieveInventory() {
-        String url = "https://shootthedock-default-rtdb.firebaseio.com/users/" + email + "/userinfo/inventory/Gun.json?auth=" + idToken;
+        String url = String.format(
+                "https://shootthedock-default-rtdb.firebaseio.com/users/%s/userinfo/inventory/Gun.json?auth=%s",
+                email, idToken
+        );
 
         Request request = new Request.Builder()
                 .url(url)
@@ -108,37 +112,46 @@
             @Override
             public void onResponse(Call call, Response response) throws IOException {
                 if (response.isSuccessful()) {
-                    String responseBody = response.body().string();
-                    JSONObject jsonResponse = new JSONObject(responseBody);
+                    processInventoryResponse(response.body().string());
+                } else {
+                    SwingUtilities.invokeLater(() -> System.err.println("인벤토리 가져오기 실패: " + response.message()));
+                }
+            }
+        });
+    }
+
+    private void processInventoryResponse(String responseBody) {
+        JSONObject jsonResponse = new JSONObject(responseBody);
 
-                    if (jsonResponse.isEmpty()) {
-                        SwingUtilities.invokeLater(() -> System.out.println("인벤토리 데이터가 없습니다."));
-                        return;
-                    }
+        if (jsonResponse.isEmpty()) {
+            SwingUtilities.invokeLater(() -> System.out.println("인벤토리 데이터가 없습니다."));
+            return;
+        }
 
-                    for (String key : jsonResponse.keySet()) {
-                        JSONObject inventoryData = jsonResponse.getJSONObject(key);
-                        String inventory = inventoryData.getString("item");
+        // Map 대신 간단한 if-else로 이미지 경로 지정
+        for (String key : jsonResponse.keySet()) {
+            JSONObject inventoryData = jsonResponse.getJSONObject(key);
+            String inventory = inventoryData.getString("item");
+            String inventoryImage;
 
-                        if ("더블배럴샷건".equals(inventory)) {
-                            inventoryImage = "src/main/resources/images/gun_01.png";
-                        }else if("AK-47".equals(inventory)) {
-                            inventoryImage = "src/main/resources/images/gun_02.png";
-                        }else if("핸드건".equals(inventory)) {
-                            inventoryImage = "src/main/resources/images/gun_03.png";
-                        }
+            if ("더블배럴샷건".equals(inventory)) {
+                inventoryImage = "src/main/resources/images/gun_01.png";
+            } else if ("AK-47".equals(inventory)) {
+                inventoryImage = "src/main/resources/images/gun_02.png";
+            } else if ("핸드건".equals(inventory)) {
+                inventoryImage = "src/main/resources/images/gun_03.png";
+            } else {
+                inventoryImage = ""; // 알 수 없는 아이템 기본값
+            }
 
-                        if (!receivedMessageKeysF.contains(key)) {
-                            receivedMessageKeysF.add(key);
-                            SwingUtilities.invokeLater(() -> inventoryWindow.addPanel(inventory, inventoryImage));
-                        }
-                    }
-                } else {
-                    SwingUtilities.invokeLater(() -> System.err.println("인벤토리 가져오기 실패: " + response.message()));
-                }
-            }
-        });
+            if (!receivedMessageKeysF.contains(key)) {
+                receivedMessageKeysF.add(key);
+                SwingUtilities.invokeLater(() -> inventoryWindow.addPanel(inventory, inventoryImage));
+            }
+        }
     }
+
+
 
     public void startReceivingInventory(){
         schedulerI.scheduleAtFixedRate(this::retrieveInventory, 0, 1, TimeUnit.MINUTES);
Index: src/main/java/kr/jbnu/se/std/MessageReceiver.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package kr.jbnu.se.std;\n\nimport okhttp3.*;\nimport org.json.JSONException;\nimport org.json.JSONObject;\n\nimport javax.swing.*;\nimport java.io.IOException;\nimport java.sql.Time;\nimport java.util.HashSet;\nimport java.util.Set;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.ScheduledExecutorService;\nimport java.util.concurrent.TimeUnit;\nimport java.util.logging.Logger;\n\npublic class MessageReceiver {\n    private final OkHttpClient client;\n    private final String idToken;\n    private final Set<String> receivedMessageKeysF;\n    private final Set<String> existingFriends;\n    private final Set<String> receivedMessageKeysM;\n    private ChatwithFriends chatwithFriends;// 채팅을 표시하는 UI 컴포넌트\n    private MainClient mainClient;\n    private final ScheduledExecutorService schedulerM = Executors.newScheduledThreadPool(1);\n    private final ScheduledExecutorService schedulerF = Executors.newScheduledThreadPool(1);\n    private String nickname;\n    private String selectnickname;\n    private String email;\n    private static final Logger logger = Logger.getLogger(MessageReceiver.class.getName());\n\n\n    public MessageReceiver(String idToken, MainClient MainClient,String email){\n        this.idToken = idToken;\n        this.email = email;\n        this.client = new OkHttpClient();\n        this.receivedMessageKeysF = new HashSet<>();\n        this.receivedMessageKeysM = new HashSet<>();\n        this.existingFriends = new HashSet<>();\n        this.mainClient = MainClient;\n    }\n    public MessageReceiver(String idToken, ChatwithFriends chatwithFriends,String nickname,String selectnickname) {\n        this.client = new OkHttpClient();\n        this.idToken = idToken;\n        this.nickname = nickname;\n        this.selectnickname = selectnickname;\n        this.receivedMessageKeysF = new HashSet<>();\n        this.receivedMessageKeysM = new HashSet<>();\n        this.existingFriends = new HashSet<>();\n        this.chatwithFriends = chatwithFriends;\n    }\n\n    public void receiveMessagesFriends() {\n        OkHttpClient client = new OkHttpClient();\n        String url = \"https://shootthedock-default-rtdb.firebaseio.com/chatfriend/\"\n                + nickname + selectnickname + \".json?auth=\" + idToken;\n        Request request = new Request.Builder().url(url).get().build();\n\n        client.newCall(request).enqueue(new Callback() {\n            @Override\n            public void onFailure(Call call, IOException e) {\n                SwingUtilities.invokeLater(() -> System.err.println(\"채팅 메시지 가져오기 실패: \" + e.getMessage()));\n            }\n\n            @Override\n            public void onResponse(Call call, Response response) throws IOException {\n                if (response.isSuccessful()) {\n                    String responseBody = response.body().string();\n                    JSONObject jsonResponse = new JSONObject(responseBody);\n\n                    if (jsonResponse.isEmpty()) {\n                        SwingUtilities.invokeLater(() -> System.out.println(\"채팅 내역이 존재하지 않습니다.\"));\n                        return;\n                    }\n\n                    for (String key : jsonResponse.keySet()) {\n                        JSONObject messageData = jsonResponse.getJSONObject(key);\n                        String message = messageData.getString(\"message\");\n                        String senderNickname = messageData.getString(\"nickname\");\n\n                        if (!receivedMessageKeysF.contains(key)) {\n                            receivedMessageKeysF.add(key);\n                            String uniqueMessage = senderNickname + \": \" + message;\n                            SwingUtilities.invokeLater(() -> chatwithFriends.setChat(uniqueMessage + \"\\n\"));\n                        }\n                    }\n                } else {\n                    SwingUtilities.invokeLater(() -> System.err.println(\"채팅 메시지 가져오기 실패: \" + response.message()));\n                }\n            }\n        });\n    }\n\n    public void receiveMessagesFriends2() {\n        OkHttpClient client = new OkHttpClient();\n        String url = \"https://shootthedock-default-rtdb.firebaseio.com/chatfriend/\"+ selectnickname+nickname+\".json?auth=\" + idToken;\n\n        Request request = new Request.Builder().url(url).get().build();\n\n        client.newCall(request).enqueue(new Callback() {\n            @Override\n            public void onFailure(Call call, IOException e) {\n                SwingUtilities.invokeLater(() -> System.err.println(\"채팅 메시지 가져오기 실패: \" + e.getMessage()));\n            }\n\n            @Override\n            public void onResponse(Call call, Response response) throws IOException {\n                if (response.isSuccessful()) {\n                    String responseBody = response.body().string();\n                    JSONObject jsonResponse = new JSONObject(responseBody);\n\n                    if (jsonResponse.isEmpty()) {\n                        SwingUtilities.invokeLater(() -> System.out.println(\"채팅 내역이 존재하지 않습니다.\"));\n                        return;\n                    }\n\n                    for (String key : jsonResponse.keySet()) {\n                        JSONObject messageData = jsonResponse.getJSONObject(key);\n                        String message = messageData.getString(\"message\");\n                        String senderNickname = messageData.getString(\"nickname\");\n\n                        if (!receivedMessageKeysF.contains(key)) {\n                            receivedMessageKeysF.add(key);\n                            String uniqueMessage = senderNickname + \": \" + message;\n                            SwingUtilities.invokeLater(() -> chatwithFriends.setChat(uniqueMessage + \"\\n\"));\n                        }\n                    }\n                } else {\n                    SwingUtilities.invokeLater(() -> System.err.println(\"채팅 메시지 가져오기 실패: \" + response.message()));\n                }\n            }\n        });\n    }\n\n    public void receiveMessages() {\n        OkHttpClient client = new OkHttpClient();\n        String url = \"https://shootthedock-default-rtdb.firebaseio.com/chat.json?auth=\" + idToken;\n\n        Request request = new Request.Builder().url(url).get().build();\n\n        client.newCall(request).enqueue(new Callback() {\n            @Override\n            public void onFailure(Call call, IOException e) {\n                SwingUtilities.invokeLater(() -> System.err.println(\"채팅 메시지 가져오기 실패: \" + e.getMessage()));\n            }\n\n            @Override\n            public void onResponse(Call call, Response response) throws IOException {\n                if (response.isSuccessful()) {\n                    String responseBody = response.body().string();\n                    JSONObject jsonResponse = new JSONObject(responseBody);\n\n                    if (jsonResponse.isEmpty()) {\n                        SwingUtilities.invokeLater(() -> System.out.println(\"채팅 내역이 존재하지 않습니다.\"));\n                        return;\n                    }\n\n                    for (String key : jsonResponse.keySet()) {\n                        JSONObject messageData = jsonResponse.getJSONObject(key);\n                        String message = messageData.getString(\"message\");\n                        String senderNickname = messageData.getString(\"nickname\");\n\n                        if (!receivedMessageKeysM.contains(key)) {\n                            receivedMessageKeysM.add(key);\n                            String uniqueMessage = senderNickname + \": \" + message;\n                            SwingUtilities.invokeLater(() -> mainClient.setChat(uniqueMessage + \"\\n\"));\n                        }\n                    }\n                } else {\n                    SwingUtilities.invokeLater(() -> System.err.println(\"채팅 메시지 가져오기 실패: \" + response.message()));\n                }\n            }\n        });\n    }\n\n    public void receiveFriends() {\n        OkHttpClient client = new OkHttpClient();\n        String url = \"https://shootthedock-default-rtdb.firebaseio.com/users/\" + email + \"/userinfo/friends.json?auth=\" + idToken;\n\n        Request request = new Request.Builder()\n                .url(url)\n                .get()\n                .build();\n\n        client.newCall(request).enqueue(new Callback() {\n            @Override\n            public void onFailure(Call call, IOException e) {\n                SwingUtilities.invokeLater(() -> {\n                    System.err.println(\"친구 목록 가져오기 실패: \" + e.getMessage());\n                });\n            }\n\n            @Override\n            public void onResponse(Call call, Response response) throws IOException {\n                if (response.isSuccessful()) {\n                    String responseBody = response.body().string();\n                    try {\n                        JSONObject jsonObject = new JSONObject(responseBody);\n\n                        // JSON 객체가 비어있는지 확인\n                        if (jsonObject.isEmpty()) {\n                            SwingUtilities.invokeLater(() -> {\n                                System.out.println(\"친구가 없습니다.\");\n                            });\n                            return;\n                        }\n\n                        // 친구 목록 출력\n                        for (String key : jsonObject.keySet()) {\n                            JSONObject friendObject = jsonObject.getJSONObject(key); // 친구 객체\n                            String nickname = friendObject.getString(\"nickname\"); // 친구의 닉네임\n\n                            // 중복된 친구가 아닌 경우에만 추가\n                            if (!existingFriends.contains(nickname)) {\n                                existingFriends.add(nickname); // 새로운 친구 추가\n                                SwingUtilities.invokeLater(() -> {\n                                    mainClient.setFriends(nickname + \"\\n\"); // 친구 목록에 추가\n                                });\n                            }\n                        }\n                    } catch (JSONException e) {\n                        logger.warning(e.getMessage());\n                        SwingUtilities.invokeLater(() -> {\n                            System.err.println(\"친구 목록 처리 중 오류 발생: \" + e.getMessage());\n                        });\n                    }\n                } else {\n                    SwingUtilities.invokeLater(() -> {\n                        System.err.println(\"친구 목록 가져오기 실패: \" + response.message());\n                    });\n                }\n            }\n        });\n    }\n\n    public void startReceivingMessages() {\n        // 0초 후에 시작하고, 5초마다 receiveMessages 메소드를 호출\n        schedulerM.scheduleAtFixedRate(this::receiveMessages, 0, 1, TimeUnit.SECONDS);\n        schedulerM.scheduleAtFixedRate(this::receiveFriends, 0, 1, TimeUnit.SECONDS);\n    }\n\n    public void stopReceivingMessages() {\n        // 0초 후에 시작하고, 5초마다 receiveMessages 메소드를 호출\n        schedulerM.shutdown();\n    }\n\n    public void startReceivingFriendMessages(){\n        schedulerF.scheduleAtFixedRate(this::receiveMessagesFriends, 0, 1, TimeUnit.SECONDS);\n        schedulerF.scheduleAtFixedRate(this::receiveMessagesFriends2, 0, 1, TimeUnit.SECONDS);\n    }\n\n    public void stopReceivingFriendMessages() {\n        // 0초 후에 시작하고, 5초마다 receiveMessages 메소드를 호출\n        schedulerF.shutdown();\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/kr/jbnu/se/std/MessageReceiver.java b/src/main/java/kr/jbnu/se/std/MessageReceiver.java
--- a/src/main/java/kr/jbnu/se/std/MessageReceiver.java	(revision e345472118693a8590edc2ef168582159a17586a)
+++ b/src/main/java/kr/jbnu/se/std/MessageReceiver.java	(date 1733117565193)
@@ -177,61 +177,55 @@
         OkHttpClient client = new OkHttpClient();
         String url = "https://shootthedock-default-rtdb.firebaseio.com/users/" + email + "/userinfo/friends.json?auth=" + idToken;
 
-        Request request = new Request.Builder()
-                .url(url)
-                .get()
-                .build();
-
-        client.newCall(request).enqueue(new Callback() {
+        client.newCall(new Request.Builder().url(url).get().build()).enqueue(new Callback() {
             @Override
             public void onFailure(Call call, IOException e) {
-                SwingUtilities.invokeLater(() -> {
-                    System.err.println("친구 목록 가져오기 실패: " + e.getMessage());
-                });
+                logError("친구 목록 가져오기 실패", e.getMessage());
             }
 
             @Override
             public void onResponse(Call call, Response response) throws IOException {
                 if (response.isSuccessful()) {
-                    String responseBody = response.body().string();
-                    try {
-                        JSONObject jsonObject = new JSONObject(responseBody);
+                    handleFriendResponse(response.body().string());
+                } else {
+                    logError("친구 목록 가져오기 실패", response.message());
+                }
+            }
+        });
+    }
+
+    private void handleFriendResponse(String responseBody) {
+        SwingUtilities.invokeLater(() -> {
+            try {
+                JSONObject jsonObject = new JSONObject(responseBody);
 
-                        // JSON 객체가 비어있는지 확인
-                        if (jsonObject.isEmpty()) {
-                            SwingUtilities.invokeLater(() -> {
-                                System.out.println("친구가 없습니다.");
-                            });
-                            return;
-                        }
+                if (jsonObject.isEmpty()) {
+                    System.out.println("친구가 없습니다.");
+                    return;
+                }
 
-                        // 친구 목록 출력
-                        for (String key : jsonObject.keySet()) {
-                            JSONObject friendObject = jsonObject.getJSONObject(key); // 친구 객체
-                            String nickname = friendObject.getString("nickname"); // 친구의 닉네임
-
-                            // 중복된 친구가 아닌 경우에만 추가
-                            if (!existingFriends.contains(nickname)) {
-                                existingFriends.add(nickname); // 새로운 친구 추가
-                                SwingUtilities.invokeLater(() -> {
-                                    mainClient.setFriends(nickname + "\n"); // 친구 목록에 추가
-                                });
-                            }
-                        }
-                    } catch (JSONException e) {
-                        logger.warning(e.getMessage());
-                        SwingUtilities.invokeLater(() -> {
-                            System.err.println("친구 목록 처리 중 오류 발생: " + e.getMessage());
-                        });
-                    }
-                } else {
-                    SwingUtilities.invokeLater(() -> {
-                        System.err.println("친구 목록 가져오기 실패: " + response.message());
-                    });
-                }
-            }
-        });
+                for (String key : jsonObject.keySet()) {
+                    addFriendIfNew(jsonObject.getJSONObject(key));
+                }
+            } catch (JSONException e) {
+                logError("친구 목록 처리 중 오류 발생", e.getMessage());
+            }
+        });
+    }
+
+    private void addFriendIfNew(JSONObject friendObject) throws JSONException {
+        String nickname = friendObject.getString("nickname");
+
+        if (!existingFriends.contains(nickname)) {
+            existingFriends.add(nickname);
+            mainClient.setFriends(nickname + "\n");
+        }
     }
+
+    private void logError(String message, String errorDetails) {
+        SwingUtilities.invokeLater(() -> System.err.println(message + ": " + errorDetails));
+    }
+
 
     public void startReceivingMessages() {
         // 0초 후에 시작하고, 5초마다 receiveMessages 메소드를 호출
Index: src/main/java/kr/jbnu/se/std/Framework.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package kr.jbnu.se.std;\n\nimport com.google.auth.oauth2.GoogleCredentials;\nimport com.google.common.util.concurrent.MoreExecutors;\nimport com.google.firebase.FirebaseApp;\nimport com.google.firebase.FirebaseOptions;\nimport com.google.firebase.auth.FirebaseAuth;\nimport com.google.firebase.auth.FirebaseAuthException;\nimport com.google.firebase.auth.UserRecord;\nimport com.google.firebase.database.*;\nimport com.google.firebase.database.core.AuthTokenProvider;\nimport com.google.gson.JsonObject;\nimport jdk.jfr.internal.tool.Main;\nimport okhttp3.*;\nimport org.json.JSONArray;\nimport org.json.JSONException;\nimport org.json.JSONObject;\n\nimport java.awt.*;\nimport java.awt.event.KeyEvent;\nimport java.awt.event.MouseEvent;\nimport java.awt.image.BufferedImage;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.Set;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.ScheduledExecutorService;\nimport java.util.concurrent.TimeUnit;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport javax.imageio.ImageIO;\nimport javax.sound.sampled.*;\nimport javax.swing.*;\nimport com.google.firebase.database.FirebaseDatabase;\n\n/**\n * kr.jbnu.se.std.Framework that controls the game (kr.jbnu.se.std.Game.java) that created it, update it and draw it on the screen.\n *\n * @author www.gametutorial.net\n */\n\npublic class Framework extends Canvas {\n\n    private boolean isLoginSuccessful = false; // 로그인 성공 여부를 관리\n    private LoginClient loginClient;\n    /**\n     * Width of the frame.\n     */\n    public static int frameWidth;\n    /**\n     * Height of the frame.\n     */\n    public static int frameHeight;\n\n    /**\n     * Time of one second in nanoseconds.\n     * 1 second = 1 000 000 000 nanoseconds\n     */\n    public static final long SECINNANOSEC = 1000000000L;\n\n    /**\n     * Time of one millisecond in nanoseconds.\n     * 1 millisecond = 1 000 000 nanoseconds\n     */\n    public static final long MILISECINNANOSEC = 1000000L;\n\n    /**\n     * FPS - Frames per second\n     * How many times per second the game should update?\n     */\n    private final int GAME_FPS = 60;\n    /**\n     * Pause between updates. It is in nanoseconds.\n     */\n    private final long GAME_UPDATE_PERIOD = SECINNANOSEC / GAME_FPS;\n\n    /**\n     * Possible states of the game\n     */\n    public enum GameState{STARTING, VISUALIZING, GAME_CONTENT_LOADING,LOGIN,MAIN_MENU, OPTIONS, PLAYING, GAMEOVER, MAINPAGE, ROUND, PAUSE, ENDING, DESTROYED}\n    /**\n     * Current state of the game\n     */\n    public static GameState gameState;\n    public synchronized static void setGameState(GameState gameState){\n        gameState = gameState;\n    }\n    public synchronized static GameState getGameState(){\n        return gameState;\n    }\n\n    /**\n     * Elapsed game time in nanoseconds.\n     */\n    @SuppressWarnings(\"squid:S1948\")\n    private final ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);\n    @SuppressWarnings(\"squid:S1948\")\n    private final ScheduledExecutorService scheduler1 = Executors.newScheduledThreadPool(1);\n    @SuppressWarnings(\"squid:S1948\")\n    private final ScheduledExecutorService scheduler2 = Executors.newScheduledThreadPool(1);\n    @SuppressWarnings(\"squid:S1948\")\n    private final ScheduledExecutorService scheduler3 = Executors.newScheduledThreadPool(1);\n    private final Set<String> existingFriends = new HashSet<>(); // 중복 방지를 위한 Set\n    private final Set<String> existingFriendsinvite = new HashSet<>(); // 중복 방지를 위한 Set\n\n    private long gameTime;\n    // It is used for calculating elapsed time.\n    private long lastTime;\n\n\n\n    // The actual game\n    @SuppressWarnings(\"squid:S1948\")\n    private Game game;\n    @SuppressWarnings(\"squid:S1948\")\n    private Thread gameThread;\n    private Window window;\n    private String userid;\n    private static final String DATABASE_URL = \"https://shootthedock-default-rtdb.firebaseio.com\";\n    @SuppressWarnings(\"squid:S1948\")\n    private OkHttpClient clientInstance;\n    private String email;\n    private String nickname;\n    private String idToken;\n    private String password;\n    private String realemail;\n    @SuppressWarnings(\"squid:S1948\")\n    private FirebaseAuth auth;\n    @SuppressWarnings(\"squid:S1948\")\n    private DatabaseReference databaseReference;\n    private MainClient MainV2;\n    private AddFriends addFriends;\n    @SuppressWarnings(\"squid:S1948\")\n    private DatabaseReference chatRef;\n    private final Set<String> receivedMessageKeys = new HashSet<>();\n    private final Set<String> receivedMessageKeysF = new HashSet<>(); // 이미 받은 메시지의 키를 저장할 Set\n    private ChatwithFriends chatwithFriends;\n    private String selectnickname;\n    private int money;\n    private InviteFriends inviteFriends;\n    private ShopWindow shopWindow;\n    private InventoryWindow inventoryWindow;\n    private String inventoryimage;\n    private String whatgun;\n    @SuppressWarnings(\"squid:S1948\")\n    public FirebaseClient firebaseClient;\n    public transient FriendManager friendManager;\n    private transient Clip clip;\n    private static final String NICKNAME_KEY = \"nickname\";\n\n    private static final String APPLICATION_JSON = \"application/json; charset=utf-8\";\n    private static final String FIREBASE_SIGNIN_URL = \"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=\";\n    private static final String FIREBASE_API_KEY = \"AIzaSyCJDgbBXWSRoRUg3xVqsQrSEz1W5AFiE_Y\";\n\n    private static final String FIREBASE_BASE_URL = \"https://shootthedock-default-rtdb.firebaseio.com/users/\";\n    private static final String USER_INFO_SUFFIX = \"/userinfo.json?auth=\";\n    private static final String MONEY_KEY = \"money\";\n    private static final String SCORE_SAVE_FAILURE_MESSAGE = \"사용자 정보에 점수 저장 실패: \";\n    private static final String ERROR_MESSAGE = \"데이터 가져오기 실패...\";\n\n\n    private static Framework instance;\n    @SuppressWarnings(\"squid:S1948\")\n    public MessageManager messageManager;\n    @SuppressWarnings(\"squid:S1948\")\n    public MessageReceiver messageReceiver;\n    @SuppressWarnings(\"squid:S1948\")\n    public MessageReceiver friendmessageReceiver;\n    @SuppressWarnings(\"squid:S1948\")\n    public InventoryManager inventoryManager;\n\n\n    /**\n     * Image for menu.\n     */\n    @SuppressWarnings(\"squid:S1948\")\n    private BufferedImage shootTheDuckMenuImg;\n\n\n    public Framework (Window window)\n    {\n        super();\n        initializeFirebase();\n        this.window = window;\n        gameState = GameState.LOGIN;\n        clientInstance = new OkHttpClient();\n        loginClient = new LoginClient(this);\n        loginClient.setVisible(true);\n        MainV2 = new MainClient(this);\n        whatgun = \"기본권총\";\n        MainV2.setVisible(false);\n        this.setVisible(false);\n        databaseReference = FirebaseDatabase.getInstance().getReference();\n        firebaseClient = new FirebaseClient(email);\n    }\n    public void Invitewindow(){\n            inviteFriends = new InviteFriends(this);\n            startRecevingFriendInvite();\n            if(inviteFriends == null){\n                stopReceivingFriendInvite();\n            }\n    }\n\n    public void inventoryWindow(){\n        inventoryWindow = new InventoryWindow(this);\n        inventoryManager= new InventoryManager(email,idToken,inventoryWindow,money);\n        inventoryManager.startReceivingInventory();\n        if(inventoryWindow == null){\n            inventoryManager.stopReceivingInventory();\n        }\n    }\n    public void stopfriendadd(){\n        addFriends = null;\n    }\n\n    public void stopfriends(){\n        inviteFriends = null;\n    }\n    public void stoploginClinet(){\n        loginClient = null;\n    }\n\n    public void stopshop(){\n        shopWindow = null;\n    }\n    public void stopmain(){\n        MainV2 = null;\n    }\n\n    public void rankWindow(){\n        RankWindow rankWindow = new RankWindow();\n        rankWindow.setVisible(true);\n    }\n\n    public void Shopwindowopen(){\n        shopWindow = new ShopWindow(this);\n        inventoryManager= new InventoryManager(email,idToken,shopWindow,money);\n\n    }\n    public void ChatFriendswindow(String nickname){\n        chatwithFriends = new ChatwithFriends(this);\n        chatwithFriends.setFriends(nickname);\n        selectnickname = chatwithFriends.getFriends();\n        friendmessageReceiver = new MessageReceiver(idToken,chatwithFriends,this.nickname,selectnickname);\n        friendmessageReceiver.startReceivingFriendMessages();\n\n        if(chatwithFriends == null){\n            friendmessageReceiver.stopReceivingFriendMessages();\n        }\n    }\n\n\n    private void playBackgroundMusic(String filePath) {\n        try {\n            AudioInputStream audioStream = AudioSystem.getAudioInputStream(new File(filePath));\n            clip = AudioSystem.getClip();\n            clip.open(audioStream);\n            clip.loop(Clip.LOOP_CONTINUOUSLY); // 무한 반복\n        } catch (UnsupportedAudioFileException | IOException | LineUnavailableException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void playActiveSound(String filePath){\n        try{\n            AudioInputStream audioStream = AudioSystem.getAudioInputStream(new File(filePath));\n            clip = AudioSystem.getClip();\n            clip.open(audioStream);\n            clip.start();\n        }catch(UnsupportedAudioFileException | IOException | LineUnavailableException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void stopBackgroundMusic() {\n        if (clip != null && clip.isRunning()) {\n            clip.stop();\n        }\n    }\n\n\n\n    public void frendsAddwindows(){\n        addFriends = new AddFriends(friendManager);\n    }\n\n\n    public void stopReceivingFriendschat() {\n        scheduler1.shutdownNow();\n    }\n\n    public void startRecevingFriendInvite(){\n        scheduler2.scheduleAtFixedRate(this::receiveFriendsInvite, 0, 1, TimeUnit.SECONDS);\n    }\n\n    public void stopReceivingFriendInvite() {\n        scheduler2.shutdownNow();\n    }\n    public void receiveFriendsInvite() {\n        OkHttpClient client = new OkHttpClient();\n        String url = \"https://shootthedock-default-rtdb.firebaseio.com/friend/\" + nickname + \"/userinfo/friendswant.json?auth=\" + idToken;\n        Request request = new Request.Builder()\n                .url(url)\n                .get()\n                .build();\n        client.newCall(request).enqueue(new Callback() {\n            @Override\n            public void onFailure(Call call, IOException e) {\n                SwingUtilities.invokeLater(() -> {\n                    System.err.println(\"친구 목록 가져오기 실패: \" + e.getMessage());\n                });\n            }\n            @Override\n            public void onResponse(Call call, Response response) throws IOException {\n                if (response.isSuccessful()) {\n                    String responseBody = response.body().string();\n                    try {\n                        JSONObject jsonObject = new JSONObject(responseBody);\n                        // JSON 객체가 비어있는지 확인\n                        if (jsonObject.length() == 0) {\n                            SwingUtilities.invokeLater(() -> {\n                                System.out.println(\"친구 신청이 없습니다.\");\n                            });\n                            return;\n                        }\n                        // 친구 신청 목록 출력\n                        for (String key : jsonObject.keySet()) {\n                            JSONObject inviteObject = jsonObject.getJSONObject(key); // 친구 신청 객체\n                            String friendNickname = inviteObject.getString(NICKNAME_KEY); // 친구의 닉네임\n                            // 중복된 친구 신청이 아닌 경우에만 추가\n                            if (!existingFriendsinvite.contains(friendNickname)) {\n                                existingFriendsinvite.add(friendNickname); // 새로운 친구 신청 추가\n                                SwingUtilities.invokeLater(() -> {\n                                    inviteFriends.setFriends(friendNickname + \"\\n\"); // 친구 목록에 추가\n                                });\n                            }\n                        }\n                    } catch (JSONException e) {\n                        e.printStackTrace();\n                        SwingUtilities.invokeLater(() -> {\n                            System.err.println(\"친구 신청 목록 처리 중 오류 발생: \" + e.getMessage());\n                            stopReceivingFriendInvite();\n                        });\n                    }\n                } else {\n                    SwingUtilities.invokeLater(() -> {\n                        System.err.println(\"친구 목록 가져오기 실패: \" + response.message());\n                    });\n                }\n            }\n        });\n    }\n    public void deleteFriendInvite(String nicknameToDelete) {\n        OkHttpClient client = new OkHttpClient();\n        // \"nickname\" 키를 사용하여 friendswant 밑의 데이터를 삭제하는 URL\n        String url = \"https://shootthedock-default-rtdb.firebaseio.com/friend/\" + nickname + \"/userinfo/friendswant/\" + nicknameToDelete + \"/nickname.json?auth=\" + idToken;\n\n        Request request = new Request.Builder()\n                .url(url)\n                .delete()\n                .build();\n\n        client.newCall(request).enqueue(new Callback() {\n            @Override\n            public void onFailure(Call call, IOException e) {\n                SwingUtilities.invokeLater(() -> {\n                    System.err.println(\"친구 삭제 실패: \" + e.getMessage());\n                });\n            }\n\n            @Override\n            public void onResponse(Call call, Response response) throws IOException {\n                if (response.isSuccessful()) {\n                    SwingUtilities.invokeLater(() -> {\n                        System.out.println(\"친구 삭제 성공: \" + nicknameToDelete);\n                        // 여기서 UI 업데이트 등 추가 작업 가능\n                    });\n                } else {\n                    SwingUtilities.invokeLater(() -> {\n                        System.err.println(\"친구 삭제 실패: \" + response.message());\n                    });\n                }\n            }\n        });\n    }\n    public void setGun(String gun){\n        whatgun = gun;\n    }\n    public String getGun(){\n        return whatgun;\n    }\n    private void initializeFirebase() {\n        try {\n            FileInputStream serviceAccount = new FileInputStream(\"src/main/shootthedock-firebase-adminsdk-304qc-09167d3967.json\");\n\n            FirebaseOptions options = new FirebaseOptions.Builder()\n                    .setCredentials(GoogleCredentials.fromStream(serviceAccount))\n                    .setDatabaseUrl(DATABASE_URL)\n                    .build();\n\n            FirebaseApp.initializeApp(options);\n        } catch (IOException e) {\n            e.printStackTrace();\n            JOptionPane.showMessageDialog(this, \"Firebase 초기화 실패: \" + e.getMessage());\n        }\n    }\n    private void loginWithFirebase(String email, String password) {\n        OkHttpClient client = new OkHttpClient();\n        JSONObject json = new JSONObject();\n        json.put(\"email\", email);\n        json.put(\"password\", password);\n        json.put(\"returnSecureToken\", true);\n        RequestBody body = RequestBody.create(MediaType.parse(APPLICATION_JSON), json.toString());\n        Request request = new Request.Builder()\n                .url(FIREBASE_SIGNIN_URL + FIREBASE_API_KEY)\n                .post(body)\n                .build();\n\n        client.newCall(request).enqueue(new Callback() {\n            @Override\n            public void onFailure(Call call, IOException e) {\n                SwingUtilities.invokeLater(() -> JOptionPane.showMessageDialog(null, \"로그인 실패: \" + e.getMessage()));\n            }\n\n            @Override\n            public void onResponse(Call call, Response response) throws IOException {\n                if (response.isSuccessful()) {\n                    SwingUtilities.invokeLater(() -> {\n                        String responseBody;\n                        try {\n                            responseBody = response.body().string();\n                            JSONObject jsonResponse = new JSONObject(responseBody);\n                            // ID 토큰 가져오기\n                            idToken = jsonResponse.getString(\"idToken\");\n                            System.out.println(\"ID 토큰: \" + idToken);\n                            // 사용자의 닉네임을 가져옵니다.\n                            getNickname(idToken);\n                            getMoney();\n                        } catch (IOException e) {\n                            throw new RuntimeException(e);\n                        }\n                    });\n                } else {\n                    SwingUtilities.invokeLater(() -> JOptionPane.showMessageDialog(null, \"로그인 실패: 잘못된 자격 증명\"));\n                }\n            }\n        });\n    }\n\n    public void getMoney() {\n        OkHttpClient client = new OkHttpClient();\n        String url = FIREBASE_BASE_URL + email + USER_INFO_SUFFIX + idToken;\n\n        Request request = new Request.Builder()\n                .url(url)\n                .get()\n                .build();\n\n        client.newCall(request).enqueue(new Callback() {\n            @Override\n            public void onFailure(Call call, IOException e) {\n                SwingUtilities.invokeLater(() -> {\n                    System.err.println(ERROR_MESSAGE + e.getMessage());\n                });\n            }\n\n            @Override\n            public void onResponse(Call call, Response response) throws IOException {\n                if (response.isSuccessful()) {\n                    String responseBody = response.body().string();\n                    JSONObject jsonResponse = new JSONObject(responseBody);\n\n                    if (jsonResponse.has(MONEY_KEY)) {\n                        money = jsonResponse.getInt(MONEY_KEY);\n                        System.out.println(\"money: \" + money);\n                        MainV2.setMoney(money);\n                    } else {\n                        System.err.println(\"사용자 정보가 존재하지 않습니다.\");\n                    }\n                } else {\n                    SwingUtilities.invokeLater(() -> {\n                        System.err.println(ERROR_MESSAGE + response.message());\n                    });\n                }\n            }\n        });\n    }\n\n\n    public void saveScore(int score) {\n        OkHttpClient client = new OkHttpClient();\n\n        // Step 1: 사용자 정보에 점수 저장\n        String uniqueKey = String.valueOf(System.currentTimeMillis()); // 시간 기반의 고유 키 생성\n        JSONObject userJson = new JSONObject();\n        try {\n            userJson.put(uniqueKey, score); // 시간 기반의 고유 키 아래에 점수만 저장\n        } catch (JSONException e) {\n            System.err.println(\"JSON 생성 오류: \" + e.getMessage());\n            return;\n        }\n\n        RequestBody userBody = RequestBody.create(MediaType.parse(APPLICATION_JSON), userJson.toString());\n        Request userRequest = new Request.Builder()\n                .url(FIREBASE_BASE_URL + email + \"/userinfo/scores.json?auth=\" + idToken)\n                .patch(userBody) // 데이터를 추가할 때는 PATCH를 사용하여 기존 데이터를 유지\n                .build();\n\n        client.newCall(userRequest).enqueue(new Callback() {\n            @Override\n            public void onFailure(Call call, IOException e) {\n                System.err.println(SCORE_SAVE_FAILURE_MESSAGE + e.getMessage());\n            }\n\n            @Override\n            public void onResponse(Call call, Response response) throws IOException {\n                if (response.isSuccessful()) {\n                    System.out.println(\"사용자 정보에 점수 저장 성공\");\n\n                    // Step 2: 최고 점수 확인 및 리더보드 업데이트\n                    checkAndSaveLeaderboard(score);\n                } else {\n                    System.err.println(SCORE_SAVE_FAILURE_MESSAGE + response.code());\n                }\n            }\n        });\n    }\n\n\n    public void saveMoney(int money) {\n        OkHttpClient client = new OkHttpClient();\n        money = this.money + money;\n        // Step 1: 사용자 정보에 점수 저장\n        JSONObject userJson = new JSONObject();\n        userJson.put(MONEY_KEY, money);\n\n        RequestBody userBody = RequestBody.create(MediaType.parse(APPLICATION_JSON), userJson.toString());\n        Request userRequest = new Request.Builder()\n                .url(FIREBASE_BASE_URL + email + USER_INFO_SUFFIX + idToken)\n                .patch(userBody)\n                .build();\n\n        client.newCall(userRequest).enqueue(new Callback() {\n            @Override\n            public void onFailure(Call call, IOException e) {\n                System.err.println(SCORE_SAVE_FAILURE_MESSAGE + e.getMessage());\n            }\n\n            @Override\n            public void onResponse(Call call, Response response) throws IOException {\n                if (response.isSuccessful()) {\n                    System.out.println(\"사용자 정보에 점수 저장 성공\");\n                } else {\n                    System.err.println(SCORE_SAVE_FAILURE_MESSAGE + response.code());\n                }\n            }\n        });\n    }\n\n    private void checkAndSaveLeaderboard(int latestScore) {\n        OkHttpClient client = new OkHttpClient();\n\n        // 사용자 정보에서 모든 점수를 가져옴\n        String userScoresUrl = FIREBASE_BASE_URL + email + \"/userinfo/scores.json?auth=\" + idToken;\n        Request request = new Request.Builder()\n                .url(userScoresUrl)\n                .get()\n                .build();\n\n        client.newCall(request).enqueue(new Callback() {\n            @Override\n            public void onFailure(Call call, IOException e) {\n                System.err.println(\"점수 목록 가져오기 실패: \" + e.getMessage());\n            }\n\n            @Override\n            public void onResponse(Call call, Response response) throws IOException {\n                if (response.isSuccessful()) {\n                    String responseBody = response.body().string();\n\n                    // 응답이 비어 있거나 유효하지 않은 경우 처리\n                    if (responseBody == null || responseBody.trim().isEmpty()) {\n                        System.err.println(\"응답이 비어있거나 잘못되었습니다.\");\n                        return;\n                    }\n\n                    try {\n                        int highestScore = latestScore;\n\n                        // 응답이 JSON 객체인지 확인\n                        JSONObject scoresObject = new JSONObject(responseBody);\n\n                        // 객체에서 모든 점수 탐색 (타임스탬프를 키로 사용)\n                        Iterator<String> keys = scoresObject.keys();\n                        while (keys.hasNext()) {\n                            String key = keys.next();\n                            int score = scoresObject.getInt(key);\n                            if (score > highestScore) {\n                                highestScore = score;\n                            }\n                        }\n\n                        // 리더보드에 최고 점수가 있는지 확인 후 없으면 저장\n                        saveToLeaderboardIfHighest(highestScore);\n\n                    } catch (JSONException e) {\n                        System.err.println(\"JSON 파싱 오류: \" + e.getMessage());\n                    }\n                } else {\n                    System.err.println(\"점수 목록 가져오기 실패: \" + response.code());\n                }\n            }\n        });\n    }\n\n\n\n\n    private void saveToLeaderboardIfHighest(int highestUserScore) {\n        OkHttpClient client = new OkHttpClient();\n\n        // 리더보드 URL 정의\n        String leaderboardUrl = \"https://shootthedock-default-rtdb.firebaseio.com/leaderboard.json?auth=\" + idToken;\n\n        // 리더보드 정보를 GET 요청으로 가져옴\n        Request getLeaderboardRequest = new Request.Builder()\n                .url(leaderboardUrl)\n                .get()\n                .build();\n\n        client.newCall(getLeaderboardRequest).enqueue(new Callback() {\n            @Override\n            public void onFailure(Call call, IOException e) {\n                System.err.println(\"리더보드 점수 가져오기 실패: \" + e.getMessage());\n            }\n\n            @Override\n            public void onResponse(Call call, Response response) throws IOException {\n                if (response.isSuccessful()) {\n                    String responseBody = response.body().string();\n                    try {\n                        boolean isNewHighScore = true;\n\n                        // 리더보드가 비어 있지 않다면 현재 최고 점수 확인\n                        if (!responseBody.trim().isEmpty() && !responseBody.equals(\"{}\")) {\n                            JSONObject leaderboardObject = new JSONObject(responseBody);\n                            if (leaderboardObject.has(nickname)) {\n                                // 자신의 점수를 찾았으면, 기존 점수와 비교\n                                int existingScore = leaderboardObject.getJSONObject(nickname).getInt(\"score\");\n                                if (existingScore >= highestUserScore) {\n                                    isNewHighScore = false;\n                                }\n                            }\n                        }\n\n                        // 새로운 최고 점수라면 리더보드에 추가 또는 갱신\n                        if (isNewHighScore) {\n                            addToLeaderboard(highestUserScore);\n                        }\n                    } catch (JSONException e) {\n                        System.err.println(\"JSON 파싱 오류: \" + e.getMessage());\n                    }\n                } else {\n                    System.err.println(\"리더보드 점수 가져오기 실패: \" + response.code());\n                }\n            }\n        });\n    }\n\n    private void addToLeaderboard(int highestUserScore) {\n        OkHttpClient client = new OkHttpClient();\n\n        // 리더보드 URL 정의, 닉네임을 키로 사용\n        String leaderboardUrl = \"https://shootthedock-default-rtdb.firebaseio.com/leaderboard/\" + nickname + \".json?auth=\" + idToken;\n\n        // 리더보드에 저장할 JSON 객체 생성\n        JSONObject newEntry = new JSONObject();\n        try {\n            newEntry.put(NICKNAME_KEY, nickname);\n            newEntry.put(\"score\", highestUserScore);\n        } catch (JSONException e) {\n            System.err.println(\"JSON 생성 오류: \" + e.getMessage());\n            return;\n        }\n\n        // 새로운 점수 추가를 위한 PUT 요청\n        RequestBody body = RequestBody.create(MediaType.parse(APPLICATION_JSON), newEntry.toString());\n        Request updateRequest = new Request.Builder()\n                .url(leaderboardUrl) // 닉네임을 키로 사용해 저장\n                .put(body)\n                .build();\n\n        client.newCall(updateRequest).enqueue(new Callback() {\n            @Override\n            public void onFailure(Call call, IOException e) {\n                System.err.println(\"리더보드 업데이트 실패: \" + e.getMessage());\n            }\n\n            @Override\n            public void onResponse(Call call, Response response) throws IOException {\n                if (response.isSuccessful()) {\n                    System.out.println(\"리더보드 업데이트 성공: 최고 점수 \" + highestUserScore);\n                } else {\n                    System.err.println(\"리더보드 업데이트 실패: \" + response.code());\n                }\n            }\n        });\n    }\n\n\n\n\n\n\n\n    public void getNickname(String idToken) {\n        OkHttpClient client = new OkHttpClient();\n        String url = FIREBASE_BASE_URL + email + USER_INFO_SUFFIX + idToken;\n\n        Request request = new Request.Builder()\n                .url(url)\n                .get()\n                .build();\n\n        client.newCall(request).enqueue(new Callback() {\n            @Override\n            public void onFailure(Call call, IOException e) {\n                SwingUtilities.invokeLater(() -> {\n                    System.err.println(ERROR_MESSAGE + e.getMessage());\n                });\n            }\n\n            @Override\n            public void onResponse(Call call, Response response) throws IOException {\n                if (response.isSuccessful()) {\n                    String responseBody = response.body().string();\n                    JSONObject jsonResponse = new JSONObject(responseBody);\n\n                    if (jsonResponse.has(NICKNAME_KEY)) {\n                        nickname = jsonResponse.getString(NICKNAME_KEY);\n                        System.out.println(\"Nickname: \" + nickname);\n                        MainV2.setNickname(nickname);\n                        friendManager = new FriendManager(email,nickname);\n                        messageManager = new MessageManager(nickname);\n                        messageReceiver = new MessageReceiver(idToken,MainV2,email);\n                        messageReceiver.startReceivingMessages();\n                    } else {\n                        System.err.println(\"사용자 정보가 존재하지 않습니다.\");\n                    }\n                } else {\n                    SwingUtilities.invokeLater(() -> {\n                        System.err.println(ERROR_MESSAGE + response.message());\n                    });\n                }\n            }\n        });\n    }\n\n    public static Framework getInstance() {\n        if (instance == null) {\n            instance = new Framework(new Window());\n        }\n        return instance;\n    }\n\n    public void onLoginSuccess() {\n        isLoginSuccessful = true;\n        loginWithFirebase(realemail, password);\n        MainV2.setVisible(true);\n        stoploginClinet();\n        playBackgroundMusic(\"src/main/resources/sounds/backgroundonMain.wav\");\n    }\n\n    public void onGameStart(){\n        MainV2.dispose();\n        stopBackgroundMusic();\n        window.onLoginSuccess();\n        gameState = GameState.VISUALIZING;\n        this.setVisible(true);\n        gameThread = new Thread() {\n            @Override\n            public void run(){\n                GameLoop();\n            }\n        };\n        gameThread.start();\n    }\n    /**\n     * Set variables and objects.\n     * This method is intended to set the variables and objects for this class, variables and objects for the actual game can be set in kr.jbnu.se.std.Game.java.\n     */\n    private void Initialize()\n    {\n        // 화면 크기 정보를 가져옵니다.\n        GraphicsDevice gd = GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice();\n        Rectangle screenSize = gd.getDefaultConfiguration().getBounds();\n        frameWidth = (int) screenSize.getWidth();\n        frameHeight = (int) screenSize.getHeight();\n        this.setSize(frameWidth, frameHeight);\n    }\n\n\n    /**\n     * Load files - images, sounds, ...\n     * This method is intended to load files for this class, files for the actual game can be loaded in kr.jbnu.se.std.Game.java.\n     */\n    private void LoadContent()\n    {\n        try\n        {\n            URL shootTheDuckMenuImgUrl = this.getClass().getResource(\"/images/menu.jpg\");\n            shootTheDuckMenuImg = ImageIO.read(shootTheDuckMenuImgUrl);\n\n            // 이미지가 화면 크기에 맞게 조정됩니다.\n            shootTheDuckMenuImg = resizeImage(shootTheDuckMenuImg, frameWidth, frameHeight);\n        }\n        catch (IOException ex) {\n            Logger.getLogger(Framework.class.getName()).log(Level.SEVERE, null, ex);\n        }\n    }\n    public void getEmail(String email){\n        realemail = email;\n    }\n    public void getPassword(String password){\n        this.password = password;\n    }\n    public void getIdtoken(String idToken){\n        this.idToken = idToken;\n    }\n    public void getUserId(String userId){\n        email = userId;\n\n    }\n    private BufferedImage resizeImage(BufferedImage originalImage, int targetWidth, int targetHeight) {\n        int originalWidth = originalImage.getWidth();\n        int originalHeight = originalImage.getHeight();\n        // 이미지의 가로와 세로 비율을 계산합니다.\n        float aspectRatio = (float) originalWidth / originalHeight;\n        int newWidth;\n        int newHeight;\n        // 화면의 비율에 맞게 이미지를 조정합니다.\n        if (targetWidth / (float) targetHeight > aspectRatio) {\n            newWidth = (int) (targetHeight * aspectRatio);\n            newHeight = targetHeight;\n        } else {\n            newWidth = targetWidth;\n            newHeight = (int) (targetWidth / aspectRatio);\n        }\n        BufferedImage resizedImage = new BufferedImage(newWidth, newHeight, originalImage.getType());\n        Graphics2D g = resizedImage.createGraphics();\n        g.drawImage(originalImage, 0, 0, newWidth, newHeight, null);\n        g.dispose();\n        return resizedImage;\n    }\n    /**\n     * In specific intervals of time (GAME_UPDATE_PERIOD) the game/logic is updated and then the game is drawn on the screen.\n     */\n    private void GameLoop()\n    {\n        // This two variables are used in VISUALIZING state of the game. We used them to wait some time so that we get correct frame/window resolution.\n        long visualizingTime = 0, lastVisualizingTime = System.nanoTime();\n        // This variables are used for calculating the time that defines for how long we should put threat to sleep to meet the GAME_FPS.\n        long beginTime, timeTaken, timeLeft;\n        while(true)\n        {\n            beginTime = System.nanoTime();\n            switch (gameState)\n            {\n                case ENDING:\n                    gameTime += System.nanoTime() - lastTime;\n                    game.UpdateGame(gameTime, mousePosition());\n                    lastTime = System.nanoTime();\n                    break;\n                case PAUSE:\n                    gameTime += System.nanoTime() - lastTime;\n                    game.UpdateGame(gameTime, mousePosition());\n                    lastTime = System.nanoTime();\n                    break;\n                case MAINPAGE:\n                    gameState = GameState.STARTING;\n                    break;\n                case PLAYING:\n                    gameTime += System.nanoTime() - lastTime;\n                    game.UpdateGame(gameTime, mousePosition());\n                    lastTime = System.nanoTime();\n                    break;\n                case GAMEOVER:\n                    gameTime += System.nanoTime() - lastTime;\n                    lastTime = System.nanoTime();\n                    break;\n                case LOGIN:\n                    if (isLoginSuccessful) {\n                        gameState = GameState.MAINPAGE;\n                    }\n                    break;\n                case MAIN_MENU:\n                    //...\n                    break;\n                case OPTIONS:\n                    //...\n                    break;\n                case GAME_CONTENT_LOADING:\n                    //...\n                    break;\n                case STARTING:\n                    // Sets variables and objects.\n                    Initialize();\n                    // Load files - images, sounds, ...\n                    LoadContent();\n                    // When all things that are called above finished, we change game status to main menu.\n                    gameState = GameState.MAIN_MENU;\n                    break;\n                case VISUALIZING:\n                    // On Ubuntu OS (when I tested on my old computer) this.getWidth() method doesn't return the correct value immediately (eg. for frame that should be 800px width, returns 0 than 790 and at last 798px).\n                    // So we wait one second for the window/frame to be set to its correct size. Just in case we\n                    // also insert 'this.getWidth() > 1' condition in case when the window/frame size wasn't set in time,\n                    // so that we although get approximately size.\n                    if(this.getWidth() > 1 && visualizingTime > SECINNANOSEC)\n                    {\n                        frameWidth = this.getWidth();\n                        frameHeight = this.getHeight();\n\n                        // When we get size of frame we change status.\n                        gameState = GameState.STARTING;\n                    }\n                    else\n                    {\n                        visualizingTime += System.nanoTime() - lastVisualizingTime;\n                        lastVisualizingTime = System.nanoTime();\n                    }\n                    break;\n                default:\n                    System.out.println(\"Unhandled GameState: \" + gameState);\n                    break;\n            }\n\n            // Repaint the screen.\n            repaint();\n\n            // Here we calculate the time that defines for how long we should put threat to sleep to meet the GAME_FPS.\n            timeTaken = System.nanoTime() - beginTime;\n            timeLeft = (GAME_UPDATE_PERIOD - timeTaken) / MILISECINNANOSEC; // In milliseconds\n            // If the time is less than 10 milliseconds, then we will put thread to sleep for 10 millisecond so that some other thread can do some work.\n            if (timeLeft < 10)\n                timeLeft = 10; //set a minimum\n            try {\n                //Provides the necessary delay and also yields control so that other thread can do work.\n                Thread.sleep(timeLeft);\n            } catch (InterruptedException ex) { }\n        }\n    }\n\n    @Override\n    public void Draw(Graphics2D g2d) {\n            switch (gameState) {\n                case ENDING:\n                    game.DrawEnding(g2d, mousePosition(),gameTime);\n                    break;\n                case PAUSE:\n                    game.Draw(g2d, mousePosition());\n                    break;\n                case PLAYING:\n                    game.Draw(g2d, mousePosition());\n                    break;\n                case GAMEOVER:\n                    game.DrawGameOver(g2d, mousePosition());\n                    break;\n                case MAIN_MENU:\n                    // 중앙에 이미지를 배치합니다.\n                    int x1 = (frameWidth - shootTheDuckMenuImg.getWidth()) / 2;\n                    int y1 = (frameHeight - shootTheDuckMenuImg.getHeight()) / 2;\n                    g2d.drawImage(shootTheDuckMenuImg, x1, y1, null);\n                    break;\n                case OPTIONS:\n                    //...\n                    break;\n                case GAME_CONTENT_LOADING:\n                    g2d.setColor(Color.white);\n                    g2d.drawString(\"GAME is LOADING\", frameWidth / 2 - 50, frameHeight / 2);\n                    break;\n                default:\n                    System.out.println(\"Unhandled GameState: \" + gameState);\n                    break;\n            }\n    }\n    /**\n     * Starts new game.\n     */\n    private void newGame()\n    {\n        // We set gameTime to zero and lastTime to current time for later calculations.\n        gameTime = 0;\n        lastTime = System.nanoTime();\n        game = new Game(this);\n    }\n\n    /**\n     *  Restart game - reset game time and call RestartGame() method of game object so that reset some variables.\n     */\n    private void restartGame()\n    {\n        // We set gameTime to zero and lastTime to current time for later calculations.\n        gameTime = 0;\n        lastTime = System.nanoTime();\n        game.RestartGame();\n        // We change game status so that the game can start.\n        gameState = GameState.PLAYING;\n    }\n\n    private void nextRoundGame()\n    {\n        // We set gameTime to zero and lastTime to current time for later calculations.\n        gameTime = 0;\n        lastTime = System.nanoTime();\n\n\n        game.NextRound();\n\n        // We change game status so that the game can start.\n        gameState = GameState.PLAYING;\n    }\n\n    /**\n     * Returns the position of the mouse pointer in game frame/window.\n     * If mouse position is null than this method return 0,0 coordinate.\n     *\n     * @return Point of mouse coordinates.\n     */\n    private Point mousePosition()\n    {\n        try\n        {\n            Point mp = this.getMousePosition();\n\n            if(mp != null)\n                return this.getMousePosition();\n            else\n                return new Point(0, 0);\n        }\n        catch (Exception e)\n        {\n            return new Point(0, 0);\n        }\n    }\n\n    /**\n     * This method is called when keyboard key is released.\n     *\n     * @param e KeyEvent\n     */\n    @Override\n    public void keyReleasedFramework(KeyEvent e)\n    {\n        switch (gameState)\n        {\n            case ENDING:\n                if(e.getKeyCode() == KeyEvent.VK_ESCAPE){\n                    System.exit(0);\n                }\n                if(e.getKeyCode() == KeyEvent.VK_SPACE){\n                    game.ed++;\n                }\n                break;\n            case PAUSE:\n                if(e.getKeyCode() == KeyEvent.VK_SPACE){\n                    nextRoundGame();\n                }\n                break;\n            case GAMEOVER:\n                if (e.getKeyCode() == KeyEvent.VK_ESCAPE) {\n                    System.exit(0);\n                } else if (e.getKeyCode() == KeyEvent.VK_SPACE || e.getKeyCode() == KeyEvent.VK_ENTER) {\n                    gameState = GameState.MAIN_MENU;  // 게임 오버 시 스페이스바나 엔터를 누르면 메인 메뉴로 돌아감\n                }\n                break;\n            case PLAYING:\n            case MAIN_MENU:\n                if(e.getKeyCode() == KeyEvent.VK_ESCAPE)\n                    System.exit(0);\n                break;\n\n        }\n    }\n\n    /**\n     * This method is called when mouse button is clicked.\n     *\n     * @param e MouseEvent\n     */\n    @Override\n    public void mouseClicked(MouseEvent e) {\n        switch (gameState) {\n            case MAIN_MENU:\n                if (e.getButton() == MouseEvent.BUTTON1)\n                    newGame();\n                break;\n            default:\n                // 다른 상태에서는 특별히 동작하지 않음\n                System.out.println(\"Unhandled game state: \" + gameState);\n                break;\n        }\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/kr/jbnu/se/std/Framework.java b/src/main/java/kr/jbnu/se/std/Framework.java
--- a/src/main/java/kr/jbnu/se/std/Framework.java	(revision e345472118693a8590edc2ef168582159a17586a)
+++ b/src/main/java/kr/jbnu/se/std/Framework.java	(date 1733117661951)
@@ -30,6 +30,7 @@
 import java.util.concurrent.Executors;
 import java.util.concurrent.ScheduledExecutorService;
 import java.util.concurrent.TimeUnit;
+import java.util.function.Consumer;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 import javax.imageio.ImageIO;
@@ -303,57 +304,57 @@
     public void receiveFriendsInvite() {
         OkHttpClient client = new OkHttpClient();
         String url = "https://shootthedock-default-rtdb.firebaseio.com/friend/" + nickname + "/userinfo/friendswant.json?auth=" + idToken;
-        Request request = new Request.Builder()
-                .url(url)
-                .get()
-                .build();
-        client.newCall(request).enqueue(new Callback() {
+
+        client.newCall(new Request.Builder().url(url).get().build()).enqueue(new Callback() {
             @Override
             public void onFailure(Call call, IOException e) {
-                SwingUtilities.invokeLater(() -> {
-                    System.err.println("친구 목록 가져오기 실패: " + e.getMessage());
-                });
+                logError("친구 목록 가져오기 실패", e.getMessage());
             }
+
             @Override
             public void onResponse(Call call, Response response) throws IOException {
                 if (response.isSuccessful()) {
-                    String responseBody = response.body().string();
-                    try {
-                        JSONObject jsonObject = new JSONObject(responseBody);
-                        // JSON 객체가 비어있는지 확인
-                        if (jsonObject.length() == 0) {
-                            SwingUtilities.invokeLater(() -> {
-                                System.out.println("친구 신청이 없습니다.");
-                            });
-                            return;
-                        }
-                        // 친구 신청 목록 출력
-                        for (String key : jsonObject.keySet()) {
-                            JSONObject inviteObject = jsonObject.getJSONObject(key); // 친구 신청 객체
-                            String friendNickname = inviteObject.getString(NICKNAME_KEY); // 친구의 닉네임
-                            // 중복된 친구 신청이 아닌 경우에만 추가
-                            if (!existingFriendsinvite.contains(friendNickname)) {
-                                existingFriendsinvite.add(friendNickname); // 새로운 친구 신청 추가
-                                SwingUtilities.invokeLater(() -> {
-                                    inviteFriends.setFriends(friendNickname + "\n"); // 친구 목록에 추가
-                                });
-                            }
-                        }
-                    } catch (JSONException e) {
-                        e.printStackTrace();
-                        SwingUtilities.invokeLater(() -> {
-                            System.err.println("친구 신청 목록 처리 중 오류 발생: " + e.getMessage());
-                            stopReceivingFriendInvite();
-                        });
-                    }
-                } else {
-                    SwingUtilities.invokeLater(() -> {
-                        System.err.println("친구 목록 가져오기 실패: " + response.message());
-                    });
-                }
-            }
-        });
+                    processFriendInvites(response.body().string());
+                } else {
+                    logError("친구 목록 가져오기 실패", response.message());
+                }
+            }
+        });
+    }
+
+    private void processFriendInvites(String responseBody) {
+        SwingUtilities.invokeLater(() -> {
+            try {
+                JSONObject jsonObject = new JSONObject(responseBody);
+
+                if (jsonObject.isEmpty()) {
+                    System.out.println("친구 신청이 없습니다.");
+                    return;
+                }
+
+                for (String key : jsonObject.keySet()) {
+                    handleFriendInvite(jsonObject.getJSONObject(key));
+                }
+            } catch (JSONException e) {
+                logError("친구 신청 목록 처리 중 오류 발생", e.getMessage());
+                stopReceivingFriendInvite();
+            }
+        });
+    }
+
+    private void handleFriendInvite(JSONObject inviteObject) throws JSONException {
+        String friendNickname = inviteObject.getString(NICKNAME_KEY);
+
+        if (!existingFriendsinvite.contains(friendNickname)) {
+            existingFriendsinvite.add(friendNickname);
+            SwingUtilities.invokeLater(() -> inviteFriends.setFriends(friendNickname + "\n"));
+        }
     }
+
+    private void logError(String message, String errorDetails) {
+        SwingUtilities.invokeLater(() -> System.err.println(message + ": " + errorDetails));
+    }
+
     public void deleteFriendInvite(String nicknameToDelete) {
         OkHttpClient client = new OkHttpClient();
         // "nickname" 키를 사용하여 friendswant 밑의 데이터를 삭제하는 URL
@@ -563,15 +564,9 @@
 
     private void checkAndSaveLeaderboard(int latestScore) {
         OkHttpClient client = new OkHttpClient();
-
-        // 사용자 정보에서 모든 점수를 가져옴
         String userScoresUrl = FIREBASE_BASE_URL + email + "/userinfo/scores.json?auth=" + idToken;
-        Request request = new Request.Builder()
-                .url(userScoresUrl)
-                .get()
-                .build();
 
-        client.newCall(request).enqueue(new Callback() {
+        client.newCall(new Request.Builder().url(userScoresUrl).get().build()).enqueue(new Callback() {
             @Override
             public void onFailure(Call call, IOException e) {
                 System.err.println("점수 목록 가져오기 실패: " + e.getMessage());
@@ -581,32 +576,14 @@
             public void onResponse(Call call, Response response) throws IOException {
                 if (response.isSuccessful()) {
                     String responseBody = response.body().string();
-
-                    // 응답이 비어 있거나 유효하지 않은 경우 처리
                     if (responseBody == null || responseBody.trim().isEmpty()) {
                         System.err.println("응답이 비어있거나 잘못되었습니다.");
                         return;
                     }
 
                     try {
-                        int highestScore = latestScore;
-
-                        // 응답이 JSON 객체인지 확인
-                        JSONObject scoresObject = new JSONObject(responseBody);
-
-                        // 객체에서 모든 점수 탐색 (타임스탬프를 키로 사용)
-                        Iterator<String> keys = scoresObject.keys();
-                        while (keys.hasNext()) {
-                            String key = keys.next();
-                            int score = scoresObject.getInt(key);
-                            if (score > highestScore) {
-                                highestScore = score;
-                            }
-                        }
-
-                        // 리더보드에 최고 점수가 있는지 확인 후 없으면 저장
+                        int highestScore = findHighestScore(responseBody, latestScore);
                         saveToLeaderboardIfHighest(highestScore);
-
                     } catch (JSONException e) {
                         System.err.println("JSON 파싱 오류: " + e.getMessage());
                     }
@@ -617,18 +594,37 @@
         });
     }
 
+    private int findHighestScore(String responseBody, int latestScore) throws JSONException {
+        int highestScore = latestScore;
+        JSONObject scoresObject = new JSONObject(responseBody);
+
+        for (Iterator<String> keys = scoresObject.keys(); keys.hasNext(); ) {
+            int score = scoresObject.getInt(keys.next());
+            highestScore = Math.max(highestScore, score);
+        }
+
+        return highestScore;
+    }
+
+
 
 
 
     private void saveToLeaderboardIfHighest(int highestUserScore) {
+        String leaderboardUrl = "https://shootthedock-default-rtdb.firebaseio.com/leaderboard.json?auth=" + idToken;
         OkHttpClient client = new OkHttpClient();
 
-        // 리더보드 URL 정의
-        String leaderboardUrl = "https://shootthedock-default-rtdb.firebaseio.com/leaderboard.json?auth=" + idToken;
+        // highestUserScore를 fetchLeaderboard에 전달
+        fetchLeaderboard(client, leaderboardUrl, highestUserScore, (isNewHighScore) -> {
+            if (isNewHighScore) {
+                addToLeaderboard(highestUserScore);
+            }
+        });
+    }
 
-        // 리더보드 정보를 GET 요청으로 가져옴
+    private void fetchLeaderboard(OkHttpClient client, String url, int highestUserScore, Consumer<Boolean> callback) {
         Request getLeaderboardRequest = new Request.Builder()
-                .url(leaderboardUrl)
+                .url(url)
                 .get()
                 .build();
 
@@ -641,26 +637,10 @@
             @Override
             public void onResponse(Call call, Response response) throws IOException {
                 if (response.isSuccessful()) {
-                    String responseBody = response.body().string();
                     try {
-                        boolean isNewHighScore = true;
-
-                        // 리더보드가 비어 있지 않다면 현재 최고 점수 확인
-                        if (!responseBody.trim().isEmpty() && !responseBody.equals("{}")) {
-                            JSONObject leaderboardObject = new JSONObject(responseBody);
-                            if (leaderboardObject.has(nickname)) {
-                                // 자신의 점수를 찾았으면, 기존 점수와 비교
-                                int existingScore = leaderboardObject.getJSONObject(nickname).getInt("score");
-                                if (existingScore >= highestUserScore) {
-                                    isNewHighScore = false;
-                                }
-                            }
-                        }
-
-                        // 새로운 최고 점수라면 리더보드에 추가 또는 갱신
-                        if (isNewHighScore) {
-                            addToLeaderboard(highestUserScore);
-                        }
+                        String responseBody = response.body().string();
+                        boolean isNewHighScore = checkIfNewHighScore(responseBody, highestUserScore);
+                        callback.accept(isNewHighScore);
                     } catch (JSONException e) {
                         System.err.println("JSON 파싱 오류: " + e.getMessage());
                     }
@@ -671,6 +651,21 @@
         });
     }
 
+    private boolean checkIfNewHighScore(String responseBody, int highestUserScore) throws JSONException {
+        if (responseBody.trim().isEmpty() || responseBody.equals("{}")) {
+            return true; // 리더보드가 비어있다면 새로운 최고 점수로 간주
+        }
+
+        JSONObject leaderboardObject = new JSONObject(responseBody);
+        if (leaderboardObject.has(nickname)) {
+            int existingScore = leaderboardObject.getJSONObject(nickname).getInt("score");
+            return highestUserScore > existingScore; // 기존 점수와 비교
+        }
+
+        return true; // 리더보드에 해당 닉네임이 없으면 새로운 최고 점수로 간주
+    }
+
+
     private void addToLeaderboard(int highestUserScore) {
         OkHttpClient client = new OkHttpClient();
 
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AnalysisUIOptions\">\n    <option name=\"GROUP_BY_SEVERITY\" value=\"true\" />\n  </component>\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"e255d515-7351-4cf8-8843-af8a77729b48\" name=\"Changes\" comment=\"metrix\">\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/24__11__20___7_28_________Changes_.xml\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/24__11__27___3_36_________Changes_.xml\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/kr/jbnu/se/std/AddFriends.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/kr/jbnu/se/std/AddFriends.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/kr/jbnu/se/std/Framework.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/kr/jbnu/se/std/Framework.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/kr/jbnu/se/std/Game.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/kr/jbnu/se/std/Game.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/target/classes/kr/jbnu/se/std/AddFriends$1.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/kr/jbnu/se/std/AddFriends$1.class\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/target/classes/kr/jbnu/se/std/AddFriends.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/kr/jbnu/se/std/AddFriends.class\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/target/classes/kr/jbnu/se/std/BossConfig.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/kr/jbnu/se/std/BossConfig.class\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Buttonbuy.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Buttonbuy.class\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/target/classes/kr/jbnu/se/std/ChatwithFriends.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/kr/jbnu/se/std/ChatwithFriends.class\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Duck.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Duck.class\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/target/classes/kr/jbnu/se/std/FirebaseClient.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/kr/jbnu/se/std/FirebaseClient.class\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Framework.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Framework.class\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/target/classes/kr/jbnu/se/std/FriendManager.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/kr/jbnu/se/std/FriendManager.class\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Game$GameState.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Game$GameState.class\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Game.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Game.class\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/target/classes/kr/jbnu/se/std/GiftBox.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/kr/jbnu/se/std/GiftBox.class\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Hunter1.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Hunter1.class\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/target/classes/kr/jbnu/se/std/InventoryManager$3.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/kr/jbnu/se/std/InventoryManager$3.class\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/target/classes/kr/jbnu/se/std/InventoryManager.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/kr/jbnu/se/std/InventoryManager.class\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/target/classes/kr/jbnu/se/std/InventoryWindow.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/kr/jbnu/se/std/InventoryWindow.class\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/target/classes/kr/jbnu/se/std/InviteFriends.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/kr/jbnu/se/std/InviteFriends.class\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/target/classes/kr/jbnu/se/std/LoginClient$12.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/kr/jbnu/se/std/LoginClient$12.class\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/target/classes/kr/jbnu/se/std/LoginClient$13.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/kr/jbnu/se/std/LoginClient$13.class\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/target/classes/kr/jbnu/se/std/LoginClient$ImagePanel.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/kr/jbnu/se/std/LoginClient$ImagePanel.class\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/target/classes/kr/jbnu/se/std/LoginClient.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/kr/jbnu/se/std/LoginClient.class\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/target/classes/kr/jbnu/se/std/MainClient.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/kr/jbnu/se/std/MainClient.class\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/target/classes/kr/jbnu/se/std/MessageManager.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/kr/jbnu/se/std/MessageManager.class\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/target/classes/kr/jbnu/se/std/MessageReceiver$1.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/kr/jbnu/se/std/MessageReceiver$1.class\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/target/classes/kr/jbnu/se/std/MessageReceiver$2.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/kr/jbnu/se/std/MessageReceiver$2.class\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/target/classes/kr/jbnu/se/std/MessageReceiver$3.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/kr/jbnu/se/std/MessageReceiver$3.class\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/target/classes/kr/jbnu/se/std/MessageReceiver$4.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/kr/jbnu/se/std/MessageReceiver$4.class\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/target/classes/kr/jbnu/se/std/MessageReceiver.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/kr/jbnu/se/std/MessageReceiver.class\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/target/classes/kr/jbnu/se/std/RankWindow.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/kr/jbnu/se/std/RankWindow.class\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/target/classes/kr/jbnu/se/std/ShopWindow$BackgroundPanel.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/kr/jbnu/se/std/ShopWindow$BackgroundPanel.class\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/target/classes/kr/jbnu/se/std/ShopWindow$OuterPanel.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/kr/jbnu/se/std/ShopWindow$OuterPanel.class\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/target/classes/kr/jbnu/se/std/ShopWindow.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/kr/jbnu/se/std/ShopWindow.class\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/target/classes/kr/jbnu/se/std/WindowManager.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/kr/jbnu/se/std/WindowManager.class\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/target/classes/kr/jbnu/se/std/boss1.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/kr/jbnu/se/std/boss1.class\" afterDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"ExportToHTMLSettings\">\n    <option name=\"OUTPUT_DIRECTORY\" value=\"$PROJECT_DIR$/../wherelouisjeon\\exportToHTML\" />\n  </component>\n  <component name=\"FileTemplateManagerImpl\">\n    <option name=\"RECENT_TEMPLATES\">\n      <list>\n        <option value=\"Class\" />\n        <option value=\"Enum\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\n      <map>\n        <entry key=\"$PROJECT_DIR$\" value=\"yewon_refactoring\" />\n      </map>\n    </option>\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"GitHubPullRequestSearchHistory\">{\n  &quot;lastFilter&quot;: {\n    &quot;state&quot;: &quot;OPEN&quot;,\n    &quot;assignee&quot;: &quot;kimjaehoug&quot;\n  }\n}</component>\n  <component name=\"GithubPullRequestsUISettings\"><![CDATA[{\n  \"selectedUrlAndAccountId\": {\n    \"url\": \"https://github.com/kimjaehoug/wherelouisjeon.git\",\n    \"accountId\": \"a44d6209-844a-4745-82f7-f6385177c124\"\n  }\n}]]></component>\n  <component name=\"MarkdownSettingsMigration\">\n    <option name=\"stateVersion\" value=\"1\" />\n  </component>\n  <component name=\"ProblemsViewState\">\n    <option name=\"selectedTabId\" value=\"CurrentFile\" />\n  </component>\n  <component name=\"ProjectColorInfo\">{\n  &quot;associatedIndex&quot;: 5\n}</component>\n  <component name=\"ProjectId\" id=\"2l32qehEPZRF5c71kAtLRu0eskA\" />\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\">{\n  &quot;keyToString&quot;: {\n    &quot;Application.MainClient.executor&quot;: &quot;Run&quot;,\n    &quot;Application.MainV2.executor&quot;: &quot;Run&quot;,\n    &quot;Application.ShopWindow.executor&quot;: &quot;Run&quot;,\n    &quot;Application.Window (1).executor&quot;: &quot;Run&quot;,\n    &quot;Application.Window.executor&quot;: &quot;Run&quot;,\n    &quot;Application.Window2222.executor&quot;: &quot;Run&quot;,\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\n    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,\n    &quot;SONARLINT_PRECOMMIT_ANALYSIS&quot;: &quot;true&quot;,\n    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,\n    &quot;git-widget-placeholder&quot;: &quot;refectoring__finish&quot;,\n    &quot;kotlin-language-version-configured&quot;: &quot;true&quot;,\n    &quot;last_opened_file_path&quot;: &quot;/Users/jae/Downloads/shoottheduck&quot;,\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\n    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,\n    &quot;project.structure.last.edited&quot;: &quot;Modules&quot;,\n    &quot;project.structure.proportion&quot;: &quot;0.15&quot;,\n    &quot;project.structure.side.proportion&quot;: &quot;0.2&quot;,\n    &quot;run.code.analysis.last.selected.profile&quot;: &quot;pProject Default&quot;,\n    &quot;settings.editor.selected.configurable&quot;: &quot;preferences.pluginManager&quot;,\n    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;\n  }\n}</component>\n  <component name=\"RecentsManager\">\n    <key name=\"CopyFile.RECENT_KEYS\">\n      <recent name=\"D:\\70.Classes\\2024-2\\source_code_analysis\\shoottheduck\\src\\main\\resources\" />\n      <recent name=\"D:\\70.Classes\\2024-2\\source_code_analysis\\shoottheduck\\src\\main\\java\" />\n    </key>\n    <key name=\"MoveFile.RECENT_KEYS\">\n      <recent name=\"$PROJECT_DIR$/src/main/resources/images\" />\n      <recent name=\"$PROJECT_DIR$/src/main/resources/sounds\" />\n      <recent name=\"$PROJECT_DIR$/src/main\" />\n    </key>\n  </component>\n  <component name=\"RunManager\" selected=\"Application.Window2222\">\n    <configuration name=\"MainClient\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\n      <option name=\"MAIN_CLASS_NAME\" value=\"kr.jbnu.se.std.MainClient\" />\n      <module name=\"shoottheduck\" />\n      <extension name=\"coverage\">\n        <pattern>\n          <option name=\"PATTERN\" value=\"kr.jbnu.se.std.MultiPlayer.*\" />\n          <option name=\"ENABLED\" value=\"true\" />\n        </pattern>\n      </extension>\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"MainV2\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\n      <option name=\"MAIN_CLASS_NAME\" value=\"kr.jbnu.se.std.MainV2\" />\n      <module name=\"shoottheduck\" />\n      <extension name=\"coverage\">\n        <pattern>\n          <option name=\"PATTERN\" value=\"kr.jbnu.se.std.MultiPlayer.*\" />\n          <option name=\"ENABLED\" value=\"true\" />\n        </pattern>\n      </extension>\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"ShopWindow\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\n      <option name=\"MAIN_CLASS_NAME\" value=\"kr.jbnu.se.std.ShopWindow\" />\n      <module name=\"shoottheduck\" />\n      <extension name=\"coverage\">\n        <pattern>\n          <option name=\"PATTERN\" value=\"kr.jbnu.se.std.MultiPlayer.*\" />\n          <option name=\"ENABLED\" value=\"true\" />\n        </pattern>\n      </extension>\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"Window\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\n      <option name=\"MAIN_CLASS_NAME\" value=\"kr.jbnu.se.std.Window\" />\n      <module name=\"shoottheduck\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"Window2222\" type=\"Application\" factoryName=\"Application\" temporary=\"true\">\n      <option name=\"MAIN_CLASS_NAME\" value=\"kr.jbnu.se.std.Window\" />\n      <module name=\"shoottheduck\" />\n      <extension name=\"coverage\">\n        <pattern>\n          <option name=\"PATTERN\" value=\"kr.jbnu.se.std.MultiPlayer.*\" />\n          <option name=\"ENABLED\" value=\"true\" />\n        </pattern>\n      </extension>\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <list>\n      <item itemvalue=\"Application.Window\" />\n      <item itemvalue=\"Application.MainClient\" />\n      <item itemvalue=\"Application.MainV2\" />\n      <item itemvalue=\"Application.ShopWindow\" />\n      <item itemvalue=\"Application.Window2222\" />\n    </list>\n    <recent_temporary>\n      <list>\n        <item itemvalue=\"Application.Window2222\" />\n        <item itemvalue=\"Application.MainV2\" />\n        <item itemvalue=\"Application.ShopWindow\" />\n        <item itemvalue=\"Application.MainClient\" />\n        <item itemvalue=\"Application.Window\" />\n      </list>\n    </recent_temporary>\n  </component>\n  <component name=\"SharedIndexes\">\n    <attachedChunks>\n      <set>\n        <option value=\"bundled-jdk-9823dce3aa75-b114ca120d71-intellij.indexing.shared.core-IU-242.21829.142\" />\n        <option value=\"bundled-js-predefined-d6986cc7102b-7c0b70fcd90d-JavaScript-IU-242.21829.142\" />\n      </set>\n    </attachedChunks>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"e255d515-7351-4cf8-8843-af8a77729b48\" name=\"Changes\" comment=\"\" />\n      <created>1724394633914</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1724394633914</updated>\n      <workItem from=\"1724394635024\" duration=\"2830000\" />\n      <workItem from=\"1724829453673\" duration=\"684000\" />\n      <workItem from=\"1725429507492\" duration=\"630000\" />\n      <workItem from=\"1726030595579\" duration=\"691000\" />\n      <workItem from=\"1726879738970\" duration=\"1652000\" />\n      <workItem from=\"1727238748652\" duration=\"1262000\" />\n      <workItem from=\"1727689816044\" duration=\"15230000\" />\n      <workItem from=\"1727776036881\" duration=\"31242000\" />\n      <workItem from=\"1727875707906\" duration=\"28902000\" />\n      <workItem from=\"1728066880239\" duration=\"8135000\" />\n      <workItem from=\"1728357407136\" duration=\"20461000\" />\n      <workItem from=\"1728822405134\" duration=\"5605000\" />\n      <workItem from=\"1728889652442\" duration=\"37652000\" />\n      <workItem from=\"1729054707457\" duration=\"10617000\" />\n      <workItem from=\"1729069599398\" duration=\"4970000\" />\n      <workItem from=\"1729323809352\" duration=\"3878000\" />\n      <workItem from=\"1729486864439\" duration=\"15419000\" />\n      <workItem from=\"1729519832621\" duration=\"526000\" />\n      <workItem from=\"1731474816525\" duration=\"1359000\" />\n      <workItem from=\"1731476225922\" duration=\"1817000\" />\n      <workItem from=\"1731478347995\" duration=\"1870000\" />\n      <workItem from=\"1732531684718\" duration=\"1310000\" />\n      <workItem from=\"1732629050382\" duration=\"8278000\" />\n      <workItem from=\"1732686034806\" duration=\"80000\" />\n      <workItem from=\"1732691298330\" duration=\"12058000\" />\n      <workItem from=\"1732882666038\" duration=\"5975000\" />\n      <workItem from=\"1733055782595\" duration=\"11388000\" />\n    </task>\n    <task id=\"LOCAL-00001\" summary=\"loginfunction\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1727763605144</created>\n      <option name=\"number\" value=\"00001\" />\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1727763605144</updated>\n    </task>\n    <task id=\"LOCAL-00002\" summary=\"loginfunction\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1727771161342</created>\n      <option name=\"number\" value=\"00002\" />\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1727771161342</updated>\n    </task>\n    <task id=\"LOCAL-00003\" summary=\"loginfunction\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1727781698478</created>\n      <option name=\"number\" value=\"00003\" />\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1727781698479</updated>\n    </task>\n    <task id=\"LOCAL-00004\" summary=\"loginfunction\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1727855380738</created>\n      <option name=\"number\" value=\"00004\" />\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1727855380738</updated>\n    </task>\n    <task id=\"LOCAL-00005\" summary=\"loginfunction\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1727860170579</created>\n      <option name=\"number\" value=\"00005\" />\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1727860170580</updated>\n    </task>\n    <task id=\"LOCAL-00006\" summary=\"131313\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1727863174521</created>\n      <option name=\"number\" value=\"00006\" />\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1727863174521</updated>\n    </task>\n    <task id=\"LOCAL-00007\" summary=\"131313\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1727865267663</created>\n      <option name=\"number\" value=\"00007\" />\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1727865267663</updated>\n    </task>\n    <task id=\"LOCAL-00008\" summary=\"131313\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1727871541617</created>\n      <option name=\"number\" value=\"00008\" />\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1727871541617</updated>\n    </task>\n    <task id=\"LOCAL-00009\" summary=\"131313\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1727872888568</created>\n      <option name=\"number\" value=\"00009\" />\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1727872888568</updated>\n    </task>\n    <task id=\"LOCAL-00010\" summary=\"131313\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1727872986113</created>\n      <option name=\"number\" value=\"00010\" />\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1727872986113</updated>\n    </task>\n    <task id=\"LOCAL-00011\" summary=\"131313\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1728031206772</created>\n      <option name=\"number\" value=\"00011\" />\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1728031206772</updated>\n    </task>\n    <task id=\"LOCAL-00012\" summary=\"131313\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1728031507710</created>\n      <option name=\"number\" value=\"00012\" />\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1728031507710</updated>\n    </task>\n    <task id=\"LOCAL-00013\" summary=\"131313\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1728277037261</created>\n      <option name=\"number\" value=\"00013\" />\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1728277037262</updated>\n    </task>\n    <task id=\"LOCAL-00014\" summary=\"131313\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1728277216143</created>\n      <option name=\"number\" value=\"00014\" />\n      <option name=\"presentableId\" value=\"LOCAL-00014\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1728277216143</updated>\n    </task>\n    <task id=\"LOCAL-00015\" summary=\"131313\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1728277380099</created>\n      <option name=\"number\" value=\"00015\" />\n      <option name=\"presentableId\" value=\"LOCAL-00015\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1728277380099</updated>\n    </task>\n    <task id=\"LOCAL-00016\" summary=\"131313\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1728279465226</created>\n      <option name=\"number\" value=\"00016\" />\n      <option name=\"presentableId\" value=\"LOCAL-00016\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1728279465226</updated>\n    </task>\n    <task id=\"LOCAL-00017\" summary=\"131313\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1728363801963</created>\n      <option name=\"number\" value=\"00017\" />\n      <option name=\"presentableId\" value=\"LOCAL-00017\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1728363801963</updated>\n    </task>\n    <task id=\"LOCAL-00018\" summary=\"131313\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1728462444356</created>\n      <option name=\"number\" value=\"00018\" />\n      <option name=\"presentableId\" value=\"LOCAL-00018\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1728462444356</updated>\n    </task>\n    <task id=\"LOCAL-00019\" summary=\"131313\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1728800544817</created>\n      <option name=\"number\" value=\"00019\" />\n      <option name=\"presentableId\" value=\"LOCAL-00019\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1728800544817</updated>\n    </task>\n    <task id=\"LOCAL-00020\" summary=\"131313\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1728915363555</created>\n      <option name=\"number\" value=\"00020\" />\n      <option name=\"presentableId\" value=\"LOCAL-00020\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1728915363555</updated>\n    </task>\n    <task id=\"LOCAL-00021\" summary=\"131313\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1728915375265</created>\n      <option name=\"number\" value=\"00021\" />\n      <option name=\"presentableId\" value=\"LOCAL-00021\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1728915375265</updated>\n    </task>\n    <task id=\"LOCAL-00022\" summary=\"131313\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1728999106644</created>\n      <option name=\"number\" value=\"00022\" />\n      <option name=\"presentableId\" value=\"LOCAL-00022\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1728999106644</updated>\n    </task>\n    <task id=\"LOCAL-00023\" summary=\"131313\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1729055917408</created>\n      <option name=\"number\" value=\"00023\" />\n      <option name=\"presentableId\" value=\"LOCAL-00023\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1729055917408</updated>\n    </task>\n    <task id=\"LOCAL-00024\" summary=\"131313\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1729324804828</created>\n      <option name=\"number\" value=\"00024\" />\n      <option name=\"presentableId\" value=\"LOCAL-00024\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1729324804828</updated>\n    </task>\n    <task id=\"LOCAL-00025\" summary=\"131313\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1729349172153</created>\n      <option name=\"number\" value=\"00025\" />\n      <option name=\"presentableId\" value=\"LOCAL-00025\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1729349172153</updated>\n    </task>\n    <task id=\"LOCAL-00026\" summary=\"131313\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1729356413737</created>\n      <option name=\"number\" value=\"00026\" />\n      <option name=\"presentableId\" value=\"LOCAL-00026\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1729356413737</updated>\n    </task>\n    <task id=\"LOCAL-00027\" summary=\"131313\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1729489907877</created>\n      <option name=\"number\" value=\"00027\" />\n      <option name=\"presentableId\" value=\"LOCAL-00027\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1729489907877</updated>\n    </task>\n    <task id=\"LOCAL-00028\" summary=\"131313\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1729494523229</created>\n      <option name=\"number\" value=\"00028\" />\n      <option name=\"presentableId\" value=\"LOCAL-00028\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1729494523229</updated>\n    </task>\n    <task id=\"LOCAL-00029\" summary=\"131313\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1729510802698</created>\n      <option name=\"number\" value=\"00029\" />\n      <option name=\"presentableId\" value=\"LOCAL-00029\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1729510802698</updated>\n    </task>\n    <task id=\"LOCAL-00030\" summary=\"131313\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1729510839902</created>\n      <option name=\"number\" value=\"00030\" />\n      <option name=\"presentableId\" value=\"LOCAL-00030\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1729510839902</updated>\n    </task>\n    <task id=\"LOCAL-00031\" summary=\"131313\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1729511250510</created>\n      <option name=\"number\" value=\"00031\" />\n      <option name=\"presentableId\" value=\"LOCAL-00031\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1729511250510</updated>\n    </task>\n    <task id=\"LOCAL-00032\" summary=\"문자열 리터럴 반복 사용되어 상수로 정의 후 해당 상수를 참조할 수 있도록 함.&#10;메소드 이름 대문자로 시작&#10;rankWindow 지역변수 사용되지 않아 코드 삭제\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1732637025499</created>\n      <option name=\"number\" value=\"00032\" />\n      <option name=\"presentableId\" value=\"LOCAL-00032\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1732637025500</updated>\n    </task>\n    <task id=\"LOCAL-00033\" summary=\"문자열 리터럴 반복 사용되어 상수로 정의 후 해당 상수를 참조할 수 있도록 함.&#10;메소드 이름 대문자로 시작&#10;rankWindow 지역변수 사용되지 않아 코드 삭제\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1732637037262</created>\n      <option name=\"number\" value=\"00033\" />\n      <option name=\"presentableId\" value=\"LOCAL-00033\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1732637037262</updated>\n    </task>\n    <task id=\"LOCAL-00034\" summary=\"문자열 리터럴 반복 사용되어 상수로 정의 후 해당 상수를 참조할 수 있도록 함.&#10;메소드 이름 대문자로 시작&#10;rankWindow 지역변수 사용되지 않아 코드 삭제\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1732691325494</created>\n      <option name=\"number\" value=\"00034\" />\n      <option name=\"presentableId\" value=\"LOCAL-00034\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1732691325494</updated>\n    </task>\n    <task id=\"LOCAL-00035\" summary=\"transient 키워드 넣음 (FriendManager, Clip)\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1732770436995</created>\n      <option name=\"number\" value=\"00035\" />\n      <option name=\"presentableId\" value=\"LOCAL-00035\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1732770436995</updated>\n    </task>\n    <task id=\"LOCAL-00036\" summary=\"transient 키워드 넣음 (FriendManager, Clip)&#10;&#10;김성광오빠가 boss12345를 enum으로 관리해줌. BossConfig\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1732865895207</created>\n      <option name=\"number\" value=\"00036\" />\n      <option name=\"presentableId\" value=\"LOCAL-00036\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1732865895207</updated>\n    </task>\n    <task id=\"LOCAL-00037\" summary=\"transient 키워드 무시\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1732884339251</created>\n      <option name=\"number\" value=\"00037\" />\n      <option name=\"presentableId\" value=\"LOCAL-00037\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1732884339251</updated>\n    </task>\n    <task id=\"LOCAL-00038\" summary=\"상수 대문자로 바꿈&#10;enum 앞에 static 선언 뺌\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1732891986575</created>\n      <option name=\"number\" value=\"00038\" />\n      <option name=\"presentableId\" value=\"LOCAL-00038\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1732891986575</updated>\n    </task>\n    <task id=\"LOCAL-00039\" summary=\"switch문에 default문로 디버깅 코드 넣음.&#10;데이터가져오기실패.. 문자열 상수화해버림\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1732892791784</created>\n      <option name=\"number\" value=\"00039\" />\n      <option name=\"presentableId\" value=\"LOCAL-00039\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1732892791784</updated>\n    </task>\n    <task id=\"LOCAL-00040\" summary=\"import java.awt.event.ActionEvent;&#10;import java.awt.event.ActionListener;&#10;//unused라 지움//\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1732892918469</created>\n      <option name=\"number\" value=\"00040\" />\n      <option name=\"presentableId\" value=\"LOCAL-00040\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1732892918469</updated>\n    </task>\n    <task id=\"LOCAL-00041\" summary=\"import java.awt.event.ActionEvent;&#10;import java.awt.event.ActionListener;&#10;//unused라 지움//\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1732894046070</created>\n      <option name=\"number\" value=\"00041\" />\n      <option name=\"presentableId\" value=\"LOCAL-00041\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1732894046070</updated>\n    </task>\n    <task id=\"LOCAL-00042\" summary=\"131313\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1732950182777</created>\n      <option name=\"number\" value=\"00042\" />\n      <option name=\"presentableId\" value=\"LOCAL-00042\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1732950182777</updated>\n    </task>\n    <task id=\"LOCAL-00043\" summary=\"131313\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1732953769748</created>\n      <option name=\"number\" value=\"00043\" />\n      <option name=\"presentableId\" value=\"LOCAL-00043\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1732953769748</updated>\n    </task>\n    <task id=\"LOCAL-00044\" summary=\"metrix\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1732955318446</created>\n      <option name=\"number\" value=\"00044\" />\n      <option name=\"presentableId\" value=\"LOCAL-00044\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1732955318446</updated>\n    </task>\n    <task id=\"LOCAL-00045\" summary=\"metrix\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1732955357565</created>\n      <option name=\"number\" value=\"00045\" />\n      <option name=\"presentableId\" value=\"LOCAL-00045\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1732955357566</updated>\n    </task>\n    <option name=\"localTasksCounter\" value=\"46\" />\n    <servers />\n  </component>\n  <component name=\"TypeScriptGeneratedFilesManager\">\n    <option name=\"version\" value=\"3\" />\n  </component>\n  <component name=\"Vcs.Log.Tabs.Properties\">\n    <option name=\"TAB_STATES\">\n      <map>\n        <entry key=\"MAIN\">\n          <value>\n            <State>\n              <option name=\"FILTERS\">\n                <map>\n                  <entry key=\"branch\">\n                    <value>\n                      <list>\n                        <option value=\"origin/backup_gu\" />\n                      </list>\n                    </value>\n                  </entry>\n                </map>\n              </option>\n            </State>\n          </value>\n        </entry>\n      </map>\n    </option>\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <MESSAGE value=\"loginfunction\" />\n    <MESSAGE value=\"yw\" />\n    <MESSAGE value=\"문자열 리터럴 반복 사용되어 상수로 정의 후 해당 상수를 참조할 수 있도록 함.&#10;메소드 이름 대문자로 시작&#10;rankWindow 지역변수 사용되지 않아 코드 삭제\" />\n    <MESSAGE value=\"transient 키워드 넣음 (FriendManager, Clip)\" />\n    <MESSAGE value=\"transient 키워드 넣음 (FriendManager, Clip)&#10;&#10;김성광오빠가 boss12345를 enum으로 관리해줌. BossConfig\" />\n    <MESSAGE value=\"transient 키워드 무시\" />\n    <MESSAGE value=\"상수 대문자로 바꿈&#10;enum 앞에 static 선언 뺌\" />\n    <MESSAGE value=\"switch문에 default문로 디버깅 코드 넣음.&#10;데이터가져오기실패.. 문자열 상수화해버림\" />\n    <MESSAGE value=\"import java.awt.event.ActionEvent;&#10;import java.awt.event.ActionListener;&#10;//unused라 지움//\" />\n    <MESSAGE value=\"131313\" />\n    <MESSAGE value=\"metrix\" />\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"metrix\" />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision e345472118693a8590edc2ef168582159a17586a)
+++ b/.idea/workspace.xml	(date 1733144930122)
@@ -8,46 +8,16 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="e255d515-7351-4cf8-8843-af8a77729b48" name="Changes" comment="metrix">
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/24__11__20___7_28_________Changes_.xml" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/24__11__27___3_36_________Changes_.xml" beforeDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/kr/jbnu/se/std/AddFriends.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/kr/jbnu/se/std/AddFriends.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/main/java/kr/jbnu/se/std/Framework.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/kr/jbnu/se/std/Framework.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/main/java/kr/jbnu/se/std/Game.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/kr/jbnu/se/std/Game.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/AddFriends$1.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/AddFriends$1.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/AddFriends.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/AddFriends.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/BossConfig.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/BossConfig.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Buttonbuy.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Buttonbuy.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/ChatwithFriends.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/ChatwithFriends.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Duck.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Duck.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/FirebaseClient.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/FirebaseClient.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Framework.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Framework.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/FriendManager.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/FriendManager.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Game$GameState.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Game$GameState.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/kr/jbnu/se/std/InventoryManager.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/kr/jbnu/se/std/InventoryManager.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/kr/jbnu/se/std/MessageReceiver.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/kr/jbnu/se/std/MessageReceiver.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Game.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Game.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/GiftBox.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/GiftBox.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Hunter1.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Hunter1.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/InventoryManager$1.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/InventoryManager$1.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/InventoryManager$2.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/InventoryManager$2.class" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/InventoryManager$3.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/InventoryManager$3.class" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/InventoryManager.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/InventoryManager.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/InventoryWindow.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/InventoryWindow.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/InviteFriends.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/InviteFriends.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/LoginClient$12.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/LoginClient$12.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/LoginClient$13.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/LoginClient$13.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/LoginClient$ImagePanel.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/LoginClient$ImagePanel.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/LoginClient.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/LoginClient.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/MainClient.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/MainClient.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/MessageManager.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/MessageManager.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/MessageReceiver$1.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/MessageReceiver$1.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/MessageReceiver$2.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/MessageReceiver$2.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/MessageReceiver$3.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/MessageReceiver$3.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/MessageReceiver$4.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/MessageReceiver$4.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/MessageReceiver.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/MessageReceiver.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/RankWindow.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/RankWindow.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/ShopWindow$BackgroundPanel.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/ShopWindow$BackgroundPanel.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/ShopWindow$OuterPanel.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/ShopWindow$OuterPanel.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/ShopWindow.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/ShopWindow.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/WindowManager.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/WindowManager.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/boss1.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/boss1.class" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -79,12 +49,12 @@
     &quot;assignee&quot;: &quot;kimjaehoug&quot;
   }
 }</component>
-  <component name="GithubPullRequestsUISettings"><![CDATA[{
-  "selectedUrlAndAccountId": {
-    "url": "https://github.com/kimjaehoug/wherelouisjeon.git",
-    "accountId": "a44d6209-844a-4745-82f7-f6385177c124"
-  }
-}]]></component>
+  <component name="GithubPullRequestsUISettings">{
+  &quot;selectedUrlAndAccountId&quot;: {
+    &quot;url&quot;: &quot;https://github.com/kimjaehoug/wherelouisjeon.git&quot;,
+    &quot;accountId&quot;: &quot;a44d6209-844a-4745-82f7-f6385177c124&quot;
+  }
+}</component>
   <component name="MarkdownSettingsMigration">
     <option name="stateVersion" value="1" />
   </component>
@@ -260,6 +230,7 @@
       <workItem from="1732691298330" duration="12058000" />
       <workItem from="1732882666038" duration="5975000" />
       <workItem from="1733055782595" duration="11388000" />
+      <workItem from="1733115859346" duration="9195000" />
     </task>
     <task id="LOCAL-00001" summary="loginfunction">
       <option name="closed" value="true" />
@@ -621,7 +592,15 @@
       <option name="project" value="LOCAL" />
       <updated>1732955357566</updated>
     </task>
-    <option name="localTasksCounter" value="46" />
+    <task id="LOCAL-00046" summary="metrix">
+      <option name="closed" value="true" />
+      <created>1733115951632</created>
+      <option name="number" value="00046" />
+      <option name="presentableId" value="LOCAL-00046" />
+      <option name="project" value="LOCAL" />
+      <updated>1733115951632</updated>
+    </task>
+    <option name="localTasksCounter" value="47" />
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
