Index: src/main/java/kr/jbnu/se/std/Framework.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package kr.jbnu.se.std;\r\n\r\nimport com.google.auth.oauth2.GoogleCredentials;\r\nimport com.google.common.util.concurrent.MoreExecutors;\r\nimport com.google.firebase.FirebaseApp;\r\nimport com.google.firebase.FirebaseOptions;\r\nimport com.google.firebase.auth.FirebaseAuth;\r\nimport com.google.firebase.auth.FirebaseAuthException;\r\nimport com.google.firebase.auth.UserRecord;\r\nimport com.google.firebase.database.*;\r\nimport com.google.firebase.database.core.AuthTokenProvider;\r\nimport com.google.gson.JsonObject;\r\nimport jdk.jfr.internal.tool.Main;\r\nimport okhttp3.*;\r\nimport org.json.JSONArray;\r\nimport org.json.JSONException;\r\nimport org.json.JSONObject;\r\n\r\nimport java.awt.*;\r\nimport java.awt.event.ActionEvent;\r\nimport java.awt.event.ActionListener;\r\nimport java.awt.event.KeyEvent;\r\nimport java.awt.event.MouseEvent;\r\nimport java.awt.image.BufferedImage;\r\nimport java.io.File;\r\nimport java.io.FileInputStream;\r\nimport java.io.IOException;\r\nimport java.net.URL;\r\nimport java.util.HashSet;\r\nimport java.util.Iterator;\r\nimport java.util.Set;\r\nimport java.util.concurrent.Executors;\r\nimport java.util.concurrent.ScheduledExecutorService;\r\nimport java.util.concurrent.TimeUnit;\r\nimport java.util.logging.Level;\r\nimport java.util.logging.Logger;\r\nimport javax.imageio.ImageIO;\r\nimport javax.sound.sampled.*;\r\nimport javax.swing.*;\r\nimport com.google.firebase.database.FirebaseDatabase;\r\n\r\n/**\r\n * kr.jbnu.se.std.Framework that controls the game (kr.jbnu.se.std.Game.java) that created it, update it and draw it on the screen.\r\n *\r\n * @author www.gametutorial.net\r\n */\r\n\r\npublic class Framework extends Canvas {\r\n\r\n    private boolean isLoginSuccessful = false; // 로그인 성공 여부를 관리\r\n    private LoginClient loginClient;\r\n    /**\r\n     * Width of the frame.\r\n     */\r\n    public static int frameWidth;\r\n    /**\r\n     * Height of the frame.\r\n     */\r\n    public static int frameHeight;\r\n\r\n    /**\r\n     * Time of one second in nanoseconds.\r\n     * 1 second = 1 000 000 000 nanoseconds\r\n     */\r\n    public static final long secInNanosec = 1000000000L;\r\n\r\n    /**\r\n     * Time of one millisecond in nanoseconds.\r\n     * 1 millisecond = 1 000 000 nanoseconds\r\n     */\r\n    public static final long milisecInNanosec = 1000000L;\r\n\r\n    /**\r\n     * FPS - Frames per second\r\n     * How many times per second the game should update?\r\n     */\r\n    private final int GAME_FPS = 60;\r\n    /**\r\n     * Pause between updates. It is in nanoseconds.\r\n     */\r\n    private final long GAME_UPDATE_PERIOD = secInNanosec / GAME_FPS;\r\n\r\n    /**\r\n     * Possible states of the game\r\n     */\r\n    public static enum GameState{STARTING, VISUALIZING, GAME_CONTENT_LOADING,LOGIN,MAIN_MENU, OPTIONS, PLAYING, GAMEOVER,MAINPAGE, ROUND, PAUSE, ENDING, DESTROYED}\r\n    /**\r\n     * Current state of the game\r\n     */\r\n    public static GameState gameState;\r\n    public synchronized static void setGameState(GameState state) {\r\n        gameState = state;\r\n    }\r\n\r\n    public synchronized static GameState getGameState() {\r\n        return gameState;\r\n    }\r\n\r\n    /**\r\n     * Elapsed game time in nanoseconds.\r\n     */\r\n\r\n    private final ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);\r\n    private final ScheduledExecutorService scheduler1 = Executors.newScheduledThreadPool(1);\r\n    private final ScheduledExecutorService scheduler2 = Executors.newScheduledThreadPool(1);\r\n    private final ScheduledExecutorService scheduler3 = Executors.newScheduledThreadPool(1);\r\n    private final Set<String> existingFriends = new HashSet<>(); // 중복 방지를 위한 Set\r\n    private final Set<String> existingFriendsinvite = new HashSet<>(); // 중복 방지를 위한 Set\r\n\r\n    private long gameTime;\r\n    // It is used for calculating elapsed time.\r\n    private long lastTime;\r\n\r\n    // The actual game\r\n    private Game game;\r\n    private Thread gameThread;\r\n    private Window window;\r\n    private String userid;\r\n    private static final String DATABASE_URL = \"https://shootthedock-default-rtdb.firebaseio.com\";\r\n    private OkHttpClient client;\r\n    private String email;\r\n    private String nickname;\r\n    private String idToken;\r\n    private String password;\r\n    private String realemail;\r\n    private FirebaseAuth auth;\r\n    private DatabaseReference databaseReference;\r\n    private MainClient MainV2;\r\n    private AddFriends addFriends;\r\n    private DatabaseReference chatRef;\r\n    private final Set<String> receivedMessageKeys = new HashSet<>();\r\n    private final Set<String> receivedMessageKeysF = new HashSet<>(); // 이미 받은 메시지의 키를 저장할 Set\r\n    private ChatwithFriends chatwithFriends;\r\n    private String selectnickname;\r\n    private int money;\r\n    private InviteFriends inviteFriends;\r\n    private ShopWindow shopWindow;\r\n    private InventoryWindow inventoryWindow;\r\n    private RankWindow rankWindow;\r\n    private String inventoryimage;\r\n    private String whatgun;\r\n    public FirebaseClient firebaseClient;\r\n    public FriendManager friendManager;\r\n    private Clip clip;\r\n\r\n    private static Framework instance;\r\n\r\n    public MessageManager messageManager;\r\n\r\n    public MessageReceiver messageReceiver;\r\n\r\n    public MessageReceiver friendmessageReceiver;\r\n\r\n    public InventoryManager inventoryManager;\r\n    private FirebaseManager firebaseManager;\r\n    private AudioManager audioManager;\r\n    private WindowManager windowManager;\r\n\r\n    /**\r\n     * Image for menu.\r\n     */\r\n    private BufferedImage shootTheDuckMenuImg;\r\n\r\n\r\n    public Framework (Window window)\r\n    {\r\n        super();\r\n        //initializeFirebase();\r\n        firebaseManager = new FirebaseManager(\"src/main/shootthedock-firebase-adminsdk-304qc-09167d3967.json\",DATABASE_URL);\r\n        this.window = window;\r\n        windowManager = new WindowManager(this);\r\n        audioManager = new AudioManager();\r\n        gameState = GameState.LOGIN;\r\n        client = new OkHttpClient();\r\n        whatgun = \"기본권총\";\r\n        databaseReference = FirebaseDatabase.getInstance().getReference();\r\n        firebaseClient = new FirebaseClient(email);\r\n    }\r\n    public void Invitewindow(){\r\n            inviteFriends = new InviteFriends(this);\r\n            startRecevingFriendInvite();\r\n            if(inviteFriends == null){\r\n                stopReceivingFriendInvite();\r\n            }\r\n    }\r\n\r\n    public void inventoryWindow(){\r\n        inventoryWindow = new InventoryWindow(this);\r\n        inventoryManager= new InventoryManager(email,idToken,inventoryWindow,money);\r\n        inventoryManager.startReceivingInventory();\r\n        if(inventoryWindow == null){\r\n            inventoryManager.stopReceivingInventory();\r\n        }\r\n    }\r\n    public void stopfriendadd(){\r\n        addFriends = null;\r\n    }\r\n\r\n    public void stopfriends(){\r\n        inviteFriends = null;\r\n    }\r\n    public void stoploginClinet(){\r\n        loginClient = null;\r\n    }\r\n\r\n    public void stopshop(){\r\n        shopWindow = null;\r\n    }\r\n\r\n    public void stoprank() { rankWindow = null; }\r\n\r\n    public void stopmain(){\r\n        MainV2 = null;\r\n    }\r\n\r\n    public void RankWindow(){\r\n        RankWindow rankWindow = new RankWindow();\r\n        rankWindow.setVisible(true);\r\n    }\r\n\r\n    public void Shopwindowopen(){\r\n        shopWindow = new ShopWindow(this);\r\n        inventoryManager= new InventoryManager(email,idToken,shopWindow,money);\r\n\r\n    }\r\n    public void ChatFriendswindow(String nickname){\r\n        chatwithFriends = new ChatwithFriends(this);\r\n        chatwithFriends.setFriends(nickname);\r\n        selectnickname = chatwithFriends.getFriends();\r\n        friendmessageReceiver = new MessageReceiver(idToken,chatwithFriends,this.nickname,selectnickname);\r\n        friendmessageReceiver.startReceivingFriendMessages();\r\n\r\n        if(chatwithFriends == null){\r\n            friendmessageReceiver.stopReceivingFriendMessages();\r\n        }\r\n    }\r\n\r\n\r\n    private void playBackgroundMusic(String filePath) {\r\n        try {\r\n            AudioInputStream audioStream = AudioSystem.getAudioInputStream(new File(filePath));\r\n            clip = AudioSystem.getClip();\r\n            clip.open(audioStream);\r\n            clip.loop(Clip.LOOP_CONTINUOUSLY); // 무한 반복\r\n        } catch (UnsupportedAudioFileException | IOException | LineUnavailableException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public void playActiveSound(String filePath){\r\n        try{\r\n            AudioInputStream audioStream = AudioSystem.getAudioInputStream(new File(filePath));\r\n            clip = AudioSystem.getClip();\r\n            clip.open(audioStream);\r\n            clip.start();\r\n        }catch(UnsupportedAudioFileException | IOException | LineUnavailableException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public void stopBackgroundMusic() {\r\n        if (clip != null && clip.isRunning()) {\r\n            clip.stop();\r\n        }\r\n    }\r\n\r\n\r\n\r\n    public void frendsAddwindows(){\r\n        addFriends = new AddFriends(this);\r\n    }\r\n\r\n\r\n    public void stopReceivingFriendschat() {\r\n        scheduler1.shutdownNow();\r\n    }\r\n\r\n    public void startRecevingFriendInvite(){\r\n        scheduler2.scheduleAtFixedRate(this::receiveFriendsInvite, 0, 1, TimeUnit.SECONDS);\r\n    }\r\n\r\n    public void stopReceivingFriendInvite() {\r\n        scheduler2.shutdownNow();\r\n    }\r\n    public void receiveFriendsInvite() {\r\n        OkHttpClient client = new OkHttpClient();\r\n        String url = \"https://shootthedock-default-rtdb.firebaseio.com/friend/\" + nickname + \"/userinfo/friendswant.json?auth=\" + idToken;\r\n        Request request = new Request.Builder()\r\n                .url(url)\r\n                .get()\r\n                .build();\r\n        client.newCall(request).enqueue(new Callback() {\r\n            @Override\r\n            public void onFailure(Call call, IOException e) {\r\n                SwingUtilities.invokeLater(() -> {\r\n                    System.err.println(\"친구 목록 가져오기 실패: \" + e.getMessage());\r\n                });\r\n            }\r\n            @Override\r\n            public void onResponse(Call call, Response response) throws IOException {\r\n                if (response.isSuccessful()) {\r\n                    String responseBody = response.body().string();\r\n                    try {\r\n                        JSONObject jsonObject = new JSONObject(responseBody);\r\n                        // JSON 객체가 비어있는지 확인\r\n                        if (jsonObject.length() == 0) {\r\n                            SwingUtilities.invokeLater(() -> {\r\n                                System.out.println(\"친구 신청이 없습니다.\");\r\n                            });\r\n                            return;\r\n                        }\r\n                        // 친구 신청 목록 출력\r\n                        for (String key : jsonObject.keySet()) {\r\n                            JSONObject inviteObject = jsonObject.getJSONObject(key); // 친구 신청 객체\r\n                            String friendNickname = inviteObject.getString(\"nickname\"); // 친구의 닉네임\r\n                            // 중복된 친구 신청이 아닌 경우에만 추가\r\n                            if (!existingFriendsinvite.contains(friendNickname)) {\r\n                                existingFriendsinvite.add(friendNickname); // 새로운 친구 신청 추가\r\n                                SwingUtilities.invokeLater(() -> {\r\n                                    inviteFriends.setFriends(friendNickname + \"\\n\"); // 친구 목록에 추가\r\n                                });\r\n                            }\r\n                        }\r\n                    } catch (JSONException e) {\r\n                        e.printStackTrace();\r\n                        SwingUtilities.invokeLater(() -> {\r\n                            System.err.println(\"친구 신청 목록 처리 중 오류 발생: \" + e.getMessage());\r\n                            stopReceivingFriendInvite();\r\n                        });\r\n                    }\r\n                } else {\r\n                    SwingUtilities.invokeLater(() -> {\r\n                        System.err.println(\"친구 목록 가져오기 실패: \" + response.message());\r\n                    });\r\n                }\r\n            }\r\n        });\r\n    }\r\n    public void deleteFriendInvite(String nicknameToDelete) {\r\n        OkHttpClient client = new OkHttpClient();\r\n        // \"nickname\" 키를 사용하여 friendswant 밑의 데이터를 삭제하는 URL\r\n        String url = \"https://shootthedock-default-rtdb.firebaseio.com/friend/\" + nickname + \"/userinfo/friendswant/\" + nicknameToDelete + \"/nickname.json?auth=\" + idToken;\r\n\r\n        Request request = new Request.Builder()\r\n                .url(url)\r\n                .delete()\r\n                .build();\r\n\r\n        client.newCall(request).enqueue(new Callback() {\r\n            @Override\r\n            public void onFailure(Call call, IOException e) {\r\n                SwingUtilities.invokeLater(() -> {\r\n                    System.err.println(\"친구 삭제 실패: \" + e.getMessage());\r\n                });\r\n            }\r\n\r\n            @Override\r\n            public void onResponse(Call call, Response response) throws IOException {\r\n                if (response.isSuccessful()) {\r\n                    SwingUtilities.invokeLater(() -> {\r\n                        System.out.println(\"친구 삭제 성공: \" + nicknameToDelete);\r\n                        // 여기서 UI 업데이트 등 추가 작업 가능\r\n                    });\r\n                } else {\r\n                    SwingUtilities.invokeLater(() -> {\r\n                        System.err.println(\"친구 삭제 실패: \" + response.message());\r\n                    });\r\n                }\r\n            }\r\n        });\r\n    }\r\n    public void setGun(String gun){\r\n        whatgun = gun;\r\n    }\r\n    public String getGun(){\r\n        return whatgun;\r\n    }\r\n    private void initializeFirebase() {\r\n        try {\r\n            FileInputStream serviceAccount = new FileInputStream(\"src/main/shootthedock-firebase-adminsdk-304qc-09167d3967.json\");\r\n\r\n            FirebaseOptions options = new FirebaseOptions.Builder()\r\n                    .setCredentials(GoogleCredentials.fromStream(serviceAccount))\r\n                    .setDatabaseUrl(\"https://shootthedock-default-rtdb.firebaseio.com\")\r\n                    .build();\r\n\r\n            FirebaseApp.initializeApp(options);\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n            JOptionPane.showMessageDialog(this, \"Firebase 초기화 실패: \" + e.getMessage());\r\n        }\r\n    }\r\n    private void loginWithFirebase(String email, String password) {\r\n        OkHttpClient client = new OkHttpClient();\r\n        JSONObject json = new JSONObject();\r\n        json.put(\"email\", email);\r\n        json.put(\"password\", password);\r\n        json.put(\"returnSecureToken\", true);\r\n        RequestBody body = RequestBody.create(MediaType.parse(\"application/json; charset=utf-8\"), json.toString());\r\n        Request request = new Request.Builder()\r\n                .url(\"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyCJDgbBXWSRoRUg3xVqsQrSEz1W5AFiE_Y\")\r\n                .post(body)\r\n                .build();\r\n\r\n        client.newCall(request).enqueue(new Callback() {\r\n            @Override\r\n            public void onFailure(Call call, IOException e) {\r\n                SwingUtilities.invokeLater(() -> JOptionPane.showMessageDialog(null, \"로그인 실패: \" + e.getMessage()));\r\n            }\r\n\r\n            @Override\r\n            public void onResponse(Call call, Response response) throws IOException {\r\n                if (response.isSuccessful()) {\r\n                    SwingUtilities.invokeLater(() -> {\r\n                        String responseBody;\r\n                        try {\r\n                            responseBody = response.body().string();\r\n                            JSONObject jsonResponse = new JSONObject(responseBody);\r\n                            // ID 토큰 가져오기\r\n                            idToken = jsonResponse.getString(\"idToken\");\r\n                            System.out.println(\"ID 토큰: \" + idToken);\r\n                            // 사용자의 닉네임을 가져옵니다.\r\n                            getNickname(idToken);\r\n                            getMoney();\r\n                        } catch (IOException e) {\r\n                            throw new RuntimeException(e);\r\n                        }\r\n                    });\r\n                } else {\r\n                    SwingUtilities.invokeLater(() -> JOptionPane.showMessageDialog(null, \"로그인 실패: 잘못된 자격 증명\"));\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    public void getMoney() {\r\n        OkHttpClient client = new OkHttpClient();\r\n        String url = \"https://shootthedock-default-rtdb.firebaseio.com/users/\" + email + \"/userinfo.json?auth=\" + idToken;\r\n\r\n        Request request = new Request.Builder()\r\n                .url(url)\r\n                .get()\r\n                .build();\r\n\r\n        client.newCall(request).enqueue(new Callback() {\r\n            @Override\r\n            public void onFailure(Call call, IOException e) {\r\n                SwingUtilities.invokeLater(() -> {\r\n                    System.err.println(\"데이터 가져오기 실패: \" + e.getMessage());\r\n                });\r\n            }\r\n\r\n            @Override\r\n            public void onResponse(Call call, Response response) throws IOException {\r\n                if (response.isSuccessful()) {\r\n                    String responseBody = response.body().string();\r\n                    JSONObject jsonResponse = new JSONObject(responseBody);\r\n\r\n                    if (jsonResponse.has(\"money\")) {\r\n                        money = jsonResponse.getInt(\"money\");\r\n                        System.out.println(\"money: \" + money);\r\n                        windowManager.getMainWindow().setMoney(money);\r\n                    } else {\r\n                        System.err.println(\"사용자 정보가 존재하지 않습니다.\");\r\n                    }\r\n                } else {\r\n                    SwingUtilities.invokeLater(() -> {\r\n                        System.err.println(\"데이터 가져오기 실패: \" + response.message());\r\n                    });\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    public void saveScore(int score) {\r\n        OkHttpClient client = new OkHttpClient();\r\n\r\n        // Step 1: 사용자 정보에 점수 저장\r\n        String uniqueKey = String.valueOf(System.currentTimeMillis()); // 시간 기반의 고유 키 생성\r\n        JSONObject userJson = new JSONObject();\r\n        try {\r\n            userJson.put(uniqueKey, score); // 시간 기반의 고유 키 아래에 점수만 저장\r\n        } catch (JSONException e) {\r\n            System.err.println(\"JSON 생성 오류: \" + e.getMessage());\r\n            return;\r\n        }\r\n\r\n        RequestBody userBody = RequestBody.create(MediaType.parse(\"application/json; charset=utf-8\"), userJson.toString());\r\n        Request userRequest = new Request.Builder()\r\n                .url(\"https://shootthedock-default-rtdb.firebaseio.com/users/\" + email + \"/userinfo/scores.json?auth=\" + idToken)\r\n                .patch(userBody) // 데이터를 추가할 때는 PATCH를 사용하여 기존 데이터를 유지\r\n                .build();\r\n\r\n        client.newCall(userRequest).enqueue(new Callback() {\r\n            @Override\r\n            public void onFailure(Call call, IOException e) {\r\n                System.err.println(\"사용자 정보에 점수 저장 실패: \" + e.getMessage());\r\n            }\r\n\r\n            @Override\r\n            public void onResponse(Call call, Response response) throws IOException {\r\n                if (response.isSuccessful()) {\r\n                    System.out.println(\"사용자 정보에 점수 저장 성공\");\r\n\r\n                    // Step 2: 최고 점수 확인 및 리더보드 업데이트\r\n                    checkAndSaveLeaderboard(score);\r\n                } else {\r\n                    System.err.println(\"사용자 정보에 점수 저장 실패: \" + response.code());\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    public void saveMoney(int money) {\r\n        OkHttpClient client = new OkHttpClient();\r\n        money = this.money + money;\r\n        // Step 1: 사용자 정보에 점수 저장\r\n        JSONObject userJson = new JSONObject();\r\n        userJson.put(\"money\", money);\r\n\r\n        RequestBody userBody = RequestBody.create(MediaType.parse(\"application/json; charset=utf-8\"), userJson.toString());\r\n        Request userRequest = new Request.Builder()\r\n                .url(\"https://shootthedock-default-rtdb.firebaseio.com/users/\" + email + \"/userinfo.json?auth=\" + idToken)\r\n                .patch(userBody)\r\n                .build();\r\n\r\n        client.newCall(userRequest).enqueue(new Callback() {\r\n            @Override\r\n            public void onFailure(Call call, IOException e) {\r\n                System.err.println(\"사용자 정보에 점수 저장 실패: \" + e.getMessage());\r\n            }\r\n\r\n            @Override\r\n            public void onResponse(Call call, Response response) throws IOException {\r\n                if (response.isSuccessful()) {\r\n                    System.out.println(\"사용자 정보에 점수 저장 성공\");\r\n                } else {\r\n                    System.err.println(\"사용자 정보에 점수 저장 실패: \" + response.code());\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    private void checkAndSaveLeaderboard(int latestScore) {\r\n        OkHttpClient client = new OkHttpClient();\r\n\r\n        // 사용자 정보에서 모든 점수를 가져옴\r\n        String userScoresUrl = \"https://shootthedock-default-rtdb.firebaseio.com/users/\" + email + \"/userinfo/scores.json?auth=\" + idToken;\r\n        Request request = new Request.Builder()\r\n                .url(userScoresUrl)\r\n                .get()\r\n                .build();\r\n\r\n        client.newCall(request).enqueue(new Callback() {\r\n            @Override\r\n            public void onFailure(Call call, IOException e) {\r\n                System.err.println(\"점수 목록 가져오기 실패: \" + e.getMessage());\r\n            }\r\n\r\n            @Override\r\n            public void onResponse(Call call, Response response) throws IOException {\r\n                if (response.isSuccessful()) {\r\n                    String responseBody = response.body().string();\r\n\r\n                    // 응답이 비어 있거나 유효하지 않은 경우 처리\r\n                    if (responseBody == null || responseBody.trim().isEmpty()) {\r\n                        System.err.println(\"응답이 비어있거나 잘못되었습니다.\");\r\n                        return;\r\n                    }\r\n\r\n                    try {\r\n                        int highestScore = latestScore;\r\n\r\n                        // 응답이 JSON 객체인지 확인\r\n                        JSONObject scoresObject = new JSONObject(responseBody);\r\n\r\n                        // 객체에서 모든 점수 탐색 (타임스탬프를 키로 사용)\r\n                        Iterator<String> keys = scoresObject.keys();\r\n                        while (keys.hasNext()) {\r\n                            String key = keys.next();\r\n                            int score = scoresObject.getInt(key);\r\n                            if (score > highestScore) {\r\n                                highestScore = score;\r\n                            }\r\n                        }\r\n\r\n                        // 리더보드에 최고 점수가 있는지 확인 후 없으면 저장\r\n                        saveToLeaderboardIfHighest(highestScore);\r\n\r\n                    } catch (JSONException e) {\r\n                        System.err.println(\"JSON 파싱 오류: \" + e.getMessage());\r\n                    }\r\n                } else {\r\n                    System.err.println(\"점수 목록 가져오기 실패: \" + response.code());\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n\r\n\r\n    private void saveToLeaderboardIfHighest(int highestUserScore) {\r\n        OkHttpClient client = new OkHttpClient();\r\n\r\n        // 리더보드 URL 정의\r\n        String leaderboardUrl = \"https://shootthedock-default-rtdb.firebaseio.com/leaderboard.json?auth=\" + idToken;\r\n\r\n        // 리더보드 정보를 GET 요청으로 가져옴\r\n        Request getLeaderboardRequest = new Request.Builder()\r\n                .url(leaderboardUrl)\r\n                .get()\r\n                .build();\r\n\r\n        client.newCall(getLeaderboardRequest).enqueue(new Callback() {\r\n            @Override\r\n            public void onFailure(Call call, IOException e) {\r\n                System.err.println(\"리더보드 점수 가져오기 실패: \" + e.getMessage());\r\n            }\r\n\r\n            @Override\r\n            public void onResponse(Call call, Response response) throws IOException {\r\n                if (response.isSuccessful()) {\r\n                    String responseBody = response.body().string();\r\n                    try {\r\n                        boolean isNewHighScore = true;\r\n\r\n                        // 리더보드가 비어 있지 않다면 현재 최고 점수 확인\r\n                        if (!responseBody.trim().isEmpty() && !responseBody.equals(\"{}\")) {\r\n                            JSONObject leaderboardObject = new JSONObject(responseBody);\r\n                            if (leaderboardObject.has(nickname)) {\r\n                                // 자신의 점수를 찾았으면, 기존 점수와 비교\r\n                                int existingScore = leaderboardObject.getJSONObject(nickname).getInt(\"score\");\r\n                                if (existingScore >= highestUserScore) {\r\n                                    isNewHighScore = false;\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        // 새로운 최고 점수라면 리더보드에 추가 또는 갱신\r\n                        if (isNewHighScore) {\r\n                            addToLeaderboard(highestUserScore);\r\n                        }\r\n                    } catch (JSONException e) {\r\n                        System.err.println(\"JSON 파싱 오류: \" + e.getMessage());\r\n                    }\r\n                } else {\r\n                    System.err.println(\"리더보드 점수 가져오기 실패: \" + response.code());\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    private void addToLeaderboard(int highestUserScore) {\r\n        OkHttpClient client = new OkHttpClient();\r\n\r\n        // 리더보드 URL 정의, 닉네임을 키로 사용\r\n        String leaderboardUrl = \"https://shootthedock-default-rtdb.firebaseio.com/leaderboard/\" + nickname + \".json?auth=\" + idToken;\r\n\r\n        // 리더보드에 저장할 JSON 객체 생성\r\n        JSONObject newEntry = new JSONObject();\r\n        try {\r\n            newEntry.put(\"nickname\", nickname);\r\n            newEntry.put(\"score\", highestUserScore);\r\n        } catch (JSONException e) {\r\n            System.err.println(\"JSON 생성 오류: \" + e.getMessage());\r\n            return;\r\n        }\r\n\r\n        // 새로운 점수 추가를 위한 PUT 요청\r\n        RequestBody body = RequestBody.create(MediaType.parse(\"application/json; charset=utf-8\"), newEntry.toString());\r\n        Request updateRequest = new Request.Builder()\r\n                .url(leaderboardUrl) // 닉네임을 키로 사용해 저장\r\n                .put(body)\r\n                .build();\r\n\r\n        client.newCall(updateRequest).enqueue(new Callback() {\r\n            @Override\r\n            public void onFailure(Call call, IOException e) {\r\n                System.err.println(\"리더보드 업데이트 실패: \" + e.getMessage());\r\n            }\r\n\r\n            @Override\r\n            public void onResponse(Call call, Response response) throws IOException {\r\n                if (response.isSuccessful()) {\r\n                    System.out.println(\"리더보드 업데이트 성공: 최고 점수 \" + highestUserScore);\r\n                } else {\r\n                    System.err.println(\"리더보드 업데이트 실패: \" + response.code());\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    public void getNickname(String idToken) {\r\n        OkHttpClient client = new OkHttpClient();\r\n        String url = \"https://shootthedock-default-rtdb.firebaseio.com/users/\" + email + \"/userinfo.json?auth=\" + idToken;\r\n\r\n        Request request = new Request.Builder()\r\n                .url(url)\r\n                .get()\r\n                .build();\r\n\r\n        client.newCall(request).enqueue(new Callback() {\r\n            @Override\r\n            public void onFailure(Call call, IOException e) {\r\n                SwingUtilities.invokeLater(() -> {\r\n                    System.err.println(\"데이터 가져오기 실패: \" + e.getMessage());\r\n                });\r\n            }\r\n\r\n            @Override\r\n            public void onResponse(Call call, Response response) throws IOException {\r\n                if (response.isSuccessful()) {\r\n                    String responseBody = response.body().string();\r\n                    JSONObject jsonResponse = new JSONObject(responseBody);\r\n\r\n                    if (jsonResponse.has(\"nickname\")) {\r\n                        nickname = jsonResponse.getString(\"nickname\");\r\n                        System.out.println(\"Nickname: \" + nickname);\r\n                        windowManager.getMainWindow().setNickname(nickname);\r\n                        friendManager = new FriendManager(email,nickname);\r\n                        messageManager = new MessageManager(nickname);\r\n                        messageReceiver = new MessageReceiver(idToken,windowManager.getMainWindow(),email);\r\n                        messageReceiver.startReceivingMessages();\r\n                    } else {\r\n                        System.err.println(\"사용자 정보가 존재하지 않습니다.\");\r\n                    }\r\n                } else {\r\n                    SwingUtilities.invokeLater(() -> {\r\n                        System.err.println(\"데이터 가져오기 실패: \" + response.message());\r\n                    });\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    public static Framework getInstance() {\r\n        if (instance == null) {\r\n            instance = new Framework(new Window());\r\n        }\r\n        return instance;\r\n    }\r\n\r\n    public void onLoginSuccess() {\r\n        isLoginSuccessful = true;\r\n        loginWithFirebase(realemail, password);\r\n        windowManager.openMainWindow();\r\n        stoploginClinet();\r\n        playBackgroundMusic(\"src/main/resources/sounds/backgroundonMain.wav\");\r\n    }\r\n\r\n    public void onGameStart(){\r\n        windowManager.getMainWindow().dispose();\r\n        stopBackgroundMusic();\r\n        window.onLoginSuccess();\r\n        gameState = GameState.VISUALIZING;\r\n        this.setVisible(true);\r\n        gameThread = new Thread() {\r\n            @Override\r\n            public void run(){\r\n                GameLoop();\r\n            }\r\n        };\r\n        gameThread.start();\r\n    }\r\n    /**\r\n     * Set variables and objects.\r\n     * This method is intended to set the variables and objects for this class, variables and objects for the actual game can be set in kr.jbnu.se.std.Game.java.\r\n     */\r\n    private void Initialize()\r\n    {\r\n        // 화면 크기 정보를 가져옵니다.\r\n        GraphicsDevice gd = GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice();\r\n        Rectangle screenSize = gd.getDefaultConfiguration().getBounds();\r\n        frameWidth = (int) screenSize.getWidth();\r\n        frameHeight = (int) screenSize.getHeight();\r\n        this.setSize(frameWidth, frameHeight);\r\n    }\r\n\r\n\r\n    /**\r\n     * Load files - images, sounds, ...\r\n     * This method is intended to load files for this class, files for the actual game can be loaded in kr.jbnu.se.std.Game.java.\r\n     */\r\n    private void LoadContent()\r\n    {\r\n        try\r\n        {\r\n            URL shootTheDuckMenuImgUrl = this.getClass().getResource(\"/images/menu.jpg\");\r\n            shootTheDuckMenuImg = ImageIO.read(shootTheDuckMenuImgUrl);\r\n\r\n            // 이미지가 화면 크기에 맞게 조정됩니다.\r\n            shootTheDuckMenuImg = resizeImage(shootTheDuckMenuImg, frameWidth, frameHeight);\r\n        }\r\n        catch (IOException ex) {\r\n            Logger.getLogger(Framework.class.getName()).log(Level.SEVERE, null, ex);\r\n        }\r\n    }\r\n    public void getEmail(String email){\r\n        realemail = email;\r\n    }\r\n    public void getPassword(String password){\r\n        this.password = password;\r\n    }\r\n    public void getIdtoken(String idToken){\r\n        this.idToken = idToken;\r\n    }\r\n    public void getUserId(String userId){\r\n        email = userId;\r\n\r\n    }\r\n    private BufferedImage resizeImage(BufferedImage originalImage, int targetWidth, int targetHeight) {\r\n        int originalWidth = originalImage.getWidth();\r\n        int originalHeight = originalImage.getHeight();\r\n        // 이미지의 가로와 세로 비율을 계산합니다.\r\n        float aspectRatio = (float) originalWidth / originalHeight;\r\n        int newWidth;\r\n        int newHeight;\r\n        // 화면의 비율에 맞게 이미지를 조정합니다.\r\n        if (targetWidth / (float) targetHeight > aspectRatio) {\r\n            newWidth = (int) (targetHeight * aspectRatio);\r\n            newHeight = targetHeight;\r\n        } else {\r\n            newWidth = targetWidth;\r\n            newHeight = (int) (targetWidth / aspectRatio);\r\n        }\r\n        BufferedImage resizedImage = new BufferedImage(newWidth, newHeight, originalImage.getType());\r\n        Graphics2D g = resizedImage.createGraphics();\r\n        g.drawImage(originalImage, 0, 0, newWidth, newHeight, null);\r\n        g.dispose();\r\n        return resizedImage;\r\n    }\r\n    /**\r\n     * In specific intervals of time (GAME_UPDATE_PERIOD) the game/logic is updated and then the game is drawn on the screen.\r\n     */\r\n    private void GameLoop()\r\n    {\r\n        // This two variables are used in VISUALIZING state of the game. We used them to wait some time so that we get correct frame/window resolution.\r\n        long visualizingTime = 0, lastVisualizingTime = System.nanoTime();\r\n        // This variables are used for calculating the time that defines for how long we should put threat to sleep to meet the GAME_FPS.\r\n        long beginTime, timeTaken, timeLeft;\r\n        while(true)\r\n        {\r\n            beginTime = System.nanoTime();\r\n            switch (gameState)\r\n            {\r\n                case ENDING:\r\n                    gameTime += System.nanoTime() - lastTime;\r\n                    game.UpdateGame(gameTime, mousePosition());\r\n                    lastTime = System.nanoTime();\r\n                    break;\r\n                case PAUSE:\r\n                    gameTime += System.nanoTime() - lastTime;\r\n                    game.UpdateGame(gameTime, mousePosition());\r\n                    lastTime = System.nanoTime();\r\n                    break;\r\n                case MAINPAGE:\r\n                    gameState = GameState.STARTING;\r\n                    break;\r\n                case PLAYING:\r\n                    gameTime += System.nanoTime() - lastTime;\r\n                    game.UpdateGame(gameTime, mousePosition());\r\n                    lastTime = System.nanoTime();\r\n                    break;\r\n                case GAMEOVER:\r\n                    gameTime += System.nanoTime() - lastTime;\r\n                    lastTime = System.nanoTime();\r\n                    break;\r\n                case LOGIN:\r\n                    if (isLoginSuccessful) {\r\n                        gameState = GameState.MAINPAGE;\r\n                    }\r\n                    break;\r\n                case MAIN_MENU:\r\n                    //...\r\n                    break;\r\n                case OPTIONS:\r\n                    //...\r\n                    break;\r\n                case GAME_CONTENT_LOADING:\r\n                    //...\r\n                    break;\r\n                case STARTING:\r\n                    // Sets variables and objects.\r\n                    Initialize();\r\n                    // Load files - images, sounds, ...\r\n                    LoadContent();\r\n\r\n                    // When all things that are called above finished, we change game status to main menu.\r\n                    gameState = GameState.MAIN_MENU;\r\n                    break;\r\n                case VISUALIZING:\r\n                    // On Ubuntu OS (when I tested on my old computer) this.getWidth() method doesn't return the correct value immediately (eg. for frame that should be 800px width, returns 0 than 790 and at last 798px).\r\n                    // So we wait one second for the window/frame to be set to its correct size. Just in case we\r\n                    // also insert 'this.getWidth() > 1' condition in case when the window/frame size wasn't set in time,\r\n                    // so that we although get approximately size.\r\n                    if(this.getWidth() > 1 && visualizingTime > secInNanosec)\r\n                    {\r\n                        frameWidth = this.getWidth();\r\n                        frameHeight = this.getHeight();\r\n\r\n                        // When we get size of frame we change status.\r\n                        gameState = GameState.STARTING;\r\n                    }\r\n                    else\r\n                    {\r\n                        visualizingTime += System.nanoTime() - lastVisualizingTime;\r\n                        lastVisualizingTime = System.nanoTime();\r\n                    }\r\n                    break;\r\n            }\r\n\r\n            // Repaint the screen.\r\n            repaint();\r\n\r\n            // Here we calculate the time that defines for how long we should put threat to sleep to meet the GAME_FPS.\r\n            timeTaken = System.nanoTime() - beginTime;\r\n            timeLeft = (GAME_UPDATE_PERIOD - timeTaken) / milisecInNanosec; // In milliseconds\r\n            // If the time is less than 10 milliseconds, then we will put thread to sleep for 10 millisecond so that some other thread can do some work.\r\n            if (timeLeft < 10)\r\n                timeLeft = 10; //set a minimum\r\n            try {\r\n                //Provides the necessary delay and also yields control so that other thread can do work.\r\n                Thread.sleep(timeLeft);\r\n            } catch (InterruptedException ex) { }\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void Draw(Graphics2D g2d) {\r\n            switch (gameState) {\r\n                case ENDING:\r\n                    game.DrawEnding(g2d, mousePosition(),gameTime);\r\n                    break;\r\n                case PAUSE:\r\n                    game.Draw(g2d, mousePosition());\r\n                    break;\r\n                case PLAYING:\r\n                    game.Draw(g2d, mousePosition());\r\n                    break;\r\n                case GAMEOVER:\r\n                    game.DrawGameOver(g2d, mousePosition());\r\n                    break;\r\n                case MAIN_MENU:\r\n                    // 중앙에 이미지를 배치합니다.\r\n                    int x1 = (frameWidth - shootTheDuckMenuImg.getWidth()) / 2;\r\n                    int y1 = (frameHeight - shootTheDuckMenuImg.getHeight()) / 2;\r\n                    g2d.drawImage(shootTheDuckMenuImg, x1, y1, null);\r\n                    break;\r\n                case OPTIONS:\r\n                    //...\r\n                    break;\r\n                case GAME_CONTENT_LOADING:\r\n                    g2d.setColor(Color.white);\r\n                    g2d.drawString(\"GAME is LOADING\", frameWidth / 2 - 50, frameHeight / 2);\r\n                    break;\r\n            }\r\n    }\r\n    /**\r\n     * Starts new game.\r\n     */\r\n    private void newGame()\r\n    {\r\n        // We set gameTime to zero and lastTime to current time for later calculations.\r\n        gameTime = 0;\r\n        lastTime = System.nanoTime();\r\n        game = new Game(this);\r\n    }\r\n\r\n    /**\r\n     *  Restart game - reset game time and call RestartGame() method of game object so that reset some variables.\r\n     */\r\n    private void restartGame()\r\n    {\r\n        // We set gameTime to zero and lastTime to current time for later calculations.\r\n        gameTime = 0;\r\n        lastTime = System.nanoTime();\r\n        game.RestartGame();\r\n        // We change game status so that the game can start.\r\n        gameState = GameState.PLAYING;\r\n    }\r\n\r\n    private void nextRoundGame()\r\n    {\r\n        // We set gameTime to zero and lastTime to current time for later calculations.\r\n        gameTime = 0;\r\n        lastTime = System.nanoTime();\r\n\r\n\r\n        game.NextRound();\r\n\r\n        // We change game status so that the game can start.\r\n        gameState = GameState.PLAYING;\r\n    }\r\n\r\n    /**\r\n     * Returns the position of the mouse pointer in game frame/window.\r\n     * If mouse position is null than this method return 0,0 coordinate.\r\n     *\r\n     * @return Point of mouse coordinates.\r\n     */\r\n    private Point mousePosition()\r\n    {\r\n        try\r\n        {\r\n            Point mp = this.getMousePosition();\r\n\r\n            if(mp != null)\r\n                return this.getMousePosition();\r\n            else\r\n                return new Point(0, 0);\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            return new Point(0, 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This method is called when keyboard key is released.\r\n     *\r\n     * @param e KeyEvent\r\n     */\r\n    @Override\r\n    public void keyReleasedFramework(KeyEvent e)\r\n    {\r\n        switch (gameState)\r\n        {\r\n            case ENDING:\r\n                if(e.getKeyCode() == KeyEvent.VK_ESCAPE){\r\n                    System.exit(0);\r\n                }\r\n                if(e.getKeyCode() == KeyEvent.VK_SPACE){\r\n                    game.ed++;\r\n                }\r\n                break;\r\n            case PAUSE:\r\n                if(e.getKeyCode() == KeyEvent.VK_SPACE){\r\n                    nextRoundGame();\r\n                }\r\n                break;\r\n            case GAMEOVER:\r\n                if (e.getKeyCode() == KeyEvent.VK_ESCAPE) {\r\n                    System.exit(0);\r\n                } else if (e.getKeyCode() == KeyEvent.VK_SPACE || e.getKeyCode() == KeyEvent.VK_ENTER) {\r\n                    gameState = GameState.MAIN_MENU;  // 게임 오버 시 스페이스바나 엔터를 누르면 메인 메뉴로 돌아감\r\n                }\r\n                break;\r\n            case PLAYING:\r\n            case MAIN_MENU:\r\n                if(e.getKeyCode() == KeyEvent.VK_ESCAPE)\r\n                    System.exit(0);\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This method is called when mouse button is clicked.\r\n     *\r\n     * @param e MouseEvent\r\n     */\r\n    @Override\r\n    public void mouseClicked(MouseEvent e) {\r\n        switch (gameState) {\r\n            case MAIN_MENU:\r\n                if (e.getButton() == MouseEvent.BUTTON1)\r\n                    newGame();\r\n                break;\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/kr/jbnu/se/std/Framework.java b/src/main/java/kr/jbnu/se/std/Framework.java
--- a/src/main/java/kr/jbnu/se/std/Framework.java	(revision 33e22c7faa58025ae72751ac42af09608d48e8bf)
+++ b/src/main/java/kr/jbnu/se/std/Framework.java	(date 1733064716346)
@@ -88,13 +88,6 @@
      * Current state of the game
      */
     public static GameState gameState;
-    public synchronized static void setGameState(GameState state) {
-        gameState = state;
-    }
-
-    public synchronized static GameState getGameState() {
-        return gameState;
-    }
 
     /**
      * Elapsed game time in nanoseconds.
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ExternalStorageConfigurationManager\" enabled=\"true\" />\r\n  <component name=\"MavenProjectsManager\">\r\n    <option name=\"originalFiles\">\r\n      <list>\r\n        <option value=\"$PROJECT_DIR$/pom.xml\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_1_8\" default=\"true\" project-jdk-name=\"1.8\" project-jdk-type=\"JavaSDK\">\r\n    <output url=\"file://$PROJECT_DIR$/out\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision 33e22c7faa58025ae72751ac42af09608d48e8bf)
+++ b/.idea/misc.xml	(date 1733060697207)
@@ -1,5 +1,10 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
+  <component name="EntryPointsManager">
+    <entry_points version="2.0">
+      <entry_point TYPE="field" FQNAME="kr.jbnu.se.std.Game endingStartTime" />
+    </entry_points>
+  </component>
   <component name="ExternalStorageConfigurationManager" enabled="true" />
   <component name="MavenProjectsManager">
     <option name="originalFiles">
