Index: src/main/java/kr/jbnu/se/std/Game.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package kr.jbnu.se.std;\n\nimport java.awt.*;\nimport java.awt.event.MouseEvent;\nimport java.awt.image.BufferedImage;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.util.ArrayList;\nimport java.util.Random;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport javax.imageio.ImageIO;\n\n/**\n * Actual game.\n * \n * @author www.gametutorial.net\n */\n\npublic class Game {\n    \n    /**\n     * We use this to generate a random number.\n     */\n    private Random random;\n    \n    /**\n     * Font that we will use to write statistic to the screen.\n     */\n    private Font font;\n    \n    /**\n     * Array list of the ducks.\n     */\n    private ArrayList<Duck> ducks;\n    \n    /**\n     * How many ducks leave the screen alive?\n     */\n    private int runawayDucks;\n    private Framework framework;\n    \n   /**\n     * How many ducks the player killed?\n     */\n    private int killedDucks;\n    \n    /**\n     * For each killed duck, the player gets points.\n     */\n    private int score;\n    \n   /**\n     * How many times a player is shot?\n     */\n    private int shoots;\n    private boolean leaderboardSaved;\n    /**\n     * Last time of the shoot.\n     */\n    private long lastTimeShoot;    \n    /**\n     * The time which must elapse between shots.\n     */\n    private long timeBetweenShots;\n\n    /**\n     * kr.jbnu.se.std.Game background image.\n     */\n    private BufferedImage backgroundImg;\n    \n    /**\n     * Bottom grass.\n     */\n    private BufferedImage grassImg;\n    \n    /**\n     * kr.jbnu.se.std.Duck image.\n     */\n    private BufferedImage duckImg;\n    \n    /**\n     * Shotgun sight image.\n     */\n    private BufferedImage sightImg;\n    \n    /**\n     * Middle width of the sight image.\n     */\n    private int sightImgMiddleWidth;\n    /**\n     * Middle height of the sight image.\n     */\n    private int sightImgMiddleHeight;\n    \n\n    public Game(Framework framework)\n    {\n        Framework.gameState = Framework.GameState.GAME_CONTENT_LOADING;\n        this.framework = framework;\n        Thread threadForInitGame = new Thread() {\n            @Override\n            public void run(){\n                // Sets variables and objects for the game.\n                Initialize();\n                // Load game files (images, sounds, ...)\n                LoadContent();\n                \n                Framework.gameState = Framework.GameState.PLAYING;\n            }\n        };\n        threadForInitGame.start();\n    }\n    \n    \n   /**\n     * Set variables and objects for the game.\n     */\n    private void Initialize()\n    {\n        random = new Random();        \n        font = new Font(\"monospaced\", Font.BOLD, 18);\n        \n        ducks = new ArrayList<Duck>();\n        \n        runawayDucks = 0;\n        killedDucks = 0;\n        score = 0;\n        shoots = 0;\n        \n        lastTimeShoot = 0;\n        timeBetweenShots = Framework.secInNanosec / 3;\n    }\n    \n    /**\n     * Load game files - images, sounds, ...\n     */\n    private void LoadContent()\n    {\n        try\n        {\n            URL backgroundImgUrl = this.getClass().getResource(\"/images/background.png\");\n            backgroundImg = ImageIO.read(backgroundImgUrl);\n            \n            URL grassImgUrl = this.getClass().getResource(\"/images/grass.png\");\n            grassImg = ImageIO.read(grassImgUrl);\n            \n            URL duckImgUrl = this.getClass().getResource(\"/images/duck.png\");\n            duckImg = ImageIO.read(duckImgUrl);\n            \n            URL sightImgUrl = this.getClass().getResource(\"/images/sight.png\");\n            sightImg = ImageIO.read(sightImgUrl);\n            sightImgMiddleWidth = sightImg.getWidth() / 2;\n            sightImgMiddleHeight = sightImg.getHeight() / 2;\n        }\n        catch (IOException ex) {\n            Logger.getLogger(Game.class.getName()).log(Level.SEVERE, null, ex);\n        }\n    }\n    \n    \n    /**\n     * Restart game - reset some variables.\n     */\n    public void RestartGame()\n    {\n        // Removes all of the ducks from this list.\n        ducks.clear();\n        \n        // We set last duckt time to zero.\n        Duck.lastDuckTime = 0;\n        \n        runawayDucks = 0;\n        killedDucks = 0;\n        score = 0;\n        shoots = 0;\n        \n        lastTimeShoot = 0;\n    }\n    \n    \n    /**\n     * Update game logic.\n     * \n     * @param gameTime gameTime of the game.\n     * @param mousePosition current mouse position.\n     */\n    public void UpdateGame(long gameTime, Point mousePosition)\n    {\n        // Creates a new duck, if it's the time, and add it to the array list.\n        if(System.nanoTime() - Duck.lastDuckTime >= Duck.timeBetweenDucks)\n        {\n            // Here we create new duck and add it to the array list.\n            ducks.add(new Duck(Duck.duckLines[Duck.nextDuckLines][0] + random.nextInt(200), Duck.duckLines[Duck.nextDuckLines][1], Duck.duckLines[Duck.nextDuckLines][2], Duck.duckLines[Duck.nextDuckLines][3], duckImg));\n            \n            // Here we increase nextDuckLines so that next duck will be created in next line.\n            Duck.nextDuckLines++;\n            if(Duck.nextDuckLines >= Duck.duckLines.length)\n                Duck.nextDuckLines = 0;\n            \n            Duck.lastDuckTime = System.nanoTime();\n        }\n        \n        // Update all of the ducks.\n        for(int i = 0; i < ducks.size(); i++)\n        {\n            // Move the duck.\n            ducks.get(i).Update();\n            \n            // Checks if the duck leaves the screen and remove it if it does.\n            if(ducks.get(i).x < 0 - duckImg.getWidth())\n            {\n                ducks.remove(i);\n                runawayDucks++;\n            }\n        }\n        \n        // Does player shoots?\n        if(Canvas.mouseButtonState(MouseEvent.BUTTON1))\n        {\n            // Checks if it can shoot again.\n            if(System.nanoTime() - lastTimeShoot >= timeBetweenShots)\n            {\n                shoots++;\n                \n                // We go over all the ducks and we look if any of them was shoot.\n                for(int i = 0; i < ducks.size(); i++)\n                {\n                    // We check, if the mouse was over ducks head or body, when player has shot.\n                    if(new Rectangle(ducks.get(i).x + 18, ducks.get(i).y     , 27, 30).contains(mousePosition) ||\n                       new Rectangle(ducks.get(i).x + 30, ducks.get(i).y + 30, 88, 25).contains(mousePosition))\n                    {\n                        killedDucks++;\n                        score += ducks.get(i).score;\n                        \n                        // Remove the duck from the array list.\n                        ducks.remove(i);\n                        \n                        // We found the duck that player shoot so we can leave the for loop.\n                        break;\n                    }\n                }\n                \n                lastTimeShoot = System.nanoTime();\n            }\n        }\n        \n        // When 200 ducks runaway, the game ends.\n        if(runawayDucks >= 5)\n            Framework.gameState = Framework.GameState.GAMEOVER;\n        if (Framework.gameState == Framework.GameState.GAMEOVER && !leaderboardSaved) {\n            framework.saveScore(score);\n            leaderboardSaved = true;  // 리더보드 저장 완료\n        }\n    }\n    \n    /**\n     * Draw the game to the screen.\n     * \n     * @param g2d Graphics2D\n     * @param mousePosition current mouse position.\n     */\n    public void Draw(Graphics2D g2d, Point mousePosition)\n    {\n        g2d.drawImage(backgroundImg, 0, 0, Framework.frameWidth, Framework.frameHeight, null);\n        \n        // Here we draw all the ducks.\n        for(int i = 0; i < ducks.size(); i++)\n        {\n            ducks.get(i).Draw(g2d);\n        }\n        \n        g2d.drawImage(grassImg, 0, Framework.frameHeight - grassImg.getHeight(), Framework.frameWidth, grassImg.getHeight(), null);\n        \n        g2d.drawImage(sightImg, mousePosition.x - sightImgMiddleWidth, mousePosition.y - sightImgMiddleHeight, null);\n        \n        g2d.setFont(font);\n        g2d.setColor(Color.darkGray);\n        \n        g2d.drawString(\"RUNAWAY: \" + runawayDucks, 10, 21);\n        g2d.drawString(\"KILLS: \" + killedDucks, 160, 21);\n        g2d.drawString(\"SHOOTS: \" + shoots, 299, 21);\n        g2d.drawString(\"SCORE: \" + score, 440, 21);\n    }\n    \n    \n    /**\n     * Draw the game over screen.\n     * \n     * @param g2d Graphics2D\n     * @param mousePosition Current mouse position.\n     */\n    public void DrawGameOver(Graphics2D g2d, Point mousePosition)\n    {\n        Draw(g2d, mousePosition);\n        \n        // The first text is used for shade.\n        g2d.setColor(Color.black);\n        g2d.drawString(\"kr.jbnu.se.std.Game Over\", Framework.frameWidth / 2 - 39, (int)(Framework.frameHeight * 0.65) + 1);\n        g2d.drawString(\"Press space or enter to restart.\", Framework.frameWidth / 2 - 149, (int)(Framework.frameHeight * 0.70) + 1);\n        g2d.setColor(Color.red);\n        g2d.drawString(\"kr.jbnu.se.std.Game Over\", Framework.frameWidth / 2 - 40, (int)(Framework.frameHeight * 0.65));\n        g2d.drawString(\"Press space or enter to restart.\", Framework.frameWidth / 2 - 150, (int)(Framework.frameHeight * 0.70));\n    }\n\n    public int getScore(){\n        return score;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/kr/jbnu/se/std/Game.java b/src/main/java/kr/jbnu/se/std/Game.java
--- a/src/main/java/kr/jbnu/se/std/Game.java	(revision 3566542502a65e4790fb99ac2ecf4cb2b6d6ac1c)
+++ b/src/main/java/kr/jbnu/se/std/Game.java	(date 1728289309959)
@@ -18,39 +18,42 @@
  */
 
 public class Game {
-    
+
     /**
      * We use this to generate a random number.
      */
     private Random random;
-    
+    private boolean isPause = false;
+    private int Round;
+
     /**
      * Font that we will use to write statistic to the screen.
      */
     private Font font;
-    
+
     /**
      * Array list of the ducks.
      */
     private ArrayList<Duck> ducks;
-    
+
     /**
      * How many ducks leave the screen alive?
      */
     private int runawayDucks;
     private Framework framework;
-    
-   /**
+
+    /**
      * How many ducks the player killed?
      */
     private int killedDucks;
-    
+
     /**
      * For each killed duck, the player gets points.
      */
     private int score;
-    
-   /**
+    private int money;
+
+    /**
      * How many times a player is shot?
      */
     private int shoots;
@@ -58,7 +61,7 @@
     /**
      * Last time of the shoot.
      */
-    private long lastTimeShoot;    
+    private long lastTimeShoot;
     /**
      * The time which must elapse between shots.
      */
@@ -68,22 +71,22 @@
      * kr.jbnu.se.std.Game background image.
      */
     private BufferedImage backgroundImg;
-    
+
     /**
      * Bottom grass.
      */
     private BufferedImage grassImg;
-    
+
     /**
      * kr.jbnu.se.std.Duck image.
      */
     private BufferedImage duckImg;
-    
+
     /**
      * Shotgun sight image.
      */
     private BufferedImage sightImg;
-    
+
     /**
      * Middle width of the sight image.
      */
@@ -92,167 +95,182 @@
      * Middle height of the sight image.
      */
     private int sightImgMiddleHeight;
-    
+
 
-    public Game(Framework framework)
-    {
+    public Game(Framework framework) {
         Framework.gameState = Framework.GameState.GAME_CONTENT_LOADING;
         this.framework = framework;
         Thread threadForInitGame = new Thread() {
             @Override
-            public void run(){
+            public void run() {
                 // Sets variables and objects for the game.
                 Initialize();
                 // Load game files (images, sounds, ...)
                 LoadContent();
-                
+
                 Framework.gameState = Framework.GameState.PLAYING;
             }
         };
         threadForInitGame.start();
     }
-    
-    
-   /**
+
+
+    /**
      * Set variables and objects for the game.
      */
-    private void Initialize()
-    {
-        random = new Random();        
+    private void Initialize() {
+        random = new Random();
         font = new Font("monospaced", Font.BOLD, 18);
-        
+
         ducks = new ArrayList<Duck>();
-        
+
         runawayDucks = 0;
         killedDucks = 0;
         score = 0;
         shoots = 0;
-        
+        Round = 0;
+
         lastTimeShoot = 0;
         timeBetweenShots = Framework.secInNanosec / 3;
     }
-    
+
     /**
      * Load game files - images, sounds, ...
      */
-    private void LoadContent()
-    {
-        try
-        {
+    private void LoadContent() {
+        try {
             URL backgroundImgUrl = this.getClass().getResource("/images/background.png");
             backgroundImg = ImageIO.read(backgroundImgUrl);
-            
+
             URL grassImgUrl = this.getClass().getResource("/images/grass.png");
             grassImg = ImageIO.read(grassImgUrl);
-            
+
             URL duckImgUrl = this.getClass().getResource("/images/duck.png");
             duckImg = ImageIO.read(duckImgUrl);
-            
+
             URL sightImgUrl = this.getClass().getResource("/images/sight.png");
             sightImg = ImageIO.read(sightImgUrl);
             sightImgMiddleWidth = sightImg.getWidth() / 2;
             sightImgMiddleHeight = sightImg.getHeight() / 2;
-        }
-        catch (IOException ex) {
+        } catch (IOException ex) {
             Logger.getLogger(Game.class.getName()).log(Level.SEVERE, null, ex);
         }
     }
-    
-    
+
+
     /**
      * Restart game - reset some variables.
      */
-    public void RestartGame()
-    {
+    public void RestartGame() {
         // Removes all of the ducks from this list.
         ducks.clear();
-        
+
         // We set last duckt time to zero.
         Duck.lastDuckTime = 0;
-        
+
         runawayDucks = 0;
         killedDucks = 0;
         score = 0;
         shoots = 0;
-        
+
         lastTimeShoot = 0;
     }
-    
-    
+
+    public void Pause() {
+        ducks.clear();
+        isPause = true;
+        Framework.gameState = Framework.GameState.Pause;
+    }
+
+
+    public void NextRound() {
+        isPause = false;
+        Framework.gameState = Framework.GameState.PLAYING;
+        Duck.lastDuckTime = 0; // 오리 타이머 초기화
+        killedDucks = 0; // 죽인 오리 수 초기화
+        runawayDucks = 0; // 도망간 오리 수 초기화
+        Round += 1;
+
+    }
+
+
     /**
      * Update game logic.
-     * 
-     * @param gameTime gameTime of the game.
+     *
+     * @param gameTime      gameTime of the game.
      * @param mousePosition current mouse position.
      */
-    public void UpdateGame(long gameTime, Point mousePosition)
-    {
+    public void UpdateGame(long gameTime, Point mousePosition) {
+        if(!isPause){
         // Creates a new duck, if it's the time, and add it to the array list.
-        if(System.nanoTime() - Duck.lastDuckTime >= Duck.timeBetweenDucks)
-        {
+        if (System.nanoTime() - Duck.lastDuckTime >= Duck.timeBetweenDucks) {
             // Here we create new duck and add it to the array list.
             ducks.add(new Duck(Duck.duckLines[Duck.nextDuckLines][0] + random.nextInt(200), Duck.duckLines[Duck.nextDuckLines][1], Duck.duckLines[Duck.nextDuckLines][2], Duck.duckLines[Duck.nextDuckLines][3], duckImg));
-            
+
             // Here we increase nextDuckLines so that next duck will be created in next line.
             Duck.nextDuckLines++;
-            if(Duck.nextDuckLines >= Duck.duckLines.length)
+            if (Duck.nextDuckLines >= Duck.duckLines.length)
                 Duck.nextDuckLines = 0;
-            
+
             Duck.lastDuckTime = System.nanoTime();
+            if(killedDucks > 40){
+
+            }
         }
-        
+
         // Update all of the ducks.
-        for(int i = 0; i < ducks.size(); i++)
-        {
+        for (int i = 0; i < ducks.size(); i++) {
             // Move the duck.
             ducks.get(i).Update();
-            
+
             // Checks if the duck leaves the screen and remove it if it does.
-            if(ducks.get(i).x < 0 - duckImg.getWidth())
-            {
+            if (ducks.get(i).x < 0 - duckImg.getWidth()) {
                 ducks.remove(i);
                 runawayDucks++;
             }
         }
-        
+
         // Does player shoots?
-        if(Canvas.mouseButtonState(MouseEvent.BUTTON1))
-        {
+        if (Canvas.mouseButtonState(MouseEvent.BUTTON1)) {
             // Checks if it can shoot again.
-            if(System.nanoTime() - lastTimeShoot >= timeBetweenShots)
-            {
+            if (System.nanoTime() - lastTimeShoot >= timeBetweenShots) {
                 shoots++;
-                
+
                 // We go over all the ducks and we look if any of them was shoot.
-                for(int i = 0; i < ducks.size(); i++)
-                {
+                for (int i = 0; i < ducks.size(); i++) {
                     // We check, if the mouse was over ducks head or body, when player has shot.
-                    if(new Rectangle(ducks.get(i).x + 18, ducks.get(i).y     , 27, 30).contains(mousePosition) ||
-                       new Rectangle(ducks.get(i).x + 30, ducks.get(i).y + 30, 88, 25).contains(mousePosition))
-                    {
+                    if (new Rectangle(ducks.get(i).x + 18, ducks.get(i).y, 27, 30).contains(mousePosition) ||
+                            new Rectangle(ducks.get(i).x + 30, ducks.get(i).y + 30, 88, 25).contains(mousePosition)) {
                         killedDucks++;
+                        money += 10;
                         score += ducks.get(i).score;
-                        
+
                         // Remove the duck from the array list.
                         ducks.remove(i);
-                        
+
                         // We found the duck that player shoot so we can leave the for loop.
                         break;
                     }
                 }
-                
+
                 lastTimeShoot = System.nanoTime();
             }
         }
-        
+
         // When 200 ducks runaway, the game ends.
-        if(runawayDucks >= 5)
+        if (runawayDucks >= 5)
             Framework.gameState = Framework.GameState.GAMEOVER;
         if (Framework.gameState == Framework.GameState.GAMEOVER && !leaderboardSaved) {
             framework.saveScore(score);
             leaderboardSaved = true;  // 리더보드 저장 완료
         }
-    }
+        if(killedDucks > 20){
+            Pause();
+        }
+    }else{
+            return;
+        }
+}
     
     /**
      * Draw the game to the screen.
@@ -273,7 +291,7 @@
         g2d.drawImage(grassImg, 0, Framework.frameHeight - grassImg.getHeight(), Framework.frameWidth, grassImg.getHeight(), null);
         
         g2d.drawImage(sightImg, mousePosition.x - sightImgMiddleWidth, mousePosition.y - sightImgMiddleHeight, null);
-        
+
         g2d.setFont(font);
         g2d.setColor(Color.darkGray);
         
@@ -281,6 +299,9 @@
         g2d.drawString("KILLS: " + killedDucks, 160, 21);
         g2d.drawString("SHOOTS: " + shoots, 299, 21);
         g2d.drawString("SCORE: " + score, 440, 21);
+        g2d.drawString("Round: " + Round, 570, 21);
+        g2d.drawString("Money: " + money, 700, 21);
+
     }
     
     
Index: src/main/java/kr/jbnu/se/std/Framework.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package kr.jbnu.se.std;\n\nimport com.google.auth.oauth2.GoogleCredentials;\nimport com.google.common.util.concurrent.MoreExecutors;\nimport com.google.firebase.FirebaseApp;\nimport com.google.firebase.FirebaseOptions;\nimport com.google.firebase.auth.FirebaseAuth;\nimport com.google.firebase.auth.FirebaseAuthException;\nimport com.google.firebase.auth.UserRecord;\nimport com.google.firebase.database.*;\nimport com.google.firebase.database.core.AuthTokenProvider;\nimport com.google.gson.JsonObject;\nimport jdk.jfr.internal.tool.Main;\nimport okhttp3.*;\nimport org.json.JSONArray;\nimport org.json.JSONException;\nimport org.json.JSONObject;\n\nimport java.awt.*;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.awt.event.KeyEvent;\nimport java.awt.event.MouseEvent;\nimport java.awt.image.BufferedImage;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.util.HashSet;\nimport java.util.Set;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.ScheduledExecutorService;\nimport java.util.concurrent.TimeUnit;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport javax.imageio.ImageIO;\nimport javax.swing.*;\nimport com.google.firebase.database.FirebaseDatabase;\n\n/**\n * kr.jbnu.se.std.Framework that controls the game (kr.jbnu.se.std.Game.java) that created it, update it and draw it on the screen.\n *\n * @author www.gametutorial.net\n */\n\npublic class Framework extends Canvas {\n\n    private boolean isLoginSuccessful = false; // 로그인 성공 여부를 관리\n    private LoginClient loginClient;\n    /**\n     * Width of the frame.\n     */\n    public static int frameWidth;\n    /**\n     * Height of the frame.\n     */\n    public static int frameHeight;\n\n    /**\n     * Time of one second in nanoseconds.\n     * 1 second = 1 000 000 000 nanoseconds\n     */\n    public static final long secInNanosec = 1000000000L;\n\n    /**\n     * Time of one millisecond in nanoseconds.\n     * 1 millisecond = 1 000 000 nanoseconds\n     */\n    public static final long milisecInNanosec = 1000000L;\n\n    /**\n     * FPS - Frames per second\n     * How many times per second the game should update?\n     */\n    private final int GAME_FPS = 60;\n    /**\n     * Pause between updates. It is in nanoseconds.\n     */\n    private final long GAME_UPDATE_PERIOD = secInNanosec / GAME_FPS;\n\n    /**\n     * Possible states of the game\n     */\n    public static enum GameState{STARTING, VISUALIZING, GAME_CONTENT_LOADING,LOGIN,MAIN_MENU, OPTIONS, PLAYING, GAMEOVER, MainPage, DESTROYED}\n    /**\n     * Current state of the game\n     */\n    public static GameState gameState;\n\n    /**\n     * Elapsed game time in nanoseconds.\n     */\n\n    private final ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);\n    private final ScheduledExecutorService scheduler1 = Executors.newScheduledThreadPool(1);\n    private final ScheduledExecutorService scheduler2 = Executors.newScheduledThreadPool(1);\n    private final Set<String> existingFriends = new HashSet<>(); // 중복 방지를 위한 Set\n    private final Set<String> existingFriendsinvite = new HashSet<>(); // 중복 방지를 위한 Set\n\n    private long gameTime;\n    // It is used for calculating elapsed time.\n    private long lastTime;\n\n    // The actual game\n    private Game game;\n    private Thread gameThread;\n    private Window window;\n    private String userid;\n    private static final String DATABASE_URL = \"https://shootthedock-default-rtdb.firebaseio.com\";\n    private OkHttpClient client;\n    private String email;\n    private String nickname;\n    private String idToken;\n    private String password;\n    private String realemail;\n    private FirebaseAuth auth;\n    private DatabaseReference databaseReference;\n    private MainClient MainV2;\n    private AddFriends addFriends;\n    private DatabaseReference chatRef;\n    private final Set<String> receivedMessageKeys = new HashSet<>();\n    private final Set<String> receivedMessageKeysF = new HashSet<>(); // 이미 받은 메시지의 키를 저장할 Set\n    private ChatwithFriends chatwithFriends;\n    private String selectnickname;\n    private int money;\n    private InviteFriends inviteFriends;\n    private ShopWindow shopWindow;\n\n\n    /**\n     * Image for menu.\n     */\n    private BufferedImage shootTheDuckMenuImg;\n\n\n    public Framework (Window window)\n    {\n        super();\n        initializeFirebase();\n        this.window = window;\n        gameState = GameState.LOGIN;\n        client = new OkHttpClient();\n        loginClient = new LoginClient(this);\n        loginClient.setVisible(true);\n        MainV2 = new MainClient(this);\n\n        MainV2.setVisible(false);\n        this.setVisible(false);\n\n\n        databaseReference = FirebaseDatabase.getInstance().getReference();\n    }\n\n    public void refreshIdToken(String email) {\n        try {\n            // 사용자의 ID 토큰을 새로 고치기 위한 로직\n            UserRecord userRecord = FirebaseAuth.getInstance().getUserByEmail(email);\n            String uid = userRecord.getUid();\n\n            // Custom token을 생성합니다.\n            String customToken = FirebaseAuth.getInstance().createCustomToken(uid);\n            this.idToken = customToken; // 새로 생성된 ID 토큰\n            System.out.println(\"New ID Token: \" + idToken);\n        } catch (FirebaseAuthException e) {\n            System.err.println(\"Error refreshing ID Token: \" + e.getMessage());\n        }\n    }\n    public void Invitewindow(){\n            inviteFriends = new InviteFriends(this);\n            startRecevingFriendInvite();\n            if(inviteFriends == null){\n                stopReceivingFriendInvite();\n            }\n    }\n    public void stopfriendadd(){\n        addFriends = null;\n    }\n\n    public void stopfriends(){\n        inviteFriends = null;\n    }\n    public void stoploginClinet(){\n        loginClient = null;\n    }\n\n    public void stopshop(){\n        shopWindow = null;\n    }\n\n    public void stopmain(){\n        MainV2 = null;\n    }\n\n\n    public void Shopwindowopen(){\n        shopWindow = new ShopWindow(this);\n    }\n    public void ChatFriendswindow(String nickname){\n        chatwithFriends = new ChatwithFriends(this);\n        chatwithFriends.setFriends(nickname);\n        selectnickname = chatwithFriends.getFriends();\n        startRecevingFriendschat();\n        if(chatwithFriends == null){\n            stopReceivingFriendschat();\n        }\n    }\n\n\n\n    public void frendsAddwindows(){\n        addFriends = new AddFriends(this);\n    }\n\n    public void buySomeThing(int sell) {\n        OkHttpClient client = new OkHttpClient();\n        JSONObject json = new JSONObject();\n        if(sell < money) {\n            int money = this.money - sell;\n            json.put(\"money\", money);\n            // 사용자 ID를 키로 사용하여 닉네임 저장\n            RequestBody body = RequestBody.create(MediaType.parse(\"application/json; charset=utf-8\"), json.toString());\n            Request request = new Request.Builder()\n                    .url(\"https://shootthedock-default-rtdb.firebaseio.com/users/\" + email + \"/\" + \"userinfo.json\")\n                    .patch(body)// POST 메소드 사용\n                    .build();\n\n            client.newCall(request).enqueue(new Callback() {\n                @Override\n                public void onFailure(Call call, IOException e) {\n                    System.err.println(\"인벤토리 저장 실패: \" + e.getMessage());\n                }\n\n                @Override\n                public void onResponse(Call call, Response response) throws IOException {\n                    if (!response.isSuccessful()) {\n                        System.err.println(\"인벤토리 저장 성공: \" + response.code());\n                    } else {\n                    }\n                }\n            });\n        }else{\n\n        }\n    }\n    public void InventoryAdder_Gun(String item) {\n        OkHttpClient client = new OkHttpClient();\n        JSONObject json = new JSONObject();\n        json.put(\"item\", item);\n        // 사용자 ID를 키로 사용하여 닉네임 저장\n        RequestBody body = RequestBody.create(MediaType.parse(\"application/json; charset=utf-8\"), json.toString());\n        Request request = new Request.Builder()\n                .url(\"https://shootthedock-default-rtdb.firebaseio.com/users/\" + email + \"/\"+ \"userinfo/inventory/Gun/\"+item+\".json\")\n                .patch(body)// POST 메소드 사용\n                .build();\n\n        client.newCall(request).enqueue(new Callback() {\n            @Override\n            public void onFailure(Call call, IOException e) {\n                System.err.println(\"인벤토리 저장 실패: \" + e.getMessage());\n            }\n\n            @Override\n            public void onResponse(Call call, Response response) throws IOException {\n                if (!response.isSuccessful()) {\n                    System.err.println(\"인벤토리 저장 성공: \" + response.code());\n                }else{\n                }\n            }\n        });\n    }\n\n\n    public void friendsAdder(String nickname) {\n        OkHttpClient client = new OkHttpClient();\n        JSONObject json = new JSONObject();\n        System.err.println(nickname);\n        json.put(\"nickname\", nickname);\n        // 사용자 ID를 키로 사용하여 닉네임 저장\n        RequestBody body = RequestBody.create(MediaType.parse(\"application/json; charset=utf-8\"), json.toString());\n        Request request = new Request.Builder()\n                .url(\"https://shootthedock-default-rtdb.firebaseio.com/users/\" + email + \"/\"+ \"userinfo/friends/\"+nickname+\".json\")\n                .patch(body)// POST 메소드 사용\n                .build();\n\n        client.newCall(request).enqueue(new Callback() {\n            @Override\n            public void onFailure(Call call, IOException e) {\n                System.err.println(\"닉네임 저장 실패: \" + e.getMessage());\n            }\n\n            @Override\n            public void onResponse(Call call, Response response) throws IOException {\n                if (!response.isSuccessful()) {\n                    System.err.println(\"닉네임 저장 성공: \" + response.code());\n                }else{\n                }\n            }\n        });\n    }\n\n    public void friendsAdderother(String nickname) {\n        OkHttpClient client = new OkHttpClient();\n        JSONObject json = new JSONObject();\n        System.err.println(nickname);\n        json.put(\"nickname\", this.nickname);\n        // 사용자 ID를 키로 사용하여 닉네임 저장\n        RequestBody body = RequestBody.create(MediaType.parse(\"application/json; charset=utf-8\"), json.toString());\n        Request request = new Request.Builder()\n                .url(\"https://shootthedock-default-rtdb.firebaseio.com/friend/\" + nickname + \"/\"+ \"userinfo/friendswant/\"+this.nickname+\".json\")\n                .patch(body) // POST 메소드 사용\n                .build();\n\n        client.newCall(request).enqueue(new Callback() {\n            @Override\n            public void onFailure(Call call, IOException e) {\n                System.err.println(\"친구추가 저장 실패: \" + e.getMessage());\n            }\n\n            @Override\n            public void onResponse(Call call, Response response) throws IOException {\n                if (!response.isSuccessful()) {\n                    System.err.println(\"친구추가 저장 실패: \" + response.code());\n                }else{\n                }\n            }\n        });\n    }\n    // Firebase에 메시지 전송\n    public void sendMessageFriend(String selectednick,String message) {\n        try {\n            // 메시지를 JSON 형식으로 변환\n            JSONObject json = new JSONObject();\n            json.put(\"message\", message);\n            json.put(\"nickname\", nickname);\n            String timestamp = String.valueOf(System.currentTimeMillis());\n\n            // Firebase에 저장할 URL\n            String url = \"https://shootthedock-default-rtdb.firebaseio.com/chatfriend/\"+ selectednick+nickname+\"/\"+timestamp+\".json\"; // 채팅 메시지를 저장하는 경로\n\n            RequestBody body = RequestBody.create(\n                    MediaType.parse(\"application/json; charset=utf-8\"),\n                    json.toString()\n            );\n\n            Request request = new Request.Builder()\n                    .url(url)\n                    .put(body) // POST 메소드 사용\n                    .build();\n\n            // 비동기 호출\n            client.newCall(request).enqueue(new Callback() {\n                @Override\n                public void onFailure(Call call, IOException e) {\n                    System.err.println(\"메시지 저장 실패: \" + e.getMessage());\n                }\n\n                @Override\n                public void onResponse(Call call, Response response) throws IOException {\n                    if (!response.isSuccessful()) {\n                        System.err.println(\"메시지 저장 실패: \" + response.code());\n                    } else {\n                        System.out.println(\"메시지 저장 성공: \" + response.body().string());\n                    }\n                }\n            });\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    // Firebase에 메시지 전송\n    public void sendMessage(String message) {\n        try {\n            // 메시지를 JSON 형식으로 변환\n            JSONObject json = new JSONObject();\n            json.put(\"message\", message);\n            json.put(\"nickname\", nickname);\n            String timestamp = String.valueOf(System.currentTimeMillis());\n\n            // Firebase에 저장할 URL\n            String url = \"https://shootthedock-default-rtdb.firebaseio.com/chat/\"+ timestamp+\".json\"; // 채팅 메시지를 저장하는 경로\n\n            RequestBody body = RequestBody.create(\n                    MediaType.parse(\"application/json; charset=utf-8\"),\n                    json.toString()\n            );\n\n            Request request = new Request.Builder()\n                    .url(url)\n                    .put(body) // POST 메소드 사용\n                    .build();\n\n            // 비동기 호출\n            client.newCall(request).enqueue(new Callback() {\n                @Override\n                public void onFailure(Call call, IOException e) {\n                    System.err.println(\"메시지 저장 실패: \" + e.getMessage());\n                }\n\n                @Override\n                public void onResponse(Call call, Response response) throws IOException {\n                    if (!response.isSuccessful()) {\n                        System.err.println(\"메시지 저장 실패: \" + response.code());\n                    } else {\n                        System.out.println(\"메시지 저장 성공: \" + response.body().string());\n                    }\n                }\n            });\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n    // Firebase에서 메시지 수신\n\n    public void startReceivingMessages() {\n        // 0초 후에 시작하고, 5초마다 receiveMessages 메소드를 호출\n        scheduler.scheduleAtFixedRate(this::receiveMessages, 0, 1, TimeUnit.SECONDS);\n        scheduler.scheduleAtFixedRate(this::receiveFriends, 0, 1, TimeUnit.SECONDS);\n    }\n\n    public void startRecevingFriendschat() {\n        scheduler1.scheduleAtFixedRate(this::receiveMessagesFriends, 0, 1, TimeUnit.SECONDS);\n        scheduler1.scheduleAtFixedRate(this::receiveMessagesFriends2, 0, 1, TimeUnit.SECONDS);\n    }\n\n    public void stopReceivingFriendschat() {\n        scheduler1.shutdownNow();\n    }\n\n    public void startRecevingFriendInvite(){\n        scheduler2.scheduleAtFixedRate(this::receiveFriendsInvite, 0, 1, TimeUnit.SECONDS);\n    }\n\n    public void stopReceivingFriendInvite() {\n        scheduler2.shutdownNow();\n    }\n\n    public void receiveMessagesFriends2() {\n        OkHttpClient client = new OkHttpClient();\n        String url = \"https://shootthedock-default-rtdb.firebaseio.com/chatfriend/\"+ nickname+selectnickname+\".json?auth=\" + idToken; // 채팅 메시지를 가져올 URL\n\n        Request request = new Request.Builder()\n                .url(url)\n                .get()\n                .build();\n\n        client.newCall(request).enqueue(new Callback() {\n            @Override\n            public void onFailure(Call call, IOException e) {\n                SwingUtilities.invokeLater(() -> {\n                    System.err.println(\"채팅 메시지 가져오기 실패: \" + e.getMessage());\n                });\n            }\n\n            @Override\n            public void onResponse(Call call, Response response) throws IOException {\n                if (response.isSuccessful()) {\n                    String responseBody = response.body().string();\n                    JSONObject jsonResponse = new JSONObject(responseBody);\n\n                    // JSON 객체가 비어있는지 확인\n                    if (jsonResponse.length() == 0) {\n                        SwingUtilities.invokeLater(() -> {\n                            System.out.println(\"채팅 내역이 존재하지 않습니다.\");\n                        });\n                        return;\n                    }\n\n                    // 채팅 메시지 출력\n                    for (String key : jsonResponse.keySet()) {\n                        JSONObject messageData = jsonResponse.getJSONObject(key);\n                        String message = messageData.getString(\"message\");\n                        String senderNickname = messageData.getString(\"nickname\");\n\n                        // 이미 받은 메시지인지 확인 (타임스탬프 키 사용)\n                        if (!receivedMessageKeysF.contains(key)) {\n                            receivedMessageKeysF.add(key); // 새 메시지 키 추가\n                            String uniqueMessage = senderNickname + \": \" + message; // 고유 메시지 생성\n                            SwingUtilities.invokeLater(() -> {\n                                chatwithFriends.setChat(uniqueMessage + \"\\n\"); // 채팅 영역에 메시지 추가\n                            });\n                        }\n                    }\n                } else {\n                    SwingUtilities.invokeLater(() -> {\n                        System.err.println(\"채팅 메시지 가져오기 실패: \" + response.message());\n                    });\n                }\n            }\n        });\n    }\n\n    public void receiveMessagesFriends() {\n        OkHttpClient client = new OkHttpClient();\n        String url = \"https://shootthedock-default-rtdb.firebaseio.com/chatfriend/\"+ selectnickname+nickname+\".json?auth=\" + idToken; // 채팅 메시지를 가져올 URL\n\n        Request request = new Request.Builder()\n                .url(url)\n                .get()\n                .build();\n\n        client.newCall(request).enqueue(new Callback() {\n            @Override\n            public void onFailure(Call call, IOException e) {\n                SwingUtilities.invokeLater(() -> {\n                    System.err.println(\"채팅 메시지 가져오기 실패: \" + e.getMessage());\n                });\n            }\n\n            @Override\n            public void onResponse(Call call, Response response) throws IOException {\n                if (response.isSuccessful()) {\n                    String responseBody = response.body().string();\n                    JSONObject jsonResponse = new JSONObject(responseBody);\n\n                    // JSON 객체가 비어있는지 확인\n                    if (jsonResponse.length() == 0) {\n                        SwingUtilities.invokeLater(() -> {\n                            System.out.println(\"채팅 내역이 존재하지 않습니다.\");\n                        });\n                        return;\n                    }\n\n                    // 채팅 메시지 출력\n                    for (String key : jsonResponse.keySet()) {\n                        JSONObject messageData = jsonResponse.getJSONObject(key);\n                        String message = messageData.getString(\"message\");\n                        String senderNickname = messageData.getString(\"nickname\");\n\n                        // 이미 받은 메시지인지 확인 (타임스탬프 키 사용)\n                        if (!receivedMessageKeysF.contains(key)) {\n                            receivedMessageKeysF.add(key); // 새 메시지 키 추가\n                            String uniqueMessage = senderNickname + \": \" + message; // 고유 메시지 생성\n                            SwingUtilities.invokeLater(() -> {\n                                chatwithFriends.setChat(uniqueMessage + \"\\n\"); // 채팅 영역에 메시지 추가\n                            });\n                        }\n                    }\n                } else {\n                    SwingUtilities.invokeLater(() -> {\n                        System.err.println(\"채팅 메시지 가져오기 실패: \" + response.message());\n                    });\n                }\n            }\n        });\n    }\n\n    public void receiveMessages() {\n        OkHttpClient client = new OkHttpClient();\n        String url = \"https://shootthedock-default-rtdb.firebaseio.com/chat.json?auth=\" + idToken; // 채팅 메시지를 가져올 URL\n\n        Request request = new Request.Builder()\n                .url(url)\n                .get()\n                .build();\n\n        client.newCall(request).enqueue(new Callback() {\n            @Override\n            public void onFailure(Call call, IOException e) {\n                SwingUtilities.invokeLater(() -> {\n                    System.err.println(\"채팅 메시지 가져오기 실패: \" + e.getMessage());\n                });\n            }\n\n            @Override\n            public void onResponse(Call call, Response response) throws IOException {\n                if (response.isSuccessful()) {\n                    String responseBody = response.body().string();\n                    JSONObject jsonResponse = new JSONObject(responseBody);\n\n                    // JSON 객체가 비어있는지 확인\n                    if (jsonResponse.length() == 0) {\n                        SwingUtilities.invokeLater(() -> {\n                            System.out.println(\"채팅 내역이 존재하지 않습니다.\");\n                        });\n                        return;\n                    }\n\n                    // 채팅 메시지 출력\n                    for (String key : jsonResponse.keySet()) {\n                        JSONObject messageData = jsonResponse.getJSONObject(key);\n                        String message = messageData.getString(\"message\");\n                        String senderNickname = messageData.getString(\"nickname\");\n\n                        // 이미 받은 메시지인지 확인 (타임스탬프 키 사용)\n                        if (!receivedMessageKeys.contains(key)) {\n                            receivedMessageKeys.add(key); // 새 메시지 키 추가\n                            String uniqueMessage = senderNickname + \": \" + message; // 고유 메시지 생성\n                            SwingUtilities.invokeLater(() -> {\n                                MainV2.setChat(uniqueMessage + \"\\n\"); // 채팅 영역에 메시지 추가\n                            });\n                        }\n                    }\n                } else {\n                    SwingUtilities.invokeLater(() -> {\n                        System.err.println(\"채팅 메시지 가져오기 실패: \" + response.message());\n                    });\n                }\n            }\n        });\n    }\n    public void deleteFriendInvite(String nicknameToDelete) {\n        OkHttpClient client = new OkHttpClient();\n        // \"nickname\" 키를 사용하여 friendswant 밑의 데이터를 삭제하는 URL\n        String url = \"https://shootthedock-default-rtdb.firebaseio.com/friend/\" + nickname + \"/userinfo/friendswant/\" + nicknameToDelete + \"/nickname.json?auth=\" + idToken;\n\n        Request request = new Request.Builder()\n                .url(url)\n                .delete()\n                .build();\n\n        client.newCall(request).enqueue(new Callback() {\n            @Override\n            public void onFailure(Call call, IOException e) {\n                SwingUtilities.invokeLater(() -> {\n                    System.err.println(\"친구 삭제 실패: \" + e.getMessage());\n                });\n            }\n\n            @Override\n            public void onResponse(Call call, Response response) throws IOException {\n                if (response.isSuccessful()) {\n                    SwingUtilities.invokeLater(() -> {\n                        System.out.println(\"친구 삭제 성공: \" + nicknameToDelete);\n                        // 여기서 UI 업데이트 등 추가 작업 가능\n                    });\n                } else {\n                    SwingUtilities.invokeLater(() -> {\n                        System.err.println(\"친구 삭제 실패: \" + response.message());\n                    });\n                }\n            }\n        });\n    }\n\n\n    public void receiveFriendsInvite() {\n        OkHttpClient client = new OkHttpClient();\n        String url = \"https://shootthedock-default-rtdb.firebaseio.com/friend/\" + nickname + \"/userinfo/friendswant.json?auth=\" + idToken;\n\n        Request request = new Request.Builder()\n                .url(url)\n                .get()\n                .build();\n\n        client.newCall(request).enqueue(new Callback() {\n            @Override\n            public void onFailure(Call call, IOException e) {\n                SwingUtilities.invokeLater(() -> {\n                    System.err.println(\"친구 목록 가져오기 실패: \" + e.getMessage());\n                });\n            }\n\n            @Override\n            public void onResponse(Call call, Response response) throws IOException {\n                if (response.isSuccessful()) {\n                    String responseBody = response.body().string();\n                    try {\n                        JSONObject jsonObject = new JSONObject(responseBody);\n\n                        // JSON 객체가 비어있는지 확인\n                        if (jsonObject.length() == 0) {\n                            SwingUtilities.invokeLater(() -> {\n                                System.out.println(\"친구 신청이 없습니다.\");\n                            });\n                            return;\n                        }\n\n                        // 친구 신청 목록 출력\n                        for (String key : jsonObject.keySet()) {\n                            JSONObject inviteObject = jsonObject.getJSONObject(key); // 친구 신청 객체\n                            String friendNickname = inviteObject.getString(\"nickname\"); // 친구의 닉네임\n\n                            // 중복된 친구 신청이 아닌 경우에만 추가\n                            if (!existingFriendsinvite.contains(friendNickname)) {\n                                existingFriendsinvite.add(friendNickname); // 새로운 친구 신청 추가\n                                SwingUtilities.invokeLater(() -> {\n                                    inviteFriends.setFriends(friendNickname + \"\\n\"); // 친구 목록에 추가\n                                });\n                            }\n                        }\n                    } catch (JSONException e) {\n                        e.printStackTrace();\n                        SwingUtilities.invokeLater(() -> {\n                            System.err.println(\"친구 신청 목록 처리 중 오류 발생: \" + e.getMessage());\n                            stopReceivingFriendInvite();\n                        });\n                    }\n                } else {\n                    SwingUtilities.invokeLater(() -> {\n                        System.err.println(\"친구 목록 가져오기 실패: \" + response.message());\n                    });\n                }\n            }\n        });\n    }\n\n\n    public void receiveFriends() {\n        OkHttpClient client = new OkHttpClient();\n        String url = \"https://shootthedock-default-rtdb.firebaseio.com/users/\" + email + \"/userinfo/friends.json?auth=\" + idToken;\n\n        Request request = new Request.Builder()\n                .url(url)\n                .get()\n                .build();\n\n        client.newCall(request).enqueue(new Callback() {\n            @Override\n            public void onFailure(Call call, IOException e) {\n                SwingUtilities.invokeLater(() -> {\n                    System.err.println(\"친구 목록 가져오기 실패: \" + e.getMessage());\n                });\n            }\n\n            @Override\n            public void onResponse(Call call, Response response) throws IOException {\n                if (response.isSuccessful()) {\n                    String responseBody = response.body().string();\n                    try {\n                        JSONObject jsonObject = new JSONObject(responseBody);\n\n                        // JSON 객체가 비어있는지 확인\n                        if (jsonObject.length() == 0) {\n                            SwingUtilities.invokeLater(() -> {\n                                System.out.println(\"친구가 없습니다.\");\n                            });\n                            return;\n                        }\n\n                        // 친구 목록 출력\n                        for (String key : jsonObject.keySet()) {\n                            JSONObject friendObject = jsonObject.getJSONObject(key); // 친구 객체\n                            String nickname = friendObject.getString(\"nickname\"); // 친구의 닉네임\n\n                            // 중복된 친구가 아닌 경우에만 추가\n                            if (!existingFriends.contains(nickname)) {\n                                existingFriends.add(nickname); // 새로운 친구 추가\n                                SwingUtilities.invokeLater(() -> {\n                                    MainV2.setFriends(nickname + \"\\n\"); // 친구 목록에 추가\n                                });\n                            }\n                        }\n                    } catch (JSONException e) {\n                        e.printStackTrace();\n                        SwingUtilities.invokeLater(() -> {\n                            System.err.println(\"친구 목록 처리 중 오류 발생: \" + e.getMessage());\n                        });\n                    }\n                } else {\n                    SwingUtilities.invokeLater(() -> {\n                        System.err.println(\"친구 목록 가져오기 실패: \" + response.message());\n                    });\n                }\n            }\n        });\n    }\n\n\n\n\n    private void initializeFirebase() {\n        try {\n            FileInputStream serviceAccount = new FileInputStream(\"src/main/shootthedock-firebase-adminsdk-304qc-09167d3967.json\");\n\n            FirebaseOptions options = new FirebaseOptions.Builder()\n                    .setCredentials(GoogleCredentials.fromStream(serviceAccount))\n                    .setDatabaseUrl(\"https://shootthedock-default-rtdb.firebaseio.com\")\n                    .build();\n\n            FirebaseApp.initializeApp(options);\n        } catch (IOException e) {\n            e.printStackTrace();\n            JOptionPane.showMessageDialog(this, \"Firebase 초기화 실패: \" + e.getMessage());\n        }\n    }\n    private void loginWithFirebase(String email, String password) {\n        OkHttpClient client = new OkHttpClient();\n        JSONObject json = new JSONObject();\n        json.put(\"email\", email);\n        json.put(\"password\", password);\n        json.put(\"returnSecureToken\", true);\n        RequestBody body = RequestBody.create(MediaType.parse(\"application/json; charset=utf-8\"), json.toString());\n        Request request = new Request.Builder()\n                .url(\"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyCJDgbBXWSRoRUg3xVqsQrSEz1W5AFiE_Y\")\n                .post(body)\n                .build();\n\n        client.newCall(request).enqueue(new Callback() {\n            @Override\n            public void onFailure(Call call, IOException e) {\n                SwingUtilities.invokeLater(() -> JOptionPane.showMessageDialog(null, \"로그인 실패: \" + e.getMessage()));\n            }\n\n            @Override\n            public void onResponse(Call call, Response response) throws IOException {\n                if (response.isSuccessful()) {\n                    SwingUtilities.invokeLater(() -> {\n                        String responseBody;\n                        try {\n                            responseBody = response.body().string();\n                            JSONObject jsonResponse = new JSONObject(responseBody);\n                            // ID 토큰 가져오기\n                            idToken = jsonResponse.getString(\"idToken\");\n                            System.out.println(\"ID 토큰: \" + idToken);\n                            // 사용자의 닉네임을 가져옵니다.\n                            getNickname(idToken);\n                            getMoney();\n                        } catch (IOException e) {\n                            throw new RuntimeException(e);\n                        }\n                    });\n                } else {\n                    SwingUtilities.invokeLater(() -> JOptionPane.showMessageDialog(null, \"로그인 실패: 잘못된 자격 증명\"));\n                }\n            }\n        });\n    }\n    public void getMoney() {\n        OkHttpClient client = new OkHttpClient();\n        String url = \"https://shootthedock-default-rtdb.firebaseio.com/users/\" + email + \"/userinfo.json?auth=\" + idToken;\n\n        Request request = new Request.Builder()\n                .url(url)\n                .get()\n                .build();\n\n        client.newCall(request).enqueue(new Callback() {\n            @Override\n            public void onFailure(Call call, IOException e) {\n                SwingUtilities.invokeLater(() -> {\n                    System.err.println(\"데이터 가져오기 실패: \" + e.getMessage());\n                });\n            }\n\n            @Override\n            public void onResponse(Call call, Response response) throws IOException {\n                if (response.isSuccessful()) {\n                    String responseBody = response.body().string();\n                    JSONObject jsonResponse = new JSONObject(responseBody);\n\n                    if (jsonResponse.has(\"money\")) {\n                        money = jsonResponse.getInt(\"money\");\n                        System.out.println(\"money: \" + money);\n                        MainV2.setMoney(money);\n                    } else {\n                        System.err.println(\"사용자 정보가 존재하지 않습니다.\");\n                    }\n                } else {\n                    SwingUtilities.invokeLater(() -> {\n                        System.err.println(\"데이터 가져오기 실패: \" + response.message());\n                    });\n                }\n            }\n        });\n    }\n\n    public void saveScore(int score) {\n        OkHttpClient client = new OkHttpClient();\n        JSONObject json = new JSONObject();\n        json.put(\"nickname\", this.nickname);\n        json.put(\"score\", score);\n\n        RequestBody body = RequestBody.create(MediaType.parse(\"application/json; charset=utf-8\"), json.toString());\n        Request request = new Request.Builder()\n                .url(\"https://shootthedock-default-rtdb.firebaseio.com/leaderboard/\"+nickname+\".json\")\n                .put(body)\n                .build();\n\n        client.newCall(request).enqueue(new Callback() {\n            @Override\n            public void onFailure(Call call, IOException e) {\n                System.err.println(\"점수 저장 실패: \" + e.getMessage());\n            }\n\n            @Override\n            public void onResponse(Call call, Response response) throws IOException {\n                if (response.isSuccessful()) {\n                    System.out.println(\"점수 저장 성공: \" + response.body().string());\n                } else {\n                    System.err.println(\"점수 저장 실패: \" + response.code());\n                }\n            }\n        });\n    }\n\n\n\n    public void getNickname(String idToken) {\n        OkHttpClient client = new OkHttpClient();\n        String url = \"https://shootthedock-default-rtdb.firebaseio.com/users/\" + email + \"/userinfo.json?auth=\" + idToken;\n\n        Request request = new Request.Builder()\n                .url(url)\n                .get()\n                .build();\n\n        client.newCall(request).enqueue(new Callback() {\n            @Override\n            public void onFailure(Call call, IOException e) {\n                SwingUtilities.invokeLater(() -> {\n                    System.err.println(\"데이터 가져오기 실패: \" + e.getMessage());\n                });\n            }\n\n            @Override\n            public void onResponse(Call call, Response response) throws IOException {\n                if (response.isSuccessful()) {\n                    String responseBody = response.body().string();\n                    JSONObject jsonResponse = new JSONObject(responseBody);\n\n                    if (jsonResponse.has(\"nickname\")) {\n                        nickname = jsonResponse.getString(\"nickname\");\n                        System.out.println(\"Nickname: \" + nickname);\n                        MainV2.setNickname(nickname);\n                    } else {\n                        System.err.println(\"사용자 정보가 존재하지 않습니다.\");\n                    }\n                } else {\n                    SwingUtilities.invokeLater(() -> {\n                        System.err.println(\"데이터 가져오기 실패: \" + response.message());\n                    });\n                }\n            }\n        });\n    }\n\n\n\n    public void onLoginSuccess() {\n        isLoginSuccessful = true;\n        loginWithFirebase(realemail, password);\n        MainV2.setVisible(true);\n        stoploginClinet();\n        startReceivingMessages();\n    }\n\n    public void onGameStart(){\n        MainV2.dispose();\n        window.onLoginSuccess();\n        stopmain();\n        stopshop();\n        stopfriendadd();\n        stopfriends();\n        stopReceivingFriendschat();\n        stopReceivingFriendInvite();\n        gameState = GameState.VISUALIZING;\n        this.setVisible(true);\n        gameThread = new Thread() {\n            @Override\n            public void run(){\n                GameLoop();\n            }\n        };\n        gameThread.start();\n    }\n    /**\n     * Set variables and objects.\n     * This method is intended to set the variables and objects for this class, variables and objects for the actual game can be set in kr.jbnu.se.std.Game.java.\n     */\n    private void Initialize()\n    {\n        // 화면 크기 정보를 가져옵니다.\n        GraphicsDevice gd = GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice();\n        Rectangle screenSize = gd.getDefaultConfiguration().getBounds();\n        frameWidth = (int) screenSize.getWidth();\n        frameHeight = (int) screenSize.getHeight();\n        this.setSize(frameWidth, frameHeight);\n    }\n\n\n    /**\n     * Load files - images, sounds, ...\n     * This method is intended to load files for this class, files for the actual game can be loaded in kr.jbnu.se.std.Game.java.\n     */\n    private void LoadContent()\n    {\n        try\n        {\n            URL shootTheDuckMenuImgUrl = this.getClass().getResource(\"/images/menu.jpg\");\n            shootTheDuckMenuImg = ImageIO.read(shootTheDuckMenuImgUrl);\n\n            // 이미지가 화면 크기에 맞게 조정됩니다.\n            shootTheDuckMenuImg = resizeImage(shootTheDuckMenuImg, frameWidth, frameHeight);\n        }\n        catch (IOException ex) {\n            Logger.getLogger(Framework.class.getName()).log(Level.SEVERE, null, ex);\n        }\n    }\n    public void getEmail(String email){\n        realemail = email;\n    }\n    public void getPassword(String password){\n        this.password = password;\n    }\n    public void getIdtoken(String idToken){\n        this.idToken = idToken;\n    }\n\n    public void getUserId(String userId){\n        email = userId;\n    }\n\n    private BufferedImage resizeImage(BufferedImage originalImage, int targetWidth, int targetHeight) {\n        int originalWidth = originalImage.getWidth();\n        int originalHeight = originalImage.getHeight();\n\n        // 이미지의 가로와 세로 비율을 계산합니다.\n        float aspectRatio = (float) originalWidth / originalHeight;\n\n        int newWidth;\n        int newHeight;\n\n        // 화면의 비율에 맞게 이미지를 조정합니다.\n        if (targetWidth / (float) targetHeight > aspectRatio) {\n            newWidth = (int) (targetHeight * aspectRatio);\n            newHeight = targetHeight;\n        } else {\n            newWidth = targetWidth;\n            newHeight = (int) (targetWidth / aspectRatio);\n        }\n\n        BufferedImage resizedImage = new BufferedImage(newWidth, newHeight, originalImage.getType());\n        Graphics2D g = resizedImage.createGraphics();\n        g.drawImage(originalImage, 0, 0, newWidth, newHeight, null);\n        g.dispose();\n\n        return resizedImage;\n    }\n\n\n\n    /**\n     * In specific intervals of time (GAME_UPDATE_PERIOD) the game/logic is updated and then the game is drawn on the screen.\n     */\n    private void GameLoop()\n    {\n        // This two variables are used in VISUALIZING state of the game. We used them to wait some time so that we get correct frame/window resolution.\n        long visualizingTime = 0, lastVisualizingTime = System.nanoTime();\n\n        // This variables are used for calculating the time that defines for how long we should put threat to sleep to meet the GAME_FPS.\n        long beginTime, timeTaken, timeLeft;\n\n        while(true)\n        {\n            beginTime = System.nanoTime();\n\n            switch (gameState)\n            {\n                case MainPage:\n                    gameState = GameState.STARTING;\n                    break;\n                case PLAYING:\n                    gameTime += System.nanoTime() - lastTime;\n\n                    game.UpdateGame(gameTime, mousePosition());\n\n                    lastTime = System.nanoTime();\n                    break;\n                case GAMEOVER:\n                    break;\n                case LOGIN:\n                    if (isLoginSuccessful) {\n                        gameState = GameState.MainPage;\n                    }\n                    break;\n                case MAIN_MENU:\n                    //...\n                    break;\n                case OPTIONS:\n                    //...\n                    break;\n                case GAME_CONTENT_LOADING:\n                    //...\n                    break;\n                case STARTING:\n                    // Sets variables and objects.\n                    Initialize();\n                    // Load files - images, sounds, ...\n                    LoadContent();\n\n                    // When all things that are called above finished, we change game status to main menu.\n                    gameState = GameState.MAIN_MENU;\n                    break;\n                case VISUALIZING:\n                    // On Ubuntu OS (when I tested on my old computer) this.getWidth() method doesn't return the correct value immediately (eg. for frame that should be 800px width, returns 0 than 790 and at last 798px).\n                    // So we wait one second for the window/frame to be set to its correct size. Just in case we\n                    // also insert 'this.getWidth() > 1' condition in case when the window/frame size wasn't set in time,\n                    // so that we although get approximately size.\n                    if(this.getWidth() > 1 && visualizingTime > secInNanosec)\n                    {\n                        frameWidth = this.getWidth();\n                        frameHeight = this.getHeight();\n\n                        // When we get size of frame we change status.\n                        gameState = GameState.STARTING;\n                    }\n                    else\n                    {\n                        visualizingTime += System.nanoTime() - lastVisualizingTime;\n                        lastVisualizingTime = System.nanoTime();\n                    }\n                    break;\n            }\n\n            // Repaint the screen.\n            repaint();\n\n            // Here we calculate the time that defines for how long we should put threat to sleep to meet the GAME_FPS.\n            timeTaken = System.nanoTime() - beginTime;\n            timeLeft = (GAME_UPDATE_PERIOD - timeTaken) / milisecInNanosec; // In milliseconds\n            // If the time is less than 10 milliseconds, then we will put thread to sleep for 10 millisecond so that some other thread can do some work.\n            if (timeLeft < 10)\n                timeLeft = 10; //set a minimum\n            try {\n                //Provides the necessary delay and also yields control so that other thread can do work.\n                Thread.sleep(timeLeft);\n            } catch (InterruptedException ex) { }\n        }\n    }\n\n    @Override\n    public void Draw(Graphics2D g2d) {\n            switch (gameState) {\n                case PLAYING:\n                    game.Draw(g2d, mousePosition());\n                    break;\n                case GAMEOVER:\n                    game.DrawGameOver(g2d, mousePosition());\n                    break;\n                case MAIN_MENU:\n                    // 중앙에 이미지를 배치합니다.\n                    int x1 = (frameWidth - shootTheDuckMenuImg.getWidth()) / 2;\n                    int y1 = (frameHeight - shootTheDuckMenuImg.getHeight()) / 2;\n                    g2d.drawImage(shootTheDuckMenuImg, x1, y1, null);\n                    g2d.drawString(\"Nickname :\" + nickname, frameWidth / 2 - 83, (int) (frameHeight * 0.61));\n                    // 나머지 텍스트는 화면 중앙에 맞게 배치합니다.\n                    g2d.drawString(\"Use left mouse button to shot the duck.\", frameWidth / 2 - 83, (int) (frameHeight * 0.65));\n                    g2d.drawString(\"Click with left mouse button to start the game.\", frameWidth / 2 - 100, (int) (frameHeight * 0.67));\n                    g2d.drawString(\"Press ESC any time to exit the game.\", frameWidth / 2 - 75, (int) (frameHeight * 0.70));\n                    g2d.setColor(Color.white);\n                    g2d.drawString(\"WWW.GAMETUTORIAL.NET\", 7, frameHeight - 5);\n                    break;\n                case OPTIONS:\n                    //...\n                    break;\n                case GAME_CONTENT_LOADING:\n                    g2d.setColor(Color.white);\n                    g2d.drawString(\"GAME is LOADING\", frameWidth / 2 - 50, frameHeight / 2);\n                    break;\n            }\n    }\n    /**\n     * Starts new game.\n     */\n    private void newGame()\n    {\n        // We set gameTime to zero and lastTime to current time for later calculations.\n        gameTime = 0;\n        lastTime = System.nanoTime();\n\n        game = new Game(this);\n    }\n\n    /**\n     *  Restart game - reset game time and call RestartGame() method of game object so that reset some variables.\n     */\n    private void restartGame()\n    {\n        // We set gameTime to zero and lastTime to current time for later calculations.\n        gameTime = 0;\n        lastTime = System.nanoTime();\n\n        game.RestartGame();\n\n        // We change game status so that the game can start.\n        gameState = GameState.PLAYING;\n    }\n\n    /**\n     * Returns the position of the mouse pointer in game frame/window.\n     * If mouse position is null than this method return 0,0 coordinate.\n     *\n     * @return Point of mouse coordinates.\n     */\n    private Point mousePosition()\n    {\n        try\n        {\n            Point mp = this.getMousePosition();\n\n            if(mp != null)\n                return this.getMousePosition();\n            else\n                return new Point(0, 0);\n        }\n        catch (Exception e)\n        {\n            return new Point(0, 0);\n        }\n    }\n\n    /**\n     * This method is called when keyboard key is released.\n     *\n     * @param e KeyEvent\n     */\n    @Override\n    public void keyReleasedFramework(KeyEvent e)\n    {\n        switch (gameState)\n        {\n            case GAMEOVER:\n                if(e.getKeyCode() == KeyEvent.VK_ESCAPE)\n                    System.exit(0);\n                else if(e.getKeyCode() == KeyEvent.VK_SPACE || e.getKeyCode() == KeyEvent.VK_ENTER)\n                    restartGame();\n                break;\n            case PLAYING:\n            case MAIN_MENU:\n                if(e.getKeyCode() == KeyEvent.VK_ESCAPE)\n                    System.exit(0);\n                break;\n        }\n    }\n\n    /**\n     * This method is called when mouse button is clicked.\n     *\n     * @param e MouseEvent\n     */\n    @Override\n    public void mouseClicked(MouseEvent e)\n    {\n        switch (gameState)\n        {\n            case MAIN_MENU:\n                if(e.getButton() == MouseEvent.BUTTON1)\n                    newGame();\n                break;\n        }\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/kr/jbnu/se/std/Framework.java b/src/main/java/kr/jbnu/se/std/Framework.java
--- a/src/main/java/kr/jbnu/se/std/Framework.java	(revision 3566542502a65e4790fb99ac2ecf4cb2b6d6ac1c)
+++ b/src/main/java/kr/jbnu/se/std/Framework.java	(date 1728289309959)
@@ -80,7 +80,7 @@
     /**
      * Possible states of the game
      */
-    public static enum GameState{STARTING, VISUALIZING, GAME_CONTENT_LOADING,LOGIN,MAIN_MENU, OPTIONS, PLAYING, GAMEOVER, MainPage, DESTROYED}
+    public static enum GameState{STARTING, VISUALIZING, GAME_CONTENT_LOADING,LOGIN,MAIN_MENU, OPTIONS, PLAYING, GAMEOVER, MainPage, Round, Pause, DESTROYED}
     /**
      * Current state of the game
      */
@@ -937,7 +937,6 @@
     public void onGameStart(){
         MainV2.dispose();
         window.onLoginSuccess();
-        stopmain();
         stopshop();
         stopfriendadd();
         stopfriends();
@@ -1046,6 +1045,9 @@
 
             switch (gameState)
             {
+                case Pause:
+
+                    break;
                 case MainPage:
                     gameState = GameState.STARTING;
                     break;
@@ -1121,6 +1123,9 @@
     @Override
     public void Draw(Graphics2D g2d) {
             switch (gameState) {
+                case Pause:
+                    game.Draw(g2d, mousePosition());
+                    break;
                 case PLAYING:
                     game.Draw(g2d, mousePosition());
                     break;
@@ -1176,6 +1181,18 @@
         gameState = GameState.PLAYING;
     }
 
+    private void nextRoundGame()
+    {
+        // We set gameTime to zero and lastTime to current time for later calculations.
+        gameTime = 0;
+        lastTime = System.nanoTime();
+
+        game.NextRound();
+
+        // We change game status so that the game can start.
+        gameState = GameState.PLAYING;
+    }
+
     /**
      * Returns the position of the mouse pointer in game frame/window.
      * If mouse position is null than this method return 0,0 coordinate.
@@ -1209,6 +1226,11 @@
     {
         switch (gameState)
         {
+            case Pause:
+                if(e.getKeyCode() == KeyEvent.VK_SPACE){
+                    nextRoundGame();
+                }
+                break;
             case GAMEOVER:
                 if(e.getKeyCode() == KeyEvent.VK_ESCAPE)
                     System.exit(0);
@@ -1239,4 +1261,6 @@
                 break;
         }
     }
+
+
 }
\ No newline at end of file
Index: src/main/java/kr/jbnu/se/std/boss1.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/kr/jbnu/se/std/boss1.java b/src/main/java/kr/jbnu/se/std/boss1.java
new file mode 100644
--- /dev/null	(date 1728289309959)
+++ b/src/main/java/kr/jbnu/se/std/boss1.java	(date 1728289309959)
@@ -0,0 +1,104 @@
+package kr.jbnu.se.std;
+
+import java.awt.Graphics2D;
+import java.awt.image.BufferedImage;
+
+/**
+ * The duck class.
+ *
+ * @author www.gametutorial.net
+ */
+
+public class boss1 {
+
+    /**
+     * How much time must pass in order to create a new duck?
+     */
+    public static long timeBetweenDucks = Framework.secInNanosec / 2;
+    /**
+     * Last time when the duck was created.
+     */
+    public static long lastDuckTime = 0;
+
+    /**
+     * kr.jbnu.se.std.Duck lines.
+     * Where is starting location for the duck?
+     * Speed of the duck?
+     * How many points is a duck worth?
+     */
+    public static int[][] duckLines = {
+            {Framework.frameWidth, (int)(Framework.frameHeight * 0.60), -2, 20},
+            {Framework.frameWidth, (int)(Framework.frameHeight * 0.65), -3, 30},
+            {Framework.frameWidth, (int)(Framework.frameHeight * 0.70), -4, 40},
+            {Framework.frameWidth, (int)(Framework.frameHeight * 0.78), -5, 50}
+    };
+    /**
+     * Indicate which is next duck line.
+     */
+    public static int nextDuckLines = 0;
+
+
+    /**
+     * X coordinate of the duck.
+     */
+    public int x;
+    /**
+     * Y coordinate of the duck.
+     */
+    public int y;
+
+    /**
+     * How fast the duck should move? And to which direction?
+     */
+    private int speed;
+
+    /**
+     * How many points this duck is worth?
+     */
+    public int score;
+
+    /**
+     * kr.jbnu.se.std.Duck image.
+     */
+    private BufferedImage bossImg;
+
+
+    /**
+     * Creates new duck.
+     *
+     * @param x Starting x coordinate.
+     * @param y Starting y coordinate.
+     * @param speed The speed of this duck.
+     * @param score How many points this duck is worth?
+     * @param bossImg Image of the boss.
+     */
+    public boss1(int x, int y, int speed, int score, BufferedImage bossImg)
+    {
+        this.x = x;
+        this.y = y;
+
+        this.speed = speed;
+
+        this.score = score;
+
+        this.bossImg = bossImg;
+    }
+
+
+    /**
+     * Move the duck.
+     */
+    public void Update()
+    {
+        x += speed;
+    }
+
+    /**
+     * Draw the duck to the screen.
+     * @param g2d Graphics2D
+     */
+    public void Draw(Graphics2D g2d)
+    {
+        g2d.drawImage(bossImg, x, y, null);
+    }
+}
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"e255d515-7351-4cf8-8843-af8a77729b48\" name=\"Changes\" comment=\"131313\">\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/target/classes/kr/jbnu/se/std/MainV2.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/kr/jbnu/se/std/MainV2.class\" afterDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"FileTemplateManagerImpl\">\n    <option name=\"RECENT_TEMPLATES\">\n      <list>\n        <option value=\"Class\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\n      <map>\n        <entry key=\"$PROJECT_DIR$\" value=\"chatwithFriends\" />\n      </map>\n    </option>\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"GitHubPullRequestSearchHistory\">{\n  &quot;lastFilter&quot;: {\n    &quot;state&quot;: &quot;OPEN&quot;,\n    &quot;assignee&quot;: &quot;kimjaehoug&quot;\n  }\n}</component>\n  <component name=\"GithubPullRequestsUISettings\">{\n  &quot;selectedUrlAndAccountId&quot;: {\n    &quot;url&quot;: &quot;https://github.com/kimjaehoug/wherelouisjeon.git&quot;,\n    &quot;accountId&quot;: &quot;a44d6209-844a-4745-82f7-f6385177c124&quot;\n  }\n}</component>\n  <component name=\"MarkdownSettingsMigration\">\n    <option name=\"stateVersion\" value=\"1\" />\n  </component>\n  <component name=\"ProjectColorInfo\">{\n  &quot;associatedIndex&quot;: 5\n}</component>\n  <component name=\"ProjectId\" id=\"2l32qehEPZRF5c71kAtLRu0eskA\" />\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\"><![CDATA[{\n  \"keyToString\": {\n    \"Application.MainClient.executor\": \"Run\",\n    \"Application.MainV2.executor\": \"Run\",\n    \"Application.ShopWindow.executor\": \"Run\",\n    \"Application.Window (1).executor\": \"Run\",\n    \"Application.Window.executor\": \"Run\",\n    \"Application.Window2222.executor\": \"Run\",\n    \"RunOnceActivity.OpenProjectViewOnStart\": \"true\",\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\n    \"SHARE_PROJECT_CONFIGURATION_FILES\": \"true\",\n    \"WebServerToolWindowFactoryState\": \"false\",\n    \"git-widget-placeholder\": \"main\",\n    \"kotlin-language-version-configured\": \"true\",\n    \"last_opened_file_path\": \"/Users/jae/Downloads/shoottheduck\",\n    \"node.js.detected.package.eslint\": \"true\",\n    \"node.js.detected.package.tslint\": \"true\",\n    \"node.js.selected.package.eslint\": \"(autodetect)\",\n    \"node.js.selected.package.tslint\": \"(autodetect)\",\n    \"nodejs_package_manager_path\": \"npm\",\n    \"project.structure.last.edited\": \"Modules\",\n    \"project.structure.proportion\": \"0.15\",\n    \"project.structure.side.proportion\": \"0.2\",\n    \"settings.editor.selected.configurable\": \"profiler.calltree.filter\",\n    \"vue.rearranger.settings.migration\": \"true\"\n  }\n}]]></component>\n  <component name=\"RecentsManager\">\n    <key name=\"CopyFile.RECENT_KEYS\">\n      <recent name=\"D:\\70.Classes\\2024-2\\source_code_analysis\\shoottheduck\\src\\main\\resources\" />\n      <recent name=\"D:\\70.Classes\\2024-2\\source_code_analysis\\shoottheduck\\src\\main\\java\" />\n    </key>\n    <key name=\"MoveFile.RECENT_KEYS\">\n      <recent name=\"$PROJECT_DIR$/src/main\" />\n      <recent name=\"$PROJECT_DIR$/src/main/resources/images\" />\n    </key>\n  </component>\n  <component name=\"RunManager\" selected=\"Application.Window2222\">\n    <configuration name=\"MainClient\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\n      <option name=\"MAIN_CLASS_NAME\" value=\"kr.jbnu.se.std.MainClient\" />\n      <module name=\"shoottheduck\" />\n      <extension name=\"coverage\">\n        <pattern>\n          <option name=\"PATTERN\" value=\"kr.jbnu.se.std.*\" />\n          <option name=\"ENABLED\" value=\"true\" />\n        </pattern>\n      </extension>\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"MainV2\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\n      <option name=\"MAIN_CLASS_NAME\" value=\"kr.jbnu.se.std.MainV2\" />\n      <module name=\"shoottheduck\" />\n      <extension name=\"coverage\">\n        <pattern>\n          <option name=\"PATTERN\" value=\"kr.jbnu.se.std.*\" />\n          <option name=\"ENABLED\" value=\"true\" />\n        </pattern>\n      </extension>\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"ShopWindow\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\n      <option name=\"MAIN_CLASS_NAME\" value=\"kr.jbnu.se.std.ShopWindow\" />\n      <module name=\"shoottheduck\" />\n      <extension name=\"coverage\">\n        <pattern>\n          <option name=\"PATTERN\" value=\"kr.jbnu.se.std.*\" />\n          <option name=\"ENABLED\" value=\"true\" />\n        </pattern>\n      </extension>\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"Window\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\n      <option name=\"MAIN_CLASS_NAME\" value=\"kr.jbnu.se.std.Window\" />\n      <module name=\"shoottheduck\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"Window2222\" type=\"Application\" factoryName=\"Application\" temporary=\"true\">\n      <option name=\"MAIN_CLASS_NAME\" value=\"kr.jbnu.se.std.Window\" />\n      <module name=\"shoottheduck\" />\n      <extension name=\"coverage\">\n        <pattern>\n          <option name=\"PATTERN\" value=\"kr.jbnu.se.std.*\" />\n          <option name=\"ENABLED\" value=\"true\" />\n        </pattern>\n      </extension>\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <list>\n      <item itemvalue=\"Application.Window\" />\n      <item itemvalue=\"Application.MainClient\" />\n      <item itemvalue=\"Application.MainV2\" />\n      <item itemvalue=\"Application.ShopWindow\" />\n      <item itemvalue=\"Application.Window2222\" />\n    </list>\n    <recent_temporary>\n      <list>\n        <item itemvalue=\"Application.Window2222\" />\n        <item itemvalue=\"Application.MainV2\" />\n        <item itemvalue=\"Application.ShopWindow\" />\n        <item itemvalue=\"Application.MainClient\" />\n        <item itemvalue=\"Application.Window\" />\n      </list>\n    </recent_temporary>\n  </component>\n  <component name=\"SharedIndexes\">\n    <attachedChunks>\n      <set>\n        <option value=\"bundled-jdk-9823dce3aa75-b114ca120d71-intellij.indexing.shared.core-IU-242.21829.142\" />\n        <option value=\"bundled-js-predefined-d6986cc7102b-7c0b70fcd90d-JavaScript-IU-242.21829.142\" />\n      </set>\n    </attachedChunks>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"e255d515-7351-4cf8-8843-af8a77729b48\" name=\"Changes\" comment=\"\" />\n      <created>1724394633914</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1724394633914</updated>\n      <workItem from=\"1724394635024\" duration=\"2830000\" />\n      <workItem from=\"1724829453673\" duration=\"684000\" />\n      <workItem from=\"1725429507492\" duration=\"630000\" />\n      <workItem from=\"1726030595579\" duration=\"691000\" />\n      <workItem from=\"1726879738970\" duration=\"1652000\" />\n      <workItem from=\"1727238748652\" duration=\"1262000\" />\n      <workItem from=\"1727689816044\" duration=\"15230000\" />\n      <workItem from=\"1727776036881\" duration=\"31242000\" />\n      <workItem from=\"1727875707906\" duration=\"28902000\" />\n      <workItem from=\"1728066880239\" duration=\"8135000\" />\n    </task>\n    <task id=\"LOCAL-00001\" summary=\"loginfunction\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1727763605144</created>\n      <option name=\"number\" value=\"00001\" />\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1727763605144</updated>\n    </task>\n    <task id=\"LOCAL-00002\" summary=\"loginfunction\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1727771161342</created>\n      <option name=\"number\" value=\"00002\" />\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1727771161342</updated>\n    </task>\n    <task id=\"LOCAL-00003\" summary=\"loginfunction\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1727781698478</created>\n      <option name=\"number\" value=\"00003\" />\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1727781698479</updated>\n    </task>\n    <task id=\"LOCAL-00004\" summary=\"loginfunction\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1727855380738</created>\n      <option name=\"number\" value=\"00004\" />\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1727855380738</updated>\n    </task>\n    <task id=\"LOCAL-00005\" summary=\"loginfunction\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1727860170579</created>\n      <option name=\"number\" value=\"00005\" />\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1727860170580</updated>\n    </task>\n    <task id=\"LOCAL-00006\" summary=\"131313\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1727863174521</created>\n      <option name=\"number\" value=\"00006\" />\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1727863174521</updated>\n    </task>\n    <task id=\"LOCAL-00007\" summary=\"131313\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1727865267663</created>\n      <option name=\"number\" value=\"00007\" />\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1727865267663</updated>\n    </task>\n    <task id=\"LOCAL-00008\" summary=\"131313\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1727871541617</created>\n      <option name=\"number\" value=\"00008\" />\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1727871541617</updated>\n    </task>\n    <task id=\"LOCAL-00009\" summary=\"131313\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1727872888568</created>\n      <option name=\"number\" value=\"00009\" />\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1727872888568</updated>\n    </task>\n    <task id=\"LOCAL-00010\" summary=\"131313\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1727872986113</created>\n      <option name=\"number\" value=\"00010\" />\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1727872986113</updated>\n    </task>\n    <task id=\"LOCAL-00011\" summary=\"131313\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1728031206772</created>\n      <option name=\"number\" value=\"00011\" />\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1728031206772</updated>\n    </task>\n    <task id=\"LOCAL-00012\" summary=\"131313\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1728031507710</created>\n      <option name=\"number\" value=\"00012\" />\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1728031507710</updated>\n    </task>\n    <task id=\"LOCAL-00013\" summary=\"131313\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1728277037261</created>\n      <option name=\"number\" value=\"00013\" />\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1728277037262</updated>\n    </task>\n    <task id=\"LOCAL-00014\" summary=\"131313\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1728277216143</created>\n      <option name=\"number\" value=\"00014\" />\n      <option name=\"presentableId\" value=\"LOCAL-00014\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1728277216143</updated>\n    </task>\n    <task id=\"LOCAL-00015\" summary=\"131313\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1728277380099</created>\n      <option name=\"number\" value=\"00015\" />\n      <option name=\"presentableId\" value=\"LOCAL-00015\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1728277380099</updated>\n    </task>\n    <task id=\"LOCAL-00016\" summary=\"131313\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1728279465226</created>\n      <option name=\"number\" value=\"00016\" />\n      <option name=\"presentableId\" value=\"LOCAL-00016\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1728279465226</updated>\n    </task>\n    <option name=\"localTasksCounter\" value=\"17\" />\n    <servers />\n  </component>\n  <component name=\"TypeScriptGeneratedFilesManager\">\n    <option name=\"version\" value=\"3\" />\n  </component>\n  <component name=\"Vcs.Log.Tabs.Properties\">\n    <option name=\"TAB_STATES\">\n      <map>\n        <entry key=\"MAIN\">\n          <value>\n            <State>\n              <option name=\"FILTERS\">\n                <map>\n                  <entry key=\"branch\">\n                    <value>\n                      <list>\n                        <option value=\"origin/chatwithFriends\" />\n                      </list>\n                    </value>\n                  </entry>\n                </map>\n              </option>\n            </State>\n          </value>\n        </entry>\n      </map>\n    </option>\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <MESSAGE value=\"loginfunction\" />\n    <MESSAGE value=\"131313\" />\n    <MESSAGE value=\"yw\" />\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"yw\" />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 3566542502a65e4790fb99ac2ecf4cb2b6d6ac1c)
+++ b/.idea/workspace.xml	(date 1728289309959)
@@ -5,8 +5,16 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="e255d515-7351-4cf8-8843-af8a77729b48" name="Changes" comment="131313">
+      <change afterPath="$PROJECT_DIR$/src/main/java/kr/jbnu/se/std/boss1.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/MainV2.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/MainV2.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/kr/jbnu/se/std/Framework.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/kr/jbnu/se/std/Framework.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/kr/jbnu/se/std/Game.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/kr/jbnu/se/std/Game.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Framework$17.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Framework$17.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Framework$18.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Framework$18.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Framework$GameState.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Framework$GameState.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Framework.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Framework.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Game$1.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Game$1.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Game.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/kr/jbnu/se/std/Game.class" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -23,7 +31,7 @@
   <component name="Git.Settings">
     <option name="RECENT_BRANCH_BY_REPOSITORY">
       <map>
-        <entry key="$PROJECT_DIR$" value="chatwithFriends" />
+        <entry key="$PROJECT_DIR$" value="Chat+mainFROnt" />
       </map>
     </option>
     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
@@ -64,7 +72,7 @@
     "RunOnceActivity.ShowReadmeOnStart": "true",
     "SHARE_PROJECT_CONFIGURATION_FILES": "true",
     "WebServerToolWindowFactoryState": "false",
-    "git-widget-placeholder": "main",
+    "git-widget-placeholder": "yewon111",
     "kotlin-language-version-configured": "true",
     "last_opened_file_path": "/Users/jae/Downloads/shoottheduck",
     "node.js.detected.package.eslint": "true",
@@ -338,7 +346,7 @@
                   <entry key="branch">
                     <value>
                       <list>
-                        <option value="origin/chatwithFriends" />
+                        <option value="origin/main" />
                       </list>
                     </value>
                   </entry>
