Index: src/main/java/kr/jbnu/se/std/MainClient.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package kr.jbnu.se.std;\n\nimport javax.swing.*;\n\npublic class MainClient extends JFrame {\n    private JPanel mainpanel;\n    private JButton button1;\n\n    public MainClient() {\n        setTitle(\"Shoot the Dock\");\n        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        setSize(1280,720);\n        setLocationRelativeTo(null);\n        setVisible(true);\n        setResizable(false);\n        setContentPane(mainpanel);\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/kr/jbnu/se/std/MainClient.java b/src/main/java/kr/jbnu/se/std/MainClient.java
--- a/src/main/java/kr/jbnu/se/std/MainClient.java	(revision 4de8335c55446d57eabc91d61df91e696ec79062)
+++ b/src/main/java/kr/jbnu/se/std/MainClient.java	(date 1727868640823)
@@ -1,18 +1,120 @@
 package kr.jbnu.se.std;
 
 import javax.swing.*;
+import java.awt.*;
+import java.awt.event.ActionEvent;
+import java.awt.event.ActionListener;
 
 public class MainClient extends JFrame {
-    private JPanel mainpanel;
-    private JButton button1;
+    private String nickname;
+    private JTextArea chatArea;
+    private JTextField messageField;
+    private Framework framework;
+    private JLabel nameLabel;
 
-    public MainClient() {
+    public MainClient(Framework framework) {
+        // 기본 프레임 설정
+        this.framework = framework;
         setTitle("Shoot the Dock");
         setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
-        setSize(1280,720);
+        setSize(1280, 720);
         setLocationRelativeTo(null);
-        setVisible(true);
         setResizable(false);
-        setContentPane(mainpanel);
+        setLayout(new BorderLayout());
+        framework.receiveMessages();
+
+        // 상단 패널
+        JPanel topPanel = new JPanel();
+        topPanel.setLayout(new BorderLayout());
+
+        // 게임 시작 버튼
+        JButton startButton = new JButton("게임 시작");
+        startButton.setPreferredSize(new Dimension(200, 50)); // 버튼 크기 설정
+        startButton.setFont(new Font("Arial", Font.BOLD, 18)); // 폰트 설정
+        startButton.setFocusable(false); // 포커스 비활성화
+        startButton.setBackground(Color.LIGHT_GRAY); // 배경색 설정
+
+        // 프로필 패널
+        JPanel profilePanel = new JPanel();
+        profilePanel.setLayout(new FlowLayout(FlowLayout.LEFT));
+
+        // 프로필 사진
+        JLabel profileImage = new JLabel(new ImageIcon("src/main/resources/images/duck.png")); // 프로필 이미지
+        profilePanel.add(profileImage); // 프로필 사진 추가
+
+        // 이름과 자기소개 패널
+        JPanel namePanel = new JPanel();
+        namePanel.setLayout(new BoxLayout(namePanel, BoxLayout.Y_AXIS)); // 세로로 정렬
+        nameLabel = new JLabel("이름: " + nickname); // 이름 레이블
+        JLabel introLabel = new JLabel("자기소개 한줄");
+        namePanel.add(nameLabel);
+        namePanel.add(introLabel);
+        profilePanel.add(namePanel); // 프로필 패널에 추가
+
+        topPanel.add(startButton, BorderLayout.CENTER); // 중앙에 추가
+        topPanel.add(profilePanel, BorderLayout.EAST); // 오른쪽에 추가
+        add(topPanel, BorderLayout.NORTH); // 상단에 추가
+
+        // 중앙 패널
+        JPanel centerPanel = new JPanel();
+        centerPanel.setLayout(new BorderLayout());
+
+        // 채팅 메시지를 표시할 영역
+        chatArea = new JTextArea();
+        chatArea.setEditable(false); // 읽기 전용
+        chatArea.setLineWrap(true); // 줄 바꿈 설정
+        JScrollPane chatScroll = new JScrollPane(chatArea); // 스크롤 패널 추가
+        centerPanel.add(chatScroll, BorderLayout.CENTER); // 중앙에 추가
+
+        // 친구 목록
+        DefaultListModel<String> friendsModel = new DefaultListModel<>();
+        friendsModel.addElement("친구1");
+        friendsModel.addElement("친구2");
+        friendsModel.addElement("친구3");
+        JList<String> friendsList = new JList<>(friendsModel);
+        JScrollPane friendsScroll = new JScrollPane(friendsList); // 스크롤 패널 추가
+        friendsScroll.setPreferredSize(new Dimension(200, 0)); // 폭 설정
+        centerPanel.add(friendsScroll, BorderLayout.EAST); // 오른쪽에 추가
+
+        add(centerPanel, BorderLayout.CENTER); // 중앙 패널 추가
+
+        // 입력 필드와 전송 버튼이 들어갈 패널
+        JPanel inputPanel = new JPanel();
+        inputPanel.setLayout(new BorderLayout());
+
+        // 입력 필드
+        messageField = new JTextField();
+        inputPanel.add(messageField, BorderLayout.CENTER); // 중앙에 추가
+
+        // 전송 버튼
+        JButton sendButton = new JButton("전송");
+        inputPanel.add(sendButton, BorderLayout.EAST); // 동쪽에 추가
+
+        // 입력 패널을 프레임 하단에 추가
+        add(inputPanel, BorderLayout.SOUTH);
+
+        // 전송 버튼 클릭 이벤트
+        sendButton.addActionListener(new ActionListener() {
+            @Override
+            public void actionPerformed(ActionEvent e) {
+                String message = messageField.getText();
+                if (!message.isEmpty()) {
+                    framework.sendMessage(message);
+                }
+            }
+        });
+
+        // 프레임을 화면에 표시
+        setVisible(true);
+    }
+
+    public void setNickname(String nickname) {
+        this.nickname = nickname;
+        nameLabel.setText("이름: " + nickname);
+    }
+
+    public void setChat(String message) {
+        messageField.setText(""); // 입력 필드 초기화
+        this.chatArea.append(message);
     }
 }
Index: src/main/java/kr/jbnu/se/std/Framework.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package kr.jbnu.se.std;\n\nimport com.google.auth.oauth2.GoogleCredentials;\nimport com.google.firebase.FirebaseApp;\nimport com.google.firebase.FirebaseOptions;\nimport com.google.firebase.auth.FirebaseAuth;\nimport com.google.firebase.auth.FirebaseAuthException;\nimport com.google.firebase.auth.UserRecord;\nimport com.google.firebase.database.*;\nimport com.google.firebase.database.core.AuthTokenProvider;\nimport com.google.gson.JsonObject;\nimport okhttp3.*;\nimport org.json.JSONObject;\n\nimport java.awt.*;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.awt.event.KeyEvent;\nimport java.awt.event.MouseEvent;\nimport java.awt.image.BufferedImage;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport javax.imageio.ImageIO;\nimport javax.swing.*;\n\n\n/**\n * kr.jbnu.se.std.Framework that controls the game (kr.jbnu.se.std.Game.java) that created it, update it and draw it on the screen.\n *\n * @author www.gametutorial.net\n */\n\npublic class Framework extends Canvas {\n\n    private boolean isLoginSuccessful = false; // 로그인 성공 여부를 관리\n    private LoginClient loginClient;\n    /**\n     * Width of the frame.\n     */\n    public static int frameWidth;\n    /**\n     * Height of the frame.\n     */\n    public static int frameHeight;\n\n    /**\n     * Time of one second in nanoseconds.\n     * 1 second = 1 000 000 000 nanoseconds\n     */\n    public static final long secInNanosec = 1000000000L;\n\n    /**\n     * Time of one millisecond in nanoseconds.\n     * 1 millisecond = 1 000 000 nanoseconds\n     */\n    public static final long milisecInNanosec = 1000000L;\n\n    /**\n     * FPS - Frames per second\n     * How many times per second the game should update?\n     */\n    private final int GAME_FPS = 60;\n    /**\n     * Pause between updates. It is in nanoseconds.\n     */\n    private final long GAME_UPDATE_PERIOD = secInNanosec / GAME_FPS;\n\n    /**\n     * Possible states of the game\n     */\n    public static enum GameState{STARTING, VISUALIZING, GAME_CONTENT_LOADING,LOGIN,MAIN_MENU, OPTIONS, PLAYING, GAMEOVER, MainPage, DESTROYED}\n    /**\n     * Current state of the game\n     */\n    public static GameState gameState;\n\n    /**\n     * Elapsed game time in nanoseconds.\n     */\n    private long gameTime;\n    // It is used for calculating elapsed time.\n    private long lastTime;\n\n    // The actual game\n    private Game game;\n    private Thread gameThread;\n    private Window window;\n    private String userid;\n    private static final String DATABASE_URL = \"https://shootthedock-default-rtdb.firebaseio.com\";\n    private OkHttpClient client;\n    private String email;\n    private String nickname;\n    private String idToken;\n    private String password;\n    private String realemail;\n    private FirebaseAuth auth;\n    private DatabaseReference databaseReference;\n    private MainV2 MainV2;\n\n\n    /**\n     * Image for menu.\n     */\n    private BufferedImage shootTheDuckMenuImg;\n\n\n    public Framework (Window window)\n    {\n        super();\n        initializeFirebase();\n        this.window = window;\n        gameState = GameState.LOGIN;\n        client = new OkHttpClient();\n        loginClient = new LoginClient(this);\n        loginClient.setVisible(true);\n        MainV2 = new MainV2();\n        MainV2.setVisible(false);\n        this.setVisible(false);\n\n\n        databaseReference = FirebaseDatabase.getInstance().getReference();\n    }\n\n    public void refreshIdToken(String email) {\n        try {\n            // 사용자의 ID 토큰을 새로 고치기 위한 로직\n            UserRecord userRecord = FirebaseAuth.getInstance().getUserByEmail(email);\n            String uid = userRecord.getUid();\n\n            // Custom token을 생성합니다.\n            String customToken = FirebaseAuth.getInstance().createCustomToken(uid);\n            this.idToken = customToken; // 새로 생성된 ID 토큰\n            System.out.println(\"New ID Token: \" + idToken);\n        } catch (FirebaseAuthException e) {\n            System.err.println(\"Error refreshing ID Token: \" + e.getMessage());\n        }\n    }\n\n\n\n    private void initializeFirebase() {\n        try {\n            FileInputStream serviceAccount = new FileInputStream(\"src/main/shootthedock-firebase-adminsdk-304qc-09167d3967.json\");\n\n            FirebaseOptions options = new FirebaseOptions.Builder()\n                    .setCredentials(GoogleCredentials.fromStream(serviceAccount))\n                    .setDatabaseUrl(\"https://shootthedock-default-rtdb.firebaseio.com\")\n                    .build();\n\n            FirebaseApp.initializeApp(options);\n        } catch (IOException e) {\n            e.printStackTrace();\n            JOptionPane.showMessageDialog(this, \"Firebase 초기화 실패: \" + e.getMessage());\n        }\n    }\n    private void loginWithFirebase(String email, String password) {\n        OkHttpClient client = new OkHttpClient();\n        JSONObject json = new JSONObject();\n        json.put(\"email\", email);\n        json.put(\"password\", password);\n        json.put(\"returnSecureToken\", true);\n        RequestBody body = RequestBody.create(MediaType.parse(\"application/json; charset=utf-8\"), json.toString());\n        Request request = new Request.Builder()\n                .url(\"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyCJDgbBXWSRoRUg3xVqsQrSEz1W5AFiE_Y\")\n                .post(body)\n                .build();\n\n        client.newCall(request).enqueue(new Callback() {\n            @Override\n            public void onFailure(Call call, IOException e) {\n                SwingUtilities.invokeLater(() -> JOptionPane.showMessageDialog(null, \"로그인 실패: \" + e.getMessage()));\n            }\n\n            @Override\n            public void onResponse(Call call, Response response) throws IOException {\n                if (response.isSuccessful()) {\n                    SwingUtilities.invokeLater(() -> {\n                        String responseBody;\n                        try {\n                            responseBody = response.body().string();\n                            JSONObject jsonResponse = new JSONObject(responseBody);\n                            // ID 토큰 가져오기\n                            idToken = jsonResponse.getString(\"idToken\");\n                            System.out.println(\"ID 토큰: \" + idToken);\n                            // 사용자의 닉네임을 가져옵니다.\n                            getNickname(idToken);\n                        } catch (IOException e) {\n                            throw new RuntimeException(e);\n                        }\n                    });\n                } else {\n                    SwingUtilities.invokeLater(() -> JOptionPane.showMessageDialog(null, \"로그인 실패: 잘못된 자격 증명\"));\n                }\n            }\n        });\n    }\n\n\n    public void getNickname(String idToken) {\n        OkHttpClient client = new OkHttpClient();\n        String url = \"https://shootthedock-default-rtdb.firebaseio.com/users/\" + email + \"/userinfo.json?auth=\" + idToken;\n\n        Request request = new Request.Builder()\n                .url(url)\n                .get()\n                .build();\n\n        client.newCall(request).enqueue(new Callback() {\n            @Override\n            public void onFailure(Call call, IOException e) {\n                SwingUtilities.invokeLater(() -> {\n                    System.err.println(\"데이터 가져오기 실패: \" + e.getMessage());\n                });\n            }\n\n            @Override\n            public void onResponse(Call call, Response response) throws IOException {\n                if (response.isSuccessful()) {\n                    String responseBody = response.body().string();\n                    JSONObject jsonResponse = new JSONObject(responseBody);\n\n                    if (jsonResponse.has(\"nickname\")) {\n                        nickname = jsonResponse.getString(\"nickname\");\n                        System.out.println(\"Nickname: \" + nickname);\n                    } else {\n                        System.err.println(\"사용자 정보가 존재하지 않습니다.\");\n                    }\n                } else {\n                    SwingUtilities.invokeLater(() -> {\n                        System.err.println(\"데이터 가져오기 실패: \" + response.message());\n                    });\n                }\n            }\n        });\n    }\n\n\n\n    public void onLoginSuccess() {\n        isLoginSuccessful = true;\n        loginWithFirebase(realemail, password);\n        MainV2.setVisible(true);\n    }\n    /**\n     * Set variables and objects.\n     * This method is intended to set the variables and objects for this class, variables and objects for the actual game can be set in kr.jbnu.se.std.Game.java.\n     */\n    private void Initialize()\n    {\n        // 화면 크기 정보를 가져옵니다.\n        GraphicsDevice gd = GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice();\n        Rectangle screenSize = gd.getDefaultConfiguration().getBounds();\n        frameWidth = (int) screenSize.getWidth();\n        frameHeight = (int) screenSize.getHeight();\n        this.setSize(frameWidth, frameHeight);\n    }\n\n\n    /**\n     * Load files - images, sounds, ...\n     * This method is intended to load files for this class, files for the actual game can be loaded in kr.jbnu.se.std.Game.java.\n     */\n    private void LoadContent()\n    {\n        try\n        {\n            URL shootTheDuckMenuImgUrl = this.getClass().getResource(\"/images/menu.jpg\");\n            shootTheDuckMenuImg = ImageIO.read(shootTheDuckMenuImgUrl);\n\n            // 이미지가 화면 크기에 맞게 조정됩니다.\n            shootTheDuckMenuImg = resizeImage(shootTheDuckMenuImg, frameWidth, frameHeight);\n        }\n        catch (IOException ex) {\n            Logger.getLogger(Framework.class.getName()).log(Level.SEVERE, null, ex);\n        }\n    }\n    public void getEmail(String email){\n        realemail = email;\n    }\n    public void getPassword(String password){\n        this.password = password;\n    }\n    public void getIdtoken(String idToken){\n        this.idToken = idToken;\n    }\n\n    public void getUserId(String userId){\n        email = userId;\n    }\n\n    private BufferedImage resizeImage(BufferedImage originalImage, int targetWidth, int targetHeight) {\n        int originalWidth = originalImage.getWidth();\n        int originalHeight = originalImage.getHeight();\n\n        // 이미지의 가로와 세로 비율을 계산합니다.\n        float aspectRatio = (float) originalWidth / originalHeight;\n\n        int newWidth;\n        int newHeight;\n\n        // 화면의 비율에 맞게 이미지를 조정합니다.\n        if (targetWidth / (float) targetHeight > aspectRatio) {\n            newWidth = (int) (targetHeight * aspectRatio);\n            newHeight = targetHeight;\n        } else {\n            newWidth = targetWidth;\n            newHeight = (int) (targetWidth / aspectRatio);\n        }\n\n        BufferedImage resizedImage = new BufferedImage(newWidth, newHeight, originalImage.getType());\n        Graphics2D g = resizedImage.createGraphics();\n        g.drawImage(originalImage, 0, 0, newWidth, newHeight, null);\n        g.dispose();\n\n        return resizedImage;\n    }\n\n\n\n    /**\n     * In specific intervals of time (GAME_UPDATE_PERIOD) the game/logic is updated and then the game is drawn on the screen.\n     */\n    private void GameLoop()\n    {\n        // This two variables are used in VISUALIZING state of the game. We used them to wait some time so that we get correct frame/window resolution.\n        long visualizingTime = 0, lastVisualizingTime = System.nanoTime();\n\n        // This variables are used for calculating the time that defines for how long we should put threat to sleep to meet the GAME_FPS.\n        long beginTime, timeTaken, timeLeft;\n\n        while(true)\n        {\n            beginTime = System.nanoTime();\n\n            switch (gameState)\n            {\n                case MainPage:\n                    gameState = GameState.VISUALIZING;\n                    break;\n                case PLAYING:\n                    gameTime += System.nanoTime() - lastTime;\n\n                    game.UpdateGame(gameTime, mousePosition());\n\n                    lastTime = System.nanoTime();\n                    break;\n                case GAMEOVER:\n                    //...\n                    break;\n                case LOGIN:\n                    if (isLoginSuccessful) {\n                        gameState = GameState.MainPage;\n                    }\n                    break;\n                case MAIN_MENU:\n                    //...\n                    break;\n                case OPTIONS:\n                    //...\n                    break;\n                case GAME_CONTENT_LOADING:\n                    //...\n                    break;\n                case STARTING:\n                    // Sets variables and objects.\n                    Initialize();\n                    // Load files - images, sounds, ...\n                    LoadContent();\n\n                    // When all things that are called above finished, we change game status to main menu.\n                    gameState = GameState.MAIN_MENU;\n                    break;\n                case VISUALIZING:\n                    // On Ubuntu OS (when I tested on my old computer) this.getWidth() method doesn't return the correct value immediately (eg. for frame that should be 800px width, returns 0 than 790 and at last 798px).\n                    // So we wait one second for the window/frame to be set to its correct size. Just in case we\n                    // also insert 'this.getWidth() > 1' condition in case when the window/frame size wasn't set in time,\n                    // so that we although get approximately size.\n                    if(this.getWidth() > 1 && visualizingTime > secInNanosec)\n                    {\n                        frameWidth = this.getWidth();\n                        frameHeight = this.getHeight();\n\n                        // When we get size of frame we change status.\n                        gameState = GameState.STARTING;\n                    }\n                    else\n                    {\n                        visualizingTime += System.nanoTime() - lastVisualizingTime;\n                        lastVisualizingTime = System.nanoTime();\n                    }\n                    break;\n            }\n\n            // Repaint the screen.\n            repaint();\n\n            // Here we calculate the time that defines for how long we should put threat to sleep to meet the GAME_FPS.\n            timeTaken = System.nanoTime() - beginTime;\n            timeLeft = (GAME_UPDATE_PERIOD - timeTaken) / milisecInNanosec; // In milliseconds\n            // If the time is less than 10 milliseconds, then we will put thread to sleep for 10 millisecond so that some other thread can do some work.\n            if (timeLeft < 10)\n                timeLeft = 10; //set a minimum\n            try {\n                //Provides the necessary delay and also yields control so that other thread can do work.\n                Thread.sleep(timeLeft);\n            } catch (InterruptedException ex) { }\n        }\n    }\n\n    @Override\n    public void Draw(Graphics2D g2d) {\n            switch (gameState) {\n                case PLAYING:\n                    game.Draw(g2d, mousePosition());\n                    break;\n                case GAMEOVER:\n                    game.DrawGameOver(g2d, mousePosition());\n                    break;\n                case MAIN_MENU:\n                    // 중앙에 이미지를 배치합니다.\n                    int x1 = (frameWidth - shootTheDuckMenuImg.getWidth()) / 2;\n                    int y1 = (frameHeight - shootTheDuckMenuImg.getHeight()) / 2;\n                    g2d.drawImage(shootTheDuckMenuImg, x1, y1, null);\n                    g2d.drawString(\"Nickname :\" + nickname, frameWidth / 2 - 83, (int) (frameHeight * 0.61));\n                    // 나머지 텍스트는 화면 중앙에 맞게 배치합니다.\n                    g2d.drawString(\"Use left mouse button to shot the duck.\", frameWidth / 2 - 83, (int) (frameHeight * 0.65));\n                    g2d.drawString(\"Click with left mouse button to start the game.\", frameWidth / 2 - 100, (int) (frameHeight * 0.67));\n                    g2d.drawString(\"Press ESC any time to exit the game.\", frameWidth / 2 - 75, (int) (frameHeight * 0.70));\n                    g2d.setColor(Color.white);\n                    g2d.drawString(\"WWW.GAMETUTORIAL.NET\", 7, frameHeight - 5);\n                    break;\n                case OPTIONS:\n                    //...\n                    break;\n                case GAME_CONTENT_LOADING:\n                    g2d.setColor(Color.white);\n                    g2d.drawString(\"GAME is LOADING\", frameWidth / 2 - 50, frameHeight / 2);\n                    break;\n            }\n    }\n    /**\n     * Starts new game.\n     */\n    private void newGame()\n    {\n        // We set gameTime to zero and lastTime to current time for later calculations.\n        gameTime = 0;\n        lastTime = System.nanoTime();\n\n        game = new Game();\n    }\n\n    /**\n     *  Restart game - reset game time and call RestartGame() method of game object so that reset some variables.\n     */\n    private void restartGame()\n    {\n        // We set gameTime to zero and lastTime to current time for later calculations.\n        gameTime = 0;\n        lastTime = System.nanoTime();\n\n        game.RestartGame();\n\n        // We change game status so that the game can start.\n        gameState = GameState.PLAYING;\n    }\n\n    /**\n     * Returns the position of the mouse pointer in game frame/window.\n     * If mouse position is null than this method return 0,0 coordinate.\n     *\n     * @return Point of mouse coordinates.\n     */\n    private Point mousePosition()\n    {\n        try\n        {\n            Point mp = this.getMousePosition();\n\n            if(mp != null)\n                return this.getMousePosition();\n            else\n                return new Point(0, 0);\n        }\n        catch (Exception e)\n        {\n            return new Point(0, 0);\n        }\n    }\n\n    /**\n     * This method is called when keyboard key is released.\n     *\n     * @param e KeyEvent\n     */\n    @Override\n    public void keyReleasedFramework(KeyEvent e)\n    {\n        switch (gameState)\n        {\n            case GAMEOVER:\n                if(e.getKeyCode() == KeyEvent.VK_ESCAPE)\n                    System.exit(0);\n                else if(e.getKeyCode() == KeyEvent.VK_SPACE || e.getKeyCode() == KeyEvent.VK_ENTER)\n                    restartGame();\n                break;\n            case PLAYING:\n            case MAIN_MENU:\n                if(e.getKeyCode() == KeyEvent.VK_ESCAPE)\n                    System.exit(0);\n                break;\n        }\n    }\n\n    /**\n     * This method is called when mouse button is clicked.\n     *\n     * @param e MouseEvent\n     */\n    @Override\n    public void mouseClicked(MouseEvent e)\n    {\n        switch (gameState)\n        {\n            case MAIN_MENU:\n                if(e.getButton() == MouseEvent.BUTTON1)\n                    newGame();\n                break;\n        }\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/kr/jbnu/se/std/Framework.java b/src/main/java/kr/jbnu/se/std/Framework.java
--- a/src/main/java/kr/jbnu/se/std/Framework.java	(revision 4de8335c55446d57eabc91d61df91e696ec79062)
+++ b/src/main/java/kr/jbnu/se/std/Framework.java	(date 1727870976439)
@@ -1,6 +1,7 @@
 package kr.jbnu.se.std;
 
 import com.google.auth.oauth2.GoogleCredentials;
+import com.google.common.util.concurrent.MoreExecutors;
 import com.google.firebase.FirebaseApp;
 import com.google.firebase.FirebaseOptions;
 import com.google.firebase.auth.FirebaseAuth;
@@ -9,6 +10,7 @@
 import com.google.firebase.database.*;
 import com.google.firebase.database.core.AuthTokenProvider;
 import com.google.gson.JsonObject;
+import jdk.jfr.internal.tool.Main;
 import okhttp3.*;
 import org.json.JSONObject;
 
@@ -25,7 +27,7 @@
 import java.util.logging.Logger;
 import javax.imageio.ImageIO;
 import javax.swing.*;
-
+import com.google.firebase.database.FirebaseDatabase;
 
 /**
  * kr.jbnu.se.std.Framework that controls the game (kr.jbnu.se.std.Game.java) that created it, update it and draw it on the screen.
@@ -98,7 +100,8 @@
     private String realemail;
     private FirebaseAuth auth;
     private DatabaseReference databaseReference;
-    private MainV2 MainV2;
+    private MainClient MainV2;
+    private DatabaseReference chatRef;
 
 
     /**
@@ -116,7 +119,7 @@
         client = new OkHttpClient();
         loginClient = new LoginClient(this);
         loginClient.setVisible(true);
-        MainV2 = new MainV2();
+        MainV2 = new MainClient(this);
         MainV2.setVisible(false);
         this.setVisible(false);
 
@@ -138,7 +141,99 @@
             System.err.println("Error refreshing ID Token: " + e.getMessage());
         }
     }
+    // Firebase에 메시지 전송
+    public void sendMessage(String message) {
+        try {
+            // 메시지를 JSON 형식으로 변환
+            JSONObject json = new JSONObject();
+            json.put("message", message);
+            json.put("nickname", nickname);
+            String timestamp = String.valueOf(System.currentTimeMillis());
+
+            // Firebase에 저장할 URL
+            String url = "https://shootthedock-default-rtdb.firebaseio.com/chat/"+ timestamp+".json"; // 채팅 메시지를 저장하는 경로
+
+            RequestBody body = RequestBody.create(
+                    MediaType.parse("application/json; charset=utf-8"),
+                    json.toString()
+            );
+
+            Request request = new Request.Builder()
+                    .url(url)
+                    .put(body) // POST 메소드 사용
+                    .build();
+
+            // 비동기 호출
+            client.newCall(request).enqueue(new Callback() {
+                @Override
+                public void onFailure(Call call, IOException e) {
+                    System.err.println("메시지 저장 실패: " + e.getMessage());
+                }
 
+                @Override
+                public void onResponse(Call call, Response response) throws IOException {
+                    if (!response.isSuccessful()) {
+                        System.err.println("메시지 저장 실패: " + response.code());
+                    } else {
+                        System.out.println("메시지 저장 성공: " + response.body().string());
+                    }
+                }
+            });
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+    }
+    // Firebase에서 메시지 수신
+
+    public void receiveMessages() {
+        OkHttpClient client = new OkHttpClient();
+        String url = "https://shootthedock-default-rtdb.firebaseio.com/chat.json?auth=\" + idToken"; // 채팅 메시지를 가져올 URL
+
+        Request request = new Request.Builder()
+                .url(url)
+                .get()
+                .build();
+
+        client.newCall(request).enqueue(new Callback() {
+            @Override
+            public void onFailure(Call call, IOException e) {
+                SwingUtilities.invokeLater(() -> {
+                    System.err.println("채팅 메시지 가져오기 실패: " + e.getMessage());
+                });
+            }
+
+            @Override
+            public void onResponse(Call call, Response response) throws IOException {
+                if (response.isSuccessful()) {
+                    String responseBody = response.body().string();
+                    JSONObject jsonResponse = new JSONObject(responseBody);
+
+                    // JSON 객체가 비어있는지 확인
+                    if (jsonResponse.length() == 0) {
+                        SwingUtilities.invokeLater(() -> {
+                            System.out.println("채팅 내역이 존재하지 않습니다.");
+                        });
+                        return;
+                    }
+
+                    // 채팅 메시지 출력
+                    for (String key : jsonResponse.keySet()) {
+                        JSONObject messageData = jsonResponse.getJSONObject(key);
+                        String message = messageData.getString("message");
+                        String senderNickname = messageData.getString("nickname");
+
+                        SwingUtilities.invokeLater(() -> {
+                            MainV2.setChat(senderNickname + ": " + message + "\n"); // 채팅 영역에 메시지 추가
+                        });
+                    }
+                } else {
+                    SwingUtilities.invokeLater(() -> {
+                        System.err.println("채팅 메시지 가져오기 실패: " + response.message());
+                    });
+                }
+            }
+        });
+    }
 
 
     private void initializeFirebase() {
@@ -225,6 +320,7 @@
                     if (jsonResponse.has("nickname")) {
                         nickname = jsonResponse.getString("nickname");
                         System.out.println("Nickname: " + nickname);
+                        MainV2.setNickname(nickname);
                     } else {
                         System.err.println("사용자 정보가 존재하지 않습니다.");
                     }
@@ -244,6 +340,18 @@
         loginWithFirebase(realemail, password);
         MainV2.setVisible(true);
     }
+
+    public void onGameStart(){
+        MainV2.dispose();
+        gameState = GameState.VISUALIZING;
+        gameThread = new Thread() {
+            @Override
+            public void run(){
+                GameLoop();
+            }
+        };
+        gameThread.start();
+    }
     /**
      * Set variables and objects.
      * This method is intended to set the variables and objects for this class, variables and objects for the actual game can be set in kr.jbnu.se.std.Game.java.
Index: src/main/java/kr/jbnu/se/std/MainClient.form
===================================================================
diff --git a/src/main/java/kr/jbnu/se/std/MainClient.form b/src/main/java/kr/jbnu/se/std/MainClient.form
deleted file mode 100644
--- a/src/main/java/kr/jbnu/se/std/MainClient.form	(revision 4de8335c55446d57eabc91d61df91e696ec79062)
+++ /dev/null	(revision 4de8335c55446d57eabc91d61df91e696ec79062)
@@ -1,27 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<form xmlns="http://www.intellij.com/uidesigner/form/" version="1" bind-to-class="kr.jbnu.se.std.MainClient">
-  <grid id="27dc6" binding="mainpanel" layout-manager="FlowLayout" hgap="5" vgap="5" flow-align="1">
-    <constraints>
-      <xy x="20" y="20" width="671" height="435"/>
-    </constraints>
-    <properties>
-      <background color="-3599"/>
-      <preferredSize width="1280" height="720"/>
-    </properties>
-    <border type="none"/>
-    <children>
-      <hspacer id="ef16c">
-        <constraints/>
-      </hspacer>
-      <component id="f3042" class="javax.swing.JButton" binding="button1" default-binding="true">
-        <constraints/>
-        <properties>
-          <text value="Button"/>
-        </properties>
-      </component>
-      <hspacer id="36303">
-        <constraints/>
-      </hspacer>
-    </children>
-  </grid>
-</form>
Index: src/main/java/kr/jbnu/se/std/ChatMessage.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/kr/jbnu/se/std/ChatMessage.java b/src/main/java/kr/jbnu/se/std/ChatMessage.java
new file mode 100644
--- /dev/null	(date 1727866572697)
+++ b/src/main/java/kr/jbnu/se/std/ChatMessage.java	(date 1727866572697)
@@ -0,0 +1,18 @@
+package kr.jbnu.se.std;
+
+public class ChatMessage {
+    private String message;
+    private String nickname;
+    public ChatMessage() {
+    }
+    public ChatMessage(String message, String nickname) {
+        this.message = message;
+        this.nickname = nickname;
+    }
+    public String getMessage() {
+        return message;
+    }
+    public String getNickname() {
+        return nickname;
+    }
+}
